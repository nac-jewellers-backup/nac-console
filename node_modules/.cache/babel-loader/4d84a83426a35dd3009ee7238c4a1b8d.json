{"ast":null,"code":"import _objectSpread from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/manikandan/Downloads/Archive/src/screens/Productupload/Review.js\";\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { Input } from '../../components/Input.js';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from 'react-select';\nimport { ProductContext } from '../../context';\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Box from '@material-ui/core/Box';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Paper from '@material-ui/core/Paper';\nimport SelectPlaceholder from '../../components/SelectPlaceholder.js';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { Card, CardHeader, Chip, CardContent, TextField, Divider, RadioGroup, Radio, FormControlLabel, Checkbox } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport \"./Productupload.css\";\nimport { func } from 'prop-types';\nconst useStyles = makeStyles(theme => ({\n  fixedTag: {\n    padding: 0,\n    '& .MuiOutlinedInput-root': {\n      padding: 0\n    }\n  },\n  root: {\n    marginTop: theme.spacing(2)\n  },\n  table: {\n    marginTop: theme.spacing(2)\n  },\n  button: {\n    margin: theme.spacing(0)\n  },\n  paper: {\n    padding: theme.spacing(2),\n    width: '100%'\n  },\n  gempapper: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    width: '100%'\n  },\n  leftIcon: {\n    marginRight: theme.spacing(1)\n  },\n  rightIcon: {\n    marginLeft: theme.spacing(1)\n  },\n  iconSmall: {\n    fontSize: 20\n  }\n}));\nexport default function Review(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const inputLabel = React.useRef(null);\n\n  const className = props.className,\n        rest = _objectWithoutProperties(props, [\"className\"]);\n\n  const _React$useContext = React.useContext(ProductContext),\n        productCtx = _React$useContext.productCtx,\n        setProductCtx = _React$useContext.setProductCtx;\n\n  const handleInputChange = type => e => {\n    setProductCtx(_objectSpread({}, productCtx, {\n      [type]: e.target.value\n    }));\n  };\n\n  const handleChange = type => selectedOption => {\n    setProductCtx(_objectSpread({}, productCtx, {\n      [type]: selectedOption\n    }));\n  };\n\n  function editmaterial(name) {\n    clearmetalvalue();\n    assignvalue(productCtx.metals[name], name);\n  }\n\n  function deletematerial(name) {\n    clearmetalvalue();\n    var metalsarr = productCtx.metals;\n    metalsarr.splice(name, 1);\n    setProductCtx(_objectSpread({}, productCtx, {\n      metals: metalsarr\n    }));\n  }\n\n  const handleoptionChange = type => (event, value) => {\n    setProductCtx(_objectSpread({}, productCtx, {\n      [type]: value\n    }));\n  };\n\n  function clearmetalvalue() {\n    // for(let value in initialState){\n    //   if(value!==\"diamondclarity\" || \"diamondshape\" || \"diamondsettings\"){\n    //     setProductCtx({  \n    //       [value]:initialState[value]\n    //     })\n    //   }\n    // }\n    setProductCtx(_objectSpread({}, productCtx, {\n      diamondsettings: \"\",\n      diamondcolor: \"\",\n      diamondclarity: \"\",\n      diamondshape: \"\",\n      diamondcount: \"\",\n      diamondweight: \"\",\n      gemstonetype: \"\",\n      gemstoneshape: \"\",\n      gemstonesettings: \"\",\n      gemstonesize: \"\",\n      gemstonecount: \"\",\n      gemstoneweight: \"\"\n    })); // alert(productCtx)\n    // console.log(productCtx)\n  }\n\n  function assignvalue(metalobj, indexval) {\n    if (metalobj.metalname === 'Diamond') {\n      setProductCtx(_objectSpread({}, productCtx, {\n        diamondsettings: metalobj.settings,\n        diamondcolor: metalobj.color,\n        diamondclarity: metalobj.clarity,\n        diamondshape: metalobj.shape,\n        diamondcount: metalobj.count,\n        diamondweight: metalobj.weight,\n        metalindex: indexval\n      }));\n    } else {\n      setProductCtx(_objectSpread({}, productCtx, {\n        gemstonesettings: metalobj.settings,\n        gemstoneshape: metalobj.color,\n        gemstonetype: metalobj.clarity,\n        gemstonesize: metalobj.shape,\n        gemstonecount: metalobj.count,\n        gemstoneweight: metalobj.weight,\n        metalindex: indexval\n      }));\n    }\n  }\n\n  function handleClick(e) {\n    var metalsarr = productCtx.metals;\n    var stonedetails = {};\n    stonedetails['metalname'] = productCtx.metal.label;\n    var isvalid = true;\n\n    if (productCtx.diamondclarity) {\n      if (productCtx.diamondsettings && productCtx.diamondcolor && productCtx.diamondclarity && productCtx.diamondshape && productCtx.diamondcount && productCtx.diamondweight) {\n        stonedetails['metalname'] = \"Diamond\";\n        stonedetails['settings'] = productCtx.diamondsettings;\n        stonedetails['color'] = productCtx.diamondcolor;\n        stonedetails['clarity'] = productCtx.diamondclarity;\n        stonedetails['shape'] = productCtx.diamondshape;\n        stonedetails['count'] = productCtx.diamondcount;\n        stonedetails['weight'] = productCtx.diamondweight;\n      } else {\n        isvalid = false;\n        alert(\"Fill all fields\");\n      }\n    } else {\n      if (productCtx.gemstonetype && productCtx.gemstoneshape && productCtx.gemstonesettings && productCtx.gemstonesize && productCtx.gemstonecount && productCtx.gemstoneweight) {\n        stonedetails['metalname'] = \"Gemstone\";\n        stonedetails['clarity'] = productCtx.gemstonetype;\n        stonedetails['color'] = productCtx.gemstoneshape;\n        stonedetails['settings'] = productCtx.gemstonesettings;\n        stonedetails['shape'] = productCtx.gemstonesize;\n        stonedetails['count'] = productCtx.gemstonecount;\n        stonedetails['weight'] = productCtx.gemstoneweight;\n      } else {\n        isvalid = false;\n        alert(\"Fill all fields\");\n      }\n    }\n\n    if (isvalid) {\n      if (productCtx.metalindex === -1) {\n        stonedetails['id'] = metalsarr.length;\n        metalsarr.push(stonedetails);\n      } else {\n        stonedetails['id'] = productCtx.metalindex;\n        metalsarr[productCtx.metalindex] = stonedetails;\n      }\n\n      setProductCtx(_objectSpread({}, productCtx, {\n        metals: metalsarr\n      }));\n      clearmetalvalue();\n    }\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, !productCtx.material_names.includes(\"Diamond\") ? null : React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }), React.createElement(CardHeader, {\n    title: \"General Information\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.cardcontent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    xs: 12,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    xs: 12,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"free-solo-2-demo\",\n    className: classes.fixedTag,\n    getOptionLabel: option => option.label,\n    value: productCtx.diamondclarity,\n    options: productCtx.masterData.diamondclarities,\n    onChange: handleoptionChange('diamondclarity'),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      size: \"small\",\n      label: option.label\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Diamond Type/Clarity\",\n      margin: \"dense\",\n      variant: \"outlined\",\n      fullWidth: true,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"free-solo-2-demo\",\n    className: classes.fixedTag,\n    getOptionLabel: option => option.label,\n    value: productCtx.diamondcolor,\n    options: productCtx.masterData.diamondcolors,\n    onChange: handleoptionChange('diamondcolor'),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      size: \"small\",\n      label: option.label\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Diamond Colour\",\n      margin: \"dense\",\n      variant: \"outlined\",\n      fullWidth: true,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"free-solo-2-demo\",\n    className: classes.fixedTag,\n    getOptionLabel: option => option.label,\n    value: productCtx.diamondsettings,\n    options: productCtx.masterData.diamondsettings,\n    onChange: handleoptionChange('diamondsettings'),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      size: \"small\",\n      label: option.label\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Diamond Setting\",\n      margin: \"dense\",\n      variant: \"outlined\",\n      fullWidth: true,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"free-solo-2-demo\",\n    className: classes.fixedTag,\n    getOptionLabel: option => option.label,\n    value: productCtx.diamondshape,\n    options: productCtx.masterData.diamondshapes,\n    onChange: handleoptionChange('diamondshape'),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      size: \"small\",\n      label: option.label\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Diamond Shape\",\n      margin: \"dense\",\n      variant: \"outlined\",\n      fullWidth: true,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348\n    },\n    __self: this\n  }, React.createElement(Input, {\n    variant: \"outlined\",\n    fullWidth: true,\n    id: \"size\",\n    margin: \"dense\",\n    label: \"#of Stones\",\n    name: \"size\",\n    type: \"number\",\n    autoComplete: \"size\",\n    onChange: handleInputChange('diamondcount'),\n    value: productCtx.diamondcount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363\n    },\n    __self: this\n  }, React.createElement(Input, {\n    variant: \"outlined\",\n    fullWidth: true,\n    id: \"size\",\n    margin: \"dense\",\n    label: \"Weight\",\n    name: \"size\",\n    autoComplete: \"size\",\n    onChange: handleInputChange('diamondweight'),\n    value: productCtx.diamondweight,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    justify: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    onClick: handleClick,\n    size: \"small\",\n    color: \"primary\",\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378\n    },\n    __self: this\n  }, \"Add Diamond\")))))), !productCtx.material_names.includes(\"Gemstone\") ? null : React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393\n    },\n    __self: this\n  }), React.createElement(CardHeader, {\n    title: \"General Information\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.cardcontent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    xs: 12,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"free-solo-2-demo\",\n    className: classes.fixedTag,\n    getOptionLabel: option => option.label,\n    value: productCtx.gemstonetype,\n    options: productCtx.masterData.gemstontypes,\n    onChange: handleoptionChange('gemstonetype'),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      size: \"small\",\n      label: option.label\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Gemstone Type\",\n      margin: \"dense\",\n      variant: \"outlined\",\n      fullWidth: true,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"free-solo-2-demo\",\n    className: classes.fixedTag,\n    getOptionLabel: option => option.label,\n    value: productCtx.gemstoneshape,\n    options: productCtx.masterData.gemstonshapes,\n    onChange: handleoptionChange('gemstoneshape'),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      size: \"small\",\n      label: option.label\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Gemstone Shape\",\n      margin: \"dense\",\n      variant: \"outlined\",\n      fullWidth: true,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"free-solo-2-demo\",\n    className: classes.fixedTag,\n    getOptionLabel: option => option.label,\n    value: productCtx.gemstonesettings,\n    options: productCtx.masterData.gemstonesettings,\n    onChange: handleoptionChange('gemstonesettings'),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      size: \"small\",\n      label: option.label\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Gemstone Setting\",\n      margin: \"dense\",\n      variant: \"outlined\",\n      fullWidth: true,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489\n    },\n    __self: this\n  }, React.createElement(Input, {\n    variant: \"outlined\",\n    fullWidth: true,\n    id: \"size\",\n    margin: \"dense\",\n    label: \"Gemstone Size\",\n    name: \"size\",\n    onChange: handleInputChange('gemstonesize'),\n    autoComplete: \"size\",\n    value: productCtx.gemstonesize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505\n    },\n    __self: this\n  }, React.createElement(Input, {\n    variant: \"outlined\",\n    fullWidth: true,\n    id: \"size\",\n    margin: \"dense\",\n    label: \"#of Stones\",\n    name: \"size\",\n    autoComplete: \"size\",\n    onChange: handleInputChange('gemstonecount'),\n    value: productCtx.gemstonecount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 519\n    },\n    __self: this\n  }, React.createElement(Input, {\n    variant: \"outlined\",\n    fullWidth: true,\n    id: \"size\",\n    margin: \"dense\",\n    label: \"Weight\",\n    name: \"size\",\n    autoComplete: \"size\",\n    onChange: handleInputChange('gemstoneweight'),\n    value: productCtx.gemstoneweight,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    justify: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    onClick: handleClick,\n    size: \"small\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534\n    },\n    __self: this\n  }, \"Add Gemstone\"))))), React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543\n    },\n    __self: this\n  }), React.createElement(CardHeader, {\n    title: \"General Information\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 547\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 548\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.cardcontent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 549\n    },\n    __self: this\n  }, React.createElement(Table, {\n    className: classes.table,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553\n    },\n    __self: this\n  }, \"Stone\"), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 554\n    },\n    __self: this\n  }, \"Type/Clarity\"), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 555\n    },\n    __self: this\n  }, \"Colour\"), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 556\n    },\n    __self: this\n  }, \"Setting\"), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557\n    },\n    __self: this\n  }, \"Shape\"), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558\n    },\n    __self: this\n  }, \"#of stone\"), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559\n    },\n    __self: this\n  }, \"Weight\"), React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560\n    },\n    __self: this\n  }, \"Edit\"), React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 561\n    },\n    __self: this\n  }, \"Delete\"))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565\n    },\n    __self: this\n  }, productCtx.metals.map(row => React.createElement(TableRow, {\n    key: row.metalname,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568\n    },\n    __self: this\n  }, row.metalname), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571\n    },\n    __self: this\n  }, row.clarity.label), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572\n    },\n    __self: this\n  }, row.color.label), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573\n    },\n    __self: this\n  }, row.settings.label), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574\n    },\n    __self: this\n  }, row.metalname == 'Diamond' ? row.shape.label : row.shape), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575\n    },\n    __self: this\n  }, row.count), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 576\n    },\n    __self: this\n  }, row.weight), React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 577\n    },\n    __self: this\n  }, React.createElement(EditIcon, {\n    id: row.metalname,\n    onClick: () => editmaterial(row.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 577\n    },\n    __self: this\n  }), \" \"), React.createElement(TableCell, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 578\n    },\n    __self: this\n  }, React.createElement(DeleteIcon, {\n    id: row.metalname,\n    onClick: () => deletematerial(row.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 578\n    },\n    __self: this\n  })))))))));\n}","map":{"version":3,"sources":["/home/manikandan/Downloads/Archive/src/screens/Productupload/Review.js"],"names":["React","useState","clsx","makeStyles","useTheme","Grid","Input","FormControl","Select","ProductContext","Button","Table","TableBody","TableCell","TableHead","TableRow","Box","FormLabel","EditIcon","Paper","SelectPlaceholder","Autocomplete","Card","CardHeader","Chip","CardContent","TextField","Divider","RadioGroup","Radio","FormControlLabel","Checkbox","DeleteIcon","func","useStyles","theme","fixedTag","padding","root","marginTop","spacing","table","button","margin","paper","width","gempapper","leftIcon","marginRight","rightIcon","marginLeft","iconSmall","fontSize","Review","props","classes","inputLabel","useRef","className","rest","useContext","productCtx","setProductCtx","handleInputChange","type","e","target","value","handleChange","selectedOption","editmaterial","name","clearmetalvalue","assignvalue","metals","deletematerial","metalsarr","splice","handleoptionChange","event","diamondsettings","diamondcolor","diamondclarity","diamondshape","diamondcount","diamondweight","gemstonetype","gemstoneshape","gemstonesettings","gemstonesize","gemstonecount","gemstoneweight","metalobj","indexval","metalname","settings","color","clarity","shape","count","weight","metalindex","handleClick","stonedetails","metal","label","isvalid","alert","length","push","material_names","includes","cardcontent","option","masterData","diamondclarities","getTagProps","map","index","params","InputProps","diamondcolors","diamondshapes","gemstontypes","gemstonshapes","row","id"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport clsx from 'clsx';\nimport { makeStyles,useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport {Input} from '../../components/Input.js'\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from 'react-select';\nimport { ProductContext } from '../../context';\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Box from '@material-ui/core/Box';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Paper from '@material-ui/core/Paper';\nimport SelectPlaceholder from '../../components/SelectPlaceholder.js'\nimport Autocomplete from '@material-ui/lab/Autocomplete'; \nimport {\n  Card,\n  CardHeader,\n  Chip,\n  CardContent,\n  TextField,\n  Divider,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Checkbox\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport \"./Productupload.css\"\nimport { func } from 'prop-types';\n\n  const useStyles = makeStyles(theme => ({\n    fixedTag: {\n      padding: 0,\n      '& .MuiOutlinedInput-root':{\n        padding: 0,\n      }\n    },\n    root:{\n      marginTop: theme.spacing(2)\n    },\n    table:{\n      marginTop: theme.spacing(2)\n    },\n    button: {\n      margin: theme.spacing(0),\n    },\n    paper: {\n      padding: theme.spacing(2),\n      width: '100%'\n    },\n    gempapper: {\n      padding: theme.spacing(2),\n      marginTop: theme.spacing(2),\n      width: '100%'\n    },\n    leftIcon: {\n      marginRight: theme.spacing(1),\n    },\n    rightIcon: {\n      marginLeft: theme.spacing(1),\n    },\n    iconSmall: {\n      fontSize: 20,\n    },\n  }));\n  \nexport default function Review(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const inputLabel = React.useRef(null);\n  const { className, ...rest } = props;\n  const { productCtx, setProductCtx} = React.useContext(ProductContext);\n  const handleInputChange = type => e => {\n    setProductCtx({ ...productCtx, [type]: e.target.value  })\n  }\n  const handleChange = type => selectedOption => {\n    setProductCtx({ ...productCtx, [type]: selectedOption })\n  };\n  function editmaterial(name) {\n    clearmetalvalue();\n    assignvalue(productCtx.metals[name], name);\n  }\n  function deletematerial(name) {\n    clearmetalvalue();\n    var metalsarr  = productCtx.metals;\n    metalsarr.splice(name,1)\n    setProductCtx({ ...productCtx, metals: metalsarr }) \n\n  }\n\n  const handleoptionChange = type => (event, value) => {\n    \n      setProductCtx({ ...productCtx, [type]: value})\n\n  }\n  function clearmetalvalue()\n  {\n    // for(let value in initialState){\n    //   if(value!==\"diamondclarity\" || \"diamondshape\" || \"diamondsettings\"){\n    //     setProductCtx({  \n    //       [value]:initialState[value]\n    //     })\n    //   }\n    // }\n    setProductCtx({...productCtx,\n      diamondsettings: \"\",\n      diamondcolor:\"\",\n      diamondclarity:\"\",\n      diamondshape:\"\",\n      diamondcount:\"\",\n      diamondweight:\"\",\n      gemstonetype:\"\",\n      gemstoneshape:\"\",\n      gemstonesettings:\"\",\n      gemstonesize:\"\",\n      gemstonecount:\"\",\n      gemstoneweight:\"\"\n    })\n    // alert(productCtx)\n    // console.log(productCtx)\n    \n\n  }\n  function assignvalue(metalobj, indexval)\n  {\n    if(metalobj.metalname === 'Diamond')\n    {\n    setProductCtx({ ...productCtx, \n      diamondsettings: metalobj.settings,\n      diamondcolor:metalobj.color,\n      diamondclarity:metalobj.clarity,\n      diamondshape:metalobj.shape,\n      diamondcount:metalobj.count,\n      diamondweight:metalobj.weight,\n    metalindex: indexval})\n    }else\n    {\n      setProductCtx({ ...productCtx, \n        gemstonesettings: metalobj.settings,\n        gemstoneshape:metalobj.color,\n        gemstonetype:metalobj.clarity,\n        gemstonesize:metalobj.shape,\n        gemstonecount:metalobj.count,\n        gemstoneweight:metalobj.weight,\n      metalindex: indexval})\n    }\n\n  }\n  function handleClick(e) {\n    var metalsarr  = productCtx.metals;\n    var stonedetails = {};\n    stonedetails['metalname'] = productCtx.metal.label;\n    var isvalid = true\n    if(productCtx.diamondclarity)\n    {\n    if(productCtx.diamondsettings && productCtx.diamondcolor && productCtx.diamondclarity && productCtx.diamondshape && productCtx.diamondcount &&\n      productCtx.diamondweight)\n      {      stonedetails['metalname'] = \"Diamond\"\n    stonedetails['settings'] = productCtx.diamondsettings;\n    stonedetails['color'] = productCtx.diamondcolor;\n    stonedetails['clarity'] = productCtx.diamondclarity;\n    stonedetails['shape'] = productCtx.diamondshape;\n    stonedetails['count'] = productCtx.diamondcount;\n    stonedetails['weight'] = productCtx.diamondweight;\n      }else\n      {\n        isvalid = false\n        alert(\"Fill all fields\")\n      }\n\n    }else{\n      if(productCtx.gemstonetype && \n        productCtx.gemstoneshape && \n        productCtx.gemstonesettings && \n        productCtx.gemstonesize && productCtx.gemstonecount &&\n        productCtx.gemstoneweight)\n        { \n      stonedetails['metalname'] = \"Gemstone\"\n      stonedetails['clarity'] = productCtx.gemstonetype;\n      stonedetails['color'] = productCtx.gemstoneshape;\n      stonedetails['settings'] = productCtx.gemstonesettings;\n      stonedetails['shape'] = productCtx.gemstonesize;\n      stonedetails['count'] = productCtx.gemstonecount;\n      stonedetails['weight'] = productCtx.gemstoneweight;\n    }else\n    {\n      isvalid = false\n      alert(\"Fill all fields\")\n    }\n    }\n\n    if(isvalid)\n    {\n    if(productCtx.metalindex === -1)\n    {\n      stonedetails['id'] = metalsarr.length;\n\n      metalsarr.push(stonedetails) \n\n    }else\n    {\n      stonedetails['id'] = productCtx.metalindex\n\n      metalsarr[productCtx.metalindex] = stonedetails;\n    }\n    setProductCtx({ ...productCtx, metals: metalsarr })\n    clearmetalvalue()\n  }\n  }\n\n  return (\n    <React.Fragment>\n   {!productCtx.material_names.includes(\"Diamond\") ? null : \n\n      <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n      fullWidth\n    >\n      <CardHeader title=\"General Information\" />\n      <Divider />\n      <CardContent className={classes.cardcontent}>\n      <Grid container xs={12} spacing={1}>\n\n        <Grid container xs={12} spacing={1}>\n\n        <Grid item xs={4} >\n                   \n\n                <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    value={productCtx.diamondclarity}\n                    options={productCtx.masterData.diamondclarities}\n                    onChange={handleoptionChange('diamondclarity')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Diamond Type/Clarity\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n              \n        </Grid>\n\n        <Grid item xs={4} >\n        \n                      \n\n            <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    value={productCtx.diamondcolor}\n                    options={productCtx.masterData.diamondcolors}\n                    onChange={handleoptionChange('diamondcolor')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Diamond Colour\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n\n        \n        </Grid>\n        <Grid item xs={4} >\n        \n          \n\n            <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    value={productCtx.diamondsettings}\n                    options={productCtx.masterData.diamondsettings}\n                    onChange={handleoptionChange('diamondsettings')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Diamond Setting\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n        </Grid>\n        <Grid item xs={4} >\n      \n       \n                      <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    value={productCtx.diamondshape}\n                    options={productCtx.masterData.diamondshapes}\n                    onChange={handleoptionChange('diamondshape')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Diamond Shape\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n        \n        </Grid>\n        <Grid item xs={4} >\n        \n          <Input\n              variant=\"outlined\"\n              fullWidth\n              id=\"size\"\n              margin=\"dense\"\n              label=\"#of Stones\"\n              name=\"size\"\n              type=\"number\"\n              autoComplete=\"size\"\n              onChange={handleInputChange('diamondcount')}\n              value={productCtx.diamondcount}\n              />\n        </Grid>\n        <Grid item xs={4} >\n      \n          <Input\n              variant=\"outlined\"\n              fullWidth\n              id=\"size\"\n              margin=\"dense\"\n              label=\"Weight\"\n              name=\"size\"\n              autoComplete=\"size\"\n              onChange={handleInputChange('diamondweight')}\n              value={productCtx.diamondweight}\n              />\n        </Grid>\n        <Grid container item xs={12} justify=\"flex-end\">\n        <Button variant=\"contained\" onClick={handleClick}  size=\"small\" color=\"primary\" className={classes.button}>\n            Add Diamond\n          </Button>\n\n        </Grid>\n        </Grid>\n      </Grid>\n      \n        </CardContent>\n        </Card>\n   }\n\n {!productCtx.material_names.includes(\"Gemstone\") ? null : \n\n  \n       <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"General Information\" />\n      <Divider />\n      <CardContent className={classes.cardcontent}>\n\n          <Grid  container xs={12} spacing={1}>\n\n      <Grid item xs={4} >\n      \n                 \n                       <Autocomplete\n                    \n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    value={productCtx.gemstonetype}\n                    options={productCtx.masterData.gemstontypes}\n                    onChange={handleoptionChange('gemstonetype')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Gemstone Type\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n              \n      </Grid>\n    \n      <Grid item xs={4} >\n    \n          \n\n<Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    value={productCtx.gemstoneshape}\n                    options={productCtx.masterData.gemstonshapes}\n                    onChange={handleoptionChange('gemstoneshape')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Gemstone Shape\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n      \n      </Grid>\n      <Grid item xs={4} >\n      \n          \n                    <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    value={productCtx.gemstonesettings}\n                    options={productCtx.masterData.gemstonesettings}\n                    onChange={handleoptionChange('gemstonesettings')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Gemstone Setting\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n      </Grid>\n      <Grid item xs={4} >\n    \n      <Input\n            variant=\"outlined\"\n            fullWidth\n            id=\"size\"\n            margin=\"dense\"\n            label=\"Gemstone Size\"\n            name=\"size\"\n            onChange={handleInputChange('gemstonesize')}\n            autoComplete=\"size\"\n            value={productCtx.gemstonesize}\n            />\n      \n      \n      </Grid>\n      <Grid item xs={4} >\n      \n        <Input\n            variant=\"outlined\"\n            fullWidth\n            id=\"size\"\n            margin=\"dense\"\n            label=\"#of Stones\"\n            name=\"size\"\n            autoComplete=\"size\"\n            onChange={handleInputChange('gemstonecount')}\n            value={productCtx.gemstonecount}\n            />\n      </Grid>\n      <Grid item xs={4} >\n        \n        <Input\n            variant=\"outlined\"\n            fullWidth\n            id=\"size\"\n            margin=\"dense\"\n            label=\"Weight\"\n            name=\"size\"\n            autoComplete=\"size\"\n            onChange={handleInputChange('gemstoneweight')}\n            value={productCtx.gemstoneweight}\n            />\n      </Grid>\n      <Grid container item xs={12} justify=\"flex-end\">\n      <Button variant=\"contained\" onClick={handleClick}  size=\"small\" color=\"primary\" >\n          Add Gemstone\n        </Button>\n\n      </Grid>\n      </Grid>\n            </CardContent>\n            </Card>}\n\n            <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"General Information\" />\n      <Divider />\n      <CardContent className={classes.cardcontent}>\n    <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Stone</TableCell>\n            <TableCell align=\"right\">Type/Clarity</TableCell>\n            <TableCell align=\"right\">Colour</TableCell>\n            <TableCell align=\"right\">Setting</TableCell>\n            <TableCell align=\"right\">Shape</TableCell>\n            <TableCell align=\"right\">#of stone</TableCell>\n            <TableCell align=\"right\">Weight</TableCell>\n            <TableCell align=\"center\">Edit</TableCell>\n            <TableCell align=\"center\">Delete</TableCell>\n\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {productCtx.metals.map(row => (\n            <TableRow key={row.metalname}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.metalname}\n              </TableCell>\n              <TableCell align=\"right\">{row.clarity.label}</TableCell>\n              <TableCell align=\"right\">{row.color.label}</TableCell>\n              <TableCell align=\"right\">{row.settings.label}</TableCell>\n              <TableCell align=\"right\">{row.metalname ==  'Diamond'? row.shape.label : row.shape}</TableCell>\n              <TableCell align=\"right\">{row.count}</TableCell>\n              <TableCell align=\"right\">{row.weight}</TableCell>\n              <TableCell align=\"center\"><EditIcon id={row.metalname} onClick={()=>editmaterial(row.id)}/> </TableCell>\n              <TableCell align=\"center\"><DeleteIcon id={row.metalname} onClick={()=>deletematerial(row.id)}/></TableCell>\n\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      </CardContent>\n      </Card>\n         \n </React.Fragment>\n  );\n}"]},"metadata":{},"sourceType":"module"}