{"ast":null,"code":"import _objectSpread from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/manikandan/Downloads/Archive/src/screens/ProductEdit/CreateVariant.js\";\nimport React, { useState } from 'react';\nimport { Grid, FormGroup, FormControlLabel, Checkbox, TextField } from '@material-ui/core';\nimport { withRouter } from \"react-router-dom\";\nimport { ProductContext, ProductProvider } from '../../context';\nimport axios from 'axios';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { API_URL } from '../../config';\nimport { isString } from 'util';\nimport { makeStyles } from '@material-ui/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FilePond, registerPlugin } from 'react-filepond';\nimport 'filepond/dist/filepond.min.css';\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport FilePondPluginImageValidateSize from 'filepond-plugin-image-validate-size';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename'; // import { NetworkContext } from '../../context/NetworkContext';\n\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginImageValidateSize, FilePondPluginFileRename);\nconst useStyle = makeStyles(theme => ({\n  helperinput: {\n    '& .MuiFormHelperText-root': {\n      color: \"#e53935\"\n    }\n  },\n  variantFontSize: {\n    fontSize: '.9rem'\n  }\n}));\nexport function CreateVariant(props) {\n  // const { sendNetworkRequest } = React.useContext(NetworkContext);\n  const classes = useStyle();\n  let prod_id = localStorage.getItem('productEditId');\n  const TOKEN = 'token';\n\n  const _React$useContext = React.useContext(ProductContext),\n        productCtx = _React$useContext.productCtx,\n        setProductCtx = _React$useContext.setProductCtx;\n\n  const _useState = useState({\n    metal_color: [],\n    metal_purity: [],\n    diamond_color: [],\n    diamond_clarity: [],\n    product_images: {},\n    size: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        variant = _useState2[0],\n        setVariant = _useState2[1];\n\n  console.log(productCtx, 'createvariants');\n\n  function handleMetalColor(status_data) {\n    let color = variant.metal_color;\n    color.some(color_data => color_data.id === status_data.id) ? color = color.filter(color_fil => color_fil.id !== status_data.id) : color.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_color: color\n    }));\n  }\n\n  const sendNetworkRequest = async (url, params, data, auth = false) => {\n    url = API_URL + url;\n    console.info('URL', url, data);\n    const method = data ? 'POST' : 'GET',\n          headers = {\n      'Content-Type': 'application/json'\n    };\n    let resdata = null;\n\n    if (auth) {\n      const token = localStorage.getItem(TOKEN);\n      if (token) headers[\"auth\"] = token;else window.location = '/';\n    }\n\n    const response = await fetch(url, {\n      method,\n      body: isString(data) ? data : JSON.stringify(data),\n      headers\n    });\n\n    if (response.status < 400) {\n      resdata = await response.json();\n    } else {\n      alert(\"\".concat(response.status, \":\").concat(response.statusText, \" - Unable to complete your request to \\n\").concat(url));\n    }\n\n    return resdata;\n  };\n\n  function handleMetalPurity(status_data) {\n    status_data.metal_weight = \"\";\n    alert(JSON.stringify(status_data));\n    let purity = variant.metal_purity;\n    purity.some(purity_data => purity_data.id === status_data.id) ? purity = purity.filter(purity_fil => purity_fil.id !== status_data.id) : purity.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: purity\n    }));\n  }\n\n  function diamondColorChange(status_data) {\n    let diamondColor = variant.diamond_color;\n    diamondColor.some(diamond_color_data => diamond_color_data.id === status_data.id) ? diamondColor = diamondColor.filter(diamond_color_fil => diamond_color_fil.id !== status_data.id) : diamondColor.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: diamondColor\n    }));\n  }\n\n  function diamondClarityChange(status_data) {\n    let diamondClarity = variant.diamond_clarity;\n    diamondClarity.some(diamond_clarity_data => diamond_clarity_data.id === status_data.id) ? diamondClarity = diamondClarity.filter(diamond_clarity_fil => diamond_clarity_fil.id !== status_data.id) : diamondClarity.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: diamondClarity\n    }));\n  }\n\n  function sizeChange(status_data) {\n    let variantSize = variant.size;\n    variantSize.some(variant_size_data => variant_size_data === status_data) ? variantSize = variantSize.filter(variant_size_fil => variant_size_fil !== status_data) : variantSize.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      size: variantSize\n    }));\n  }\n\n  function setMetalWeightInput(e, metalPurityId) {\n    // alert(e.target.value)\n    let metalWeight = variant.metal_purity;\n    metalWeight = metalWeight && metalWeight.map((metal_weight, index) => {\n      if (metalPurityId === metal_weight.id) {\n        metal_weight.metal_weight = e.target.value;\n      }\n\n      return metal_weight;\n    });\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: metalWeight\n    }));\n  }\n\n  async function uploadimagetoserver(bodaydata, imageposition, imagecolor, uploadtype) {\n    let prodimages = variant.product_images; // if(true)\n    // {\n\n    var prodid = prod_id;\n    let imagecolourobj = variant.product_images[imagecolor];\n    var imagecount = 1;\n\n    if (imagecolourobj) {\n      imagecount = imagecolourobj.length + 1;\n    }\n\n    let imagename = prodid + \"_\" + imagecount + imagecolor.charAt(0);\n    let responsedata = await sendNetworkRequest('/uploadimage', {}, {\n      image: bodaydata.fileExtension,\n      filename: imagename,\n      product_id: prodid\n    }, false);\n    var returnData = responsedata && responsedata.data && responsedata.data.returnData;\n    var signedRequest = returnData && returnData.signedRequest;\n    var url = returnData && returnData.url;\n    console.log(\"responseurl\" + url);\n    var filepathname = returnData && returnData.filepath;\n    var options = {\n      headers: {\n        'Content-Type': bodaydata.fileExtension,\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n\n    if (imagecolourobj) {\n      const imageobj = {\n        \"name\": prodid + \"_\" + (imagecolourobj.length + 1) + imagecolor.charAt(0),\n        \"position\": imageposition,\n        \"color\": imagecolor,\n        \"image_url\": filepathname,\n        \"url\": 'https://s3.ap-south-1.amazonaws.com/styloribaseimages/' + filepathname\n      };\n\n      if (uploadtype === 'edit') {\n        imagecolourobj[imageposition] = imageobj;\n      } else {\n        imagecolourobj.push(imageobj);\n      }\n\n      prodimages[imagecolor] = imagecolourobj;\n    } else {\n      const imageobj = {\n        \"name\": prodid + \"_1\" + imagecolor.charAt(0),\n        \"position\": imageposition,\n        \"color\": imagecolor,\n        \"image_url\": filepathname,\n        \"url\": 'https://s3.ap-south-1.amazonaws.com/styloribaseimages/' + filepathname\n      };\n      imagecolourobj = [];\n      imagecolourobj.push(imageobj);\n    }\n\n    prodimages[imagecolor] = imagecolourobj;\n    setVariant(_objectSpread({}, variant, {\n      product_images: prodimages\n    })); // setFiles([])\n    // }\n\n    await axios.put(signedRequest, bodaydata.file, options);\n  }\n\n  return React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, \"Metal Color\"), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.metalcolour.map((data, index) => productCtx.productMetalColor && productCtx.productMetalColor.some(prod_metal_color => prod_metal_color.productColor === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.metal_color && variant.metal_color.some(met_colr => met_colr.id == data.id) ? true : false,\n      onChange: () => handleMetalColor(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  })))))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, \"Metal Purity\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.metalpurity.map((data, index) => productCtx.productMetalColor && productCtx.productMetalPurity.some(prod_metal_purity => prod_metal_purity.purity === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.metal_purity && variant.metal_purity.some(met_purity => met_purity.id == data.id) ? true : false,\n      onChange: () => handleMetalPurity(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }))), variant.metal_purity && variant.metal_purity.map(metal_purity => React.createElement(TextField, {\n    className: classes.helperinput,\n    style: {\n      width: \"124px\"\n    },\n    variant: \"outlined\",\n    margin: \"dense\",\n    fullWidth: true,\n    type: \"number\",\n    value: metal_purity.metal_weight,\n    id: \"metal_weight\",\n    error: productCtx && productCtx.error_message && productCtx.error_message.product_type,\n    name: \"metal_weight\",\n    label: \"Metal Weight\".concat(metal_purity.name),\n    onChange: e => setMetalWeightInput(e, metal_purity.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, \"Diamond Color\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.diamondcolors.map((data, index) => productCtx.productDiamondColor && productCtx.productDiamondColor.some(prod_diamon_color => prod_diamon_color.diamondColour === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.diamond_color && variant.diamond_color.some(diamond_color => diamond_color.id == data.id) ? true : false,\n      onChange: () => diamondColorChange(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }, \"Diamond Clarity\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.diamondclarities.map((data, index) => productCtx.productDiamondClarity && productCtx.productDiamondClarity.some(prod_diamond_clarity => prod_diamond_clarity.diamondClarity === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.diamond_clarity && variant.diamond_clarity.some(prod_diamond_clarity => prod_diamond_clarity.id == data.id) ? true : false,\n      onChange: () => diamondClarityChange(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320\n    },\n    __self: this\n  }, \"Size\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321\n    },\n    __self: this\n  }, productCtx.productVariantSize && productCtx.productVariantSize.map((data, index) => productCtx.variant_size && productCtx.variant_size.some(variantSize => variantSize === data) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }),\n    label: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.size && variant.size.some(var_size => var_size == data) ? true : false,\n      onChange: () => sizeChange(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }),\n    label: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333\n    },\n    __self: this\n  }))))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345\n    },\n    __self: this\n  }, variant.metal_color === undefined ? null : variant.metal_color.map((value, index) => React.createElement(Grid, {\n    xs: 12,\n    container: true,\n    spacing: 1,\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    xs: 12,\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    component: \"h6\",\n    variant: \"h6\",\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350\n    },\n    __self: this\n  }, value.name)), React.createElement(Grid, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354\n    },\n    __self: this\n  }, React.createElement(FilePond, {\n    allowImageValidateSize: true,\n    imageValidateSizeMinWidth: \"2400\",\n    imageValidateSizeMinHeight: \"2400\",\n    imageValidateSizeMeasure: file => new Promise((resolve, reject) => {}),\n    labelIdle: \"Upload Image\",\n    allowMultiple: true //files = {files}\n    ,\n    onupdatefiles: fileItem => {// Set currently active file objectsfiles to this.state\n    },\n    onaddfile: (error, fileItem) => {\n      uploadimagetoserver(fileItem, index, value.name, \"add\");\n    },\n    onremovefile: (error, fileItem) => {},\n    fileRenameFunction: file => new Promise(resolve => {\n      var prodid = prod_id;\n      let imagecolourobj = variant.product_images[value.name];\n      var imagecount = 1;\n\n      if (imagecolourobj) {\n        imagecount = imagecolourobj.length + 1;\n      }\n\n      let imagename = prodid + \"_\" + imagecount + value.name.charAt(0) + file.extension;\n      resolve(imagename);\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355\n    },\n    __self: this\n  }))))));\n}\nexport default CreateVariant;","map":{"version":3,"sources":["/home/manikandan/Downloads/Archive/src/screens/ProductEdit/CreateVariant.js"],"names":["React","useState","Grid","FormGroup","FormControlLabel","Checkbox","TextField","withRouter","ProductContext","ProductProvider","axios","CardMedia","API_URL","isString","makeStyles","Typography","FilePond","registerPlugin","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","FilePondPluginImageValidateSize","FilePondPluginFileRename","useStyle","theme","helperinput","color","variantFontSize","fontSize","CreateVariant","props","classes","prod_id","localStorage","getItem","TOKEN","useContext","productCtx","setProductCtx","metal_color","metal_purity","diamond_color","diamond_clarity","product_images","size","variant","setVariant","console","log","handleMetalColor","status_data","some","color_data","id","filter","color_fil","push","sendNetworkRequest","url","params","data","auth","info","method","headers","resdata","token","window","location","response","fetch","body","JSON","stringify","status","json","alert","statusText","handleMetalPurity","metal_weight","purity","purity_data","purity_fil","diamondColorChange","diamondColor","diamond_color_data","diamond_color_fil","diamondClarityChange","diamondClarity","diamond_clarity_data","diamond_clarity_fil","sizeChange","variantSize","variant_size_data","variant_size_fil","setMetalWeightInput","e","metalPurityId","metalWeight","map","index","target","value","uploadimagetoserver","bodaydata","imageposition","imagecolor","uploadtype","prodimages","prodid","imagecolourobj","imagecount","length","imagename","charAt","responsedata","image","fileExtension","filename","product_id","returnData","signedRequest","filepathname","filepath","options","imageobj","put","file","masterData","metalcolour","productMetalColor","prod_metal_color","productColor","name","met_colr","metalpurity","productMetalPurity","prod_metal_purity","met_purity","width","error_message","product_type","diamondcolors","productDiamondColor","prod_diamon_color","diamondColour","diamondclarities","productDiamondClarity","prod_diamond_clarity","productVariantSize","variant_size","var_size","undefined","Promise","resolve","reject","fileItem","error","extension"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,gBAA1B,EAA4CC,QAA5C,EAAsDC,SAAtD,QAAuE,mBAAvE;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,cAAT,EAAwBC,eAAxB,QAA+C,eAA/C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,QAAT,QAAyB,MAAzB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACC,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,gBAAzC;AACA,OAAO,gCAAP;AACD,OAAOC,kCAAP,MAA+C,wCAA/C;AACA,OAAOC,0BAAP,MAAuC,+BAAvC;AACA,OAAO,sEAAP;AACA,OAAOC,+BAAP,MAA4C,qCAA5C;AACA,OAAOC,wBAAP,MAAqC,6BAArC,C,CACA;;AACAJ,cAAc,CAACC,kCAAD,EAAqCC,0BAArC,EAAgEC,+BAAhE,EAAgGC,wBAAhG,CAAd;AACA,MAAMC,QAAQ,GAAGR,UAAU,CAACS,KAAK,KAAK;AAClCC,EAAAA,WAAW,EAAE;AACX,iCAA6B;AAC3BC,MAAAA,KAAK,EAAE;AADoB;AADlB,GADqB;AAMlCC,EAAAA,eAAe,EAAC;AACZC,IAAAA,QAAQ,EAAC;AADG;AANkB,CAAL,CAAN,CAA3B;AAUA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AACjC;AACA,QAAMC,OAAO,GAAGR,QAAQ,EAAxB;AACA,MAAIS,OAAO,GAAGC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAd;AACA,QAAMC,KAAK,GAAG,OAAd;;AAJiC,4BAKKlC,KAAK,CAACmC,UAAN,CAAiB3B,cAAjB,CALL;AAAA,QAKzB4B,UALyB,qBAKzBA,UALyB;AAAA,QAKbC,aALa,qBAKbA,aALa;;AAAA,oBAMJpC,QAAQ,CAAC;AAClCqC,IAAAA,WAAW,EAAC,EADsB;AAElCC,IAAAA,YAAY,EAAC,EAFqB;AAGlCC,IAAAA,aAAa,EAAC,EAHoB;AAIlCC,IAAAA,eAAe,EAAC,EAJkB;AAKlCC,IAAAA,cAAc,EAAC,EALmB;AAMlCC,IAAAA,IAAI,EAAC;AAN6B,GAAD,CANJ;AAAA;AAAA,QAM1BC,OAN0B;AAAA,QAMlBC,UANkB;;AAejCC,EAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ,EAAuB,gBAAvB;;AACA,WAASY,gBAAT,CAA0BC,WAA1B,EAAuC;AACnC,QAAIxB,KAAK,GAAGmB,OAAO,CAACN,WAApB;AACAb,IAAAA,KAAK,CAACyB,IAAN,CAAWC,UAAU,IAAEA,UAAU,CAACC,EAAX,KAAgBH,WAAW,CAACG,EAAnD,IAAwD3B,KAAK,GAACA,KAAK,CAAC4B,MAAN,CAAaC,SAAS,IAAEA,SAAS,CAACF,EAAV,KAAeH,WAAW,CAACG,EAAnD,CAA9D,GAAqH3B,KAAK,CAAC8B,IAAN,CAAWN,WAAX,CAArH;AACAJ,IAAAA,UAAU,mBACHD,OADG;AAENN,MAAAA,WAAW,EAACb;AAFN,OAAV;AAIH;;AACD,QAAM+B,kBAAkB,GAAG,OAAOC,GAAP,EAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,IAAI,GAAG,KAAjC,KAA2C;AAClEH,IAAAA,GAAG,GAAG7C,OAAO,GAAC6C,GAAd;AACAX,IAAAA,OAAO,CAACe,IAAR,CAAa,KAAb,EAAoBJ,GAApB,EAAyBE,IAAzB;AACA,UAAMG,MAAM,GAAGH,IAAI,GAAG,MAAH,GAAY,KAA/B;AAAA,UACII,OAAO,GAAG;AACN,sBAAgB;AADV,KADd;AAIA,QAAIC,OAAO,GAAG,IAAd;;AACA,QAAGJ,IAAH,EAAQ;AACJ,YAAMK,KAAK,GAAGjC,YAAY,CAACC,OAAb,CAAqBC,KAArB,CAAd;AACA,UAAG+B,KAAH,EAAUF,OAAO,CAAC,MAAD,CAAP,GAAkBE,KAAlB,CAAV,KACKC,MAAM,CAACC,QAAP,GAAkB,GAAlB;AACR;;AACD,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACZ,GAAD,EAAM;AAC9BK,MAAAA,MAD8B;AACtBQ,MAAAA,IAAI,EAAEzD,QAAQ,CAAC8C,IAAD,CAAR,GAAiBA,IAAjB,GAAwBY,IAAI,CAACC,SAAL,CAAeb,IAAf,CADR;AAC8BI,MAAAA;AAD9B,KAAN,CAA5B;;AAIA,QAAGK,QAAQ,CAACK,MAAT,GAAkB,GAArB,EAAyB;AACrBT,MAAAA,OAAO,GAAG,MAAMI,QAAQ,CAACM,IAAT,EAAhB;AACH,KAFD,MAEO;AACHC,MAAAA,KAAK,WAAIP,QAAQ,CAACK,MAAb,cAAuBL,QAAQ,CAACQ,UAAhC,qDAAqFnB,GAArF,EAAL;AACH;;AACD,WAAOO,OAAP;AACH,GAvBD;;AAwBA,WAASa,iBAAT,CAA2B5B,WAA3B,EAAuC;AACnCA,IAAAA,WAAW,CAAC6B,YAAZ,GAAyB,EAAzB;AACAH,IAAAA,KAAK,CAACJ,IAAI,CAACC,SAAL,CAAevB,WAAf,CAAD,CAAL;AACA,QAAI8B,MAAM,GAAGnC,OAAO,CAACL,YAArB;AACAwC,IAAAA,MAAM,CAAC7B,IAAP,CAAY8B,WAAW,IAAEA,WAAW,CAAC5B,EAAZ,KAAiBH,WAAW,CAACG,EAAtD,IAA2D2B,MAAM,GAACA,MAAM,CAAC1B,MAAP,CAAc4B,UAAU,IAAEA,UAAU,CAAC7B,EAAX,KAAgBH,WAAW,CAACG,EAAtD,CAAlE,GAA4H2B,MAAM,CAACxB,IAAP,CAAYN,WAAZ,CAA5H;AACAJ,IAAAA,UAAU,mBACHD,OADG;AAENL,MAAAA,YAAY,EAACwC;AAFP,OAAV;AAIH;;AACD,WAASG,kBAAT,CAA4BjC,WAA5B,EAAwC;AACpC,QAAIkC,YAAY,GAAGvC,OAAO,CAACJ,aAA3B;AACA2C,IAAAA,YAAY,CAACjC,IAAb,CAAkBkC,kBAAkB,IAAEA,kBAAkB,CAAChC,EAAnB,KAAwBH,WAAW,CAACG,EAA1E,IAA+E+B,YAAY,GAACA,YAAY,CAAC9B,MAAb,CAAoBgC,iBAAiB,IAAEA,iBAAiB,CAACjC,EAAlB,KAAuBH,WAAW,CAACG,EAA1E,CAA5F,GAA0K+B,YAAY,CAAC5B,IAAb,CAAkBN,WAAlB,CAA1K;AACAJ,IAAAA,UAAU,mBACHD,OADG;AAENL,MAAAA,YAAY,EAAC4C;AAFP,OAAV;AAIH;;AACD,WAASG,oBAAT,CAA8BrC,WAA9B,EAA0C;AACtC,QAAIsC,cAAc,GAAG3C,OAAO,CAACH,eAA7B;AACA8C,IAAAA,cAAc,CAACrC,IAAf,CAAoBsC,oBAAoB,IAAEA,oBAAoB,CAACpC,EAArB,KAA0BH,WAAW,CAACG,EAAhF,IAAqFmC,cAAc,GAACA,cAAc,CAAClC,MAAf,CAAsBoC,mBAAmB,IAAEA,mBAAmB,CAACrC,EAApB,KAAyBH,WAAW,CAACG,EAAhF,CAApG,GAAwLmC,cAAc,CAAChC,IAAf,CAAoBN,WAApB,CAAxL;AACAJ,IAAAA,UAAU,mBACHD,OADG;AAENL,MAAAA,YAAY,EAACgD;AAFP,OAAV;AAKH;;AACD,WAASG,UAAT,CAAoBzC,WAApB,EAAgC;AAC5B,QAAI0C,WAAW,GAAG/C,OAAO,CAACD,IAA1B;AACAgD,IAAAA,WAAW,CAACzC,IAAZ,CAAiB0C,iBAAiB,IAAEA,iBAAiB,KAAG3C,WAAxD,IAAsE0C,WAAW,GAACA,WAAW,CAACtC,MAAZ,CAAmBwC,gBAAgB,IAAEA,gBAAgB,KAAG5C,WAAxD,CAAlF,GAAuJ0C,WAAW,CAACpC,IAAZ,CAAiBN,WAAjB,CAAvJ;AACAJ,IAAAA,UAAU,mBACHD,OADG;AAEND,MAAAA,IAAI,EAACgD;AAFC,OAAV;AAKH;;AACD,WAASG,mBAAT,CAA6BC,CAA7B,EAA+BC,aAA/B,EAA6C;AACrC;AACA,QAAIC,WAAW,GAAIrD,OAAO,CAACL,YAA3B;AACA0D,IAAAA,WAAW,GAAGA,WAAW,IAAIA,WAAW,CAACC,GAAZ,CAAgB,CAACpB,YAAD,EAAcqB,KAAd,KAAsB;AAC/D,UAAGH,aAAa,KAAGlB,YAAY,CAAC1B,EAAhC,EAAmC;AAC/B0B,QAAAA,YAAY,CAACA,YAAb,GAA4BiB,CAAC,CAACK,MAAF,CAASC,KAArC;AACH;;AACD,aAAOvB,YAAP;AACH,KAL4B,CAA7B;AAMAjC,IAAAA,UAAU,mBACHD,OADG;AAENL,MAAAA,YAAY,EAAC0D;AAFP,OAAV;AAIP;;AACD,iBAAeK,mBAAf,CAAmCC,SAAnC,EAA8CC,aAA9C,EAA6DC,UAA7D,EAAyEC,UAAzE,EACA;AACA,QAAIC,UAAU,GAAG/D,OAAO,CAACF,cAAzB,CADA,CAEA;AACA;;AACE,QAAIkE,MAAM,GAAG7E,OAAb;AACA,QAAI8E,cAAc,GAAGjE,OAAO,CAACF,cAAR,CAAuB+D,UAAvB,CAArB;AACA,QAAIK,UAAU,GAAI,CAAlB;;AACA,QAAGD,cAAH,EACA;AACEC,MAAAA,UAAU,GAAGD,cAAc,CAACE,MAAf,GAAwB,CAArC;AACD;;AAED,QAAIC,SAAS,GAAIJ,MAAM,GAAC,GAAP,GAAYE,UAAZ,GAAwBL,UAAU,CAACQ,MAAX,CAAkB,CAAlB,CAAzC;AACA,QAAIC,YAAY,GAAG,MAAM1D,kBAAkB,CAAC,cAAD,EAAiB,EAAjB,EAAqB;AAAC2D,MAAAA,KAAK,EAACZ,SAAS,CAACa,aAAjB;AAAgCC,MAAAA,QAAQ,EAAEL,SAA1C;AAAqDM,MAAAA,UAAU,EAAEV;AAAjE,KAArB,EAA+F,KAA/F,CAA3C;AACA,QAAIW,UAAU,GAAEL,YAAY,IAAEA,YAAY,CAACvD,IAA3B,IAAkCuD,YAAY,CAACvD,IAAb,CAAkB4D,UAApE;AACA,QAAIC,aAAa,GAAGD,UAAU,IAAEA,UAAU,CAACC,aAA3C;AACA,QAAI/D,GAAG,GAAG8D,UAAU,IAAEA,UAAU,CAAC9D,GAAjC;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAcU,GAA1B;AACA,QAAIgE,YAAY,GAAGF,UAAU,IAAEA,UAAU,CAACG,QAA1C;AACA,QAAIC,OAAO,GAAG;AACV5D,MAAAA,OAAO,EAAE;AACL,wBAAgBwC,SAAS,CAACa,aADrB;AAEL,uCAA8B;AAFzB;AADC,KAAd;;AAOA,QAAGP,cAAH,EACA;AACE,YAAMe,QAAQ,GAAG;AACf,gBAAShB,MAAM,GAAC,GAAP,IAAYC,cAAc,CAACE,MAAf,GAAsB,CAAlC,IAAqCN,UAAU,CAACQ,MAAX,CAAkB,CAAlB,CAD/B;AAEf,oBAAWT,aAFI;AAGf,iBAAQC,UAHO;AAIf,qBAAYgB,YAJG;AAKf,eAAM,2DAAyDA;AALhD,OAAjB;;AAOA,UAAGf,UAAU,KAAK,MAAlB,EACA;AACEG,QAAAA,cAAc,CAACL,aAAD,CAAd,GAAgCoB,QAAhC;AAED,OAJD,MAKA;AACEf,QAAAA,cAAc,CAACtD,IAAf,CAAoBqE,QAApB;AAED;;AACDjB,MAAAA,UAAU,CAACF,UAAD,CAAV,GAAyBI,cAAzB;AAED,KApBD,MAqBA;AACE,YAAMe,QAAQ,GAAG;AACf,gBAAShB,MAAM,GAAC,IAAP,GAAYH,UAAU,CAACQ,MAAX,CAAkB,CAAlB,CADN;AAEf,oBAAWT,aAFI;AAGf,iBAAQC,UAHO;AAIf,qBAAYgB,YAJG;AAKf,eAAM,2DAAyDA;AALhD,OAAjB;AAOAZ,MAAAA,cAAc,GAAG,EAAjB;AACAA,MAAAA,cAAc,CAACtD,IAAf,CAAoBqE,QAApB;AACD;;AACDjB,IAAAA,UAAU,CAACF,UAAD,CAAV,GAAyBI,cAAzB;AACAhE,IAAAA,UAAU,mBAAMD,OAAN;AAAeF,MAAAA,cAAc,EAAEiE;AAA/B,OAAV,CA3DF,CA4DE;AACF;;AAEA,UAAMjG,KAAK,CAACmH,GAAN,CAAUL,aAAV,EAAyBjB,SAAS,CAACuB,IAAnC,EAAyCH,OAAzC,CAAN;AACC;;AACD,SACI,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,SAAD;AAAW,IAAA,GAAG,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQvF,UAAU,CAAC2F,UAAX,IAAuB3F,UAAU,CAAC2F,UAAX,CAAsBC,WAAtB,CAAkC9B,GAAlC,CAAsC,CAACvC,IAAD,EAAMwC,KAAN,KAEzD/D,UAAU,CAAC6F,iBAAX,IAA8B7F,UAAU,CAAC6F,iBAAX,CAA6B/E,IAA7B,CAAmCgF,gBAAD,IAAoBA,gBAAgB,CAACC,YAAjB,KAAgCxE,IAAI,CAACyE,IAA3F,CAA9B,GACI,oBAAC,gBAAD;AACA,IAAA,QAAQ,MADR;AAEA,IAAA,OAAO,EACH,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAE,IAAnB;AAAyB,MAAA,KAAK,EAAC,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ;AAKA,IAAA,KAAK,EAAEzE,IAAI,CAACyE,IALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,GAQA,oBAAC,gBAAD;AACA,IAAA,OAAO,EACH,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAExF,OAAO,CAACN,WAAR,IAAqBM,OAAO,CAACN,WAAR,CAAoBY,IAApB,CAAyBmF,QAAQ,IAAEA,QAAQ,CAACjF,EAAT,IAAaO,IAAI,CAACP,EAArD,CAArB,GAA8E,IAA9E,GAAmF,KAAtG;AAA6G,MAAA,QAAQ,EAAE,MAAIJ,gBAAgB,CAACW,IAAD,CAA3I;AAAmJ,MAAA,KAAK,EAAC,UAAzJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAIA,IAAA,KAAK,EAAEA,IAAI,CAACyE,IAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVmB,CAF/B,CADA,CAFJ,CADJ,CADJ,EA8BI,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI,oBAAC,SAAD;AAAW,IAAA,GAAG,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQhG,UAAU,CAAC2F,UAAX,IAAuB3F,UAAU,CAAC2F,UAAX,CAAsBO,WAAtB,CAAkCpC,GAAlC,CAAsC,CAACvC,IAAD,EAAMwC,KAAN,KAEzD/D,UAAU,CAAC6F,iBAAX,IAA8B7F,UAAU,CAACmG,kBAAX,CAA8BrF,IAA9B,CAAoCsF,iBAAD,IAAqBA,iBAAiB,CAACzD,MAAlB,KAA2BpB,IAAI,CAACyE,IAAxF,CAA9B,GACK,oBAAC,gBAAD;AACD,IAAA,QAAQ,MADP;AAED,IAAA,OAAO,EACH,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAE,IAAnB;AAAyB,MAAA,KAAK,EAAC,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHH;AAKD,IAAA,KAAK,EAAEzE,IAAI,CAACyE,IALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADL,GAQA,oBAAC,gBAAD;AACA,IAAA,OAAO,EACH,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAExF,OAAO,CAACL,YAAR,IAAsBK,OAAO,CAACL,YAAR,CAAqBW,IAArB,CAA0BuF,UAAU,IAAEA,UAAU,CAACrF,EAAX,IAAeO,IAAI,CAACP,EAA1D,CAAtB,GAAoF,IAApF,GAAyF,KAA5G;AAAmH,MAAA,QAAQ,EAAE,MAAIyB,iBAAiB,CAAClB,IAAD,CAAlJ;AAA0J,MAAA,KAAK,EAAC,UAAhK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAIA,IAAA,KAAK,EAAEA,IAAI,CAACyE,IAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVmB,CAF/B,CAFJ,EAyBQxF,OAAO,CAACL,YAAR,IAAuBK,OAAO,CAACL,YAAR,CAAqB2D,GAArB,CAAyB3D,YAAY,IACxD,oBAAC,SAAD;AACA,IAAA,SAAS,EAAET,OAAO,CAACN,WADnB;AAEA,IAAA,KAAK,EAAE;AAAKkH,MAAAA,KAAK,EAAE;AAAZ,KAFP;AAGA,IAAA,OAAO,EAAC,UAHR;AAIA,IAAA,MAAM,EAAC,OAJP;AAKA,IAAA,SAAS,MALT;AAMA,IAAA,IAAI,EAAC,QANL;AAOA,IAAA,KAAK,EAAEnG,YAAY,CAACuC,YAPpB;AAQA,IAAA,EAAE,EAAC,cARH;AASA,IAAA,KAAK,EAAE1C,UAAU,IAAIA,UAAU,CAACuG,aAAzB,IAA0CvG,UAAU,CAACuG,aAAX,CAAyBC,YAT1E;AAUA,IAAA,IAAI,EAAC,cAVL;AAWA,IAAA,KAAK,wBAAiBrG,YAAY,CAAC6F,IAA9B,CAXL;AAYA,IAAA,QAAQ,EAAGrC,CAAD,IAAKD,mBAAmB,CAACC,CAAD,EAAIxD,YAAY,CAACa,EAAjB,CAZlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADmB,CAzB/B,CA9BJ,EAyEI,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI,oBAAC,SAAD;AAAW,IAAA,GAAG,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQhB,UAAU,CAAC2F,UAAX,IAAuB3F,UAAU,CAAC2F,UAAX,CAAsBc,aAAtB,CAAoC3C,GAApC,CAAwC,CAACvC,IAAD,EAAMwC,KAAN,KAE3D/D,UAAU,CAAC0G,mBAAX,IAAgC1G,UAAU,CAAC0G,mBAAX,CAA+B5F,IAA/B,CAAqC6F,iBAAD,IAAqBA,iBAAiB,CAACC,aAAlB,KAAkCrF,IAAI,CAACyE,IAAhG,CAAhC,GACK,oBAAC,gBAAD;AACD,IAAA,QAAQ,MADP;AAED,IAAA,OAAO,EACH,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAE,IAAnB;AAAyB,MAAA,KAAK,EAAC,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHH;AAKD,IAAA,KAAK,EAAEzE,IAAI,CAACyE,IALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADL,GAQA,oBAAC,gBAAD;AACA,IAAA,OAAO,EACH,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAExF,OAAO,CAACJ,aAAR,IAAuBI,OAAO,CAACJ,aAAR,CAAsBU,IAAtB,CAA2BV,aAAa,IAAEA,aAAa,CAACY,EAAd,IAAkBO,IAAI,CAACP,EAAjE,CAAvB,GAA4F,IAA5F,GAAiG,KAApH;AAA2H,MAAA,QAAQ,EAAE,MAAI8B,kBAAkB,CAACvB,IAAD,CAA3J;AAAmK,MAAA,KAAK,EAAC,UAAzK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAIA,IAAA,KAAK,EAAEA,IAAI,CAACyE,IAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVmB,CAF/B,CAFJ,CAzEJ,EAkGI,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAEI,oBAAC,SAAD;AAAW,IAAA,GAAG,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQhG,UAAU,CAAC2F,UAAX,IAAuB3F,UAAU,CAAC2F,UAAX,CAAsBkB,gBAAtB,CAAuC/C,GAAvC,CAA2C,CAACvC,IAAD,EAAMwC,KAAN,KAE9D/D,UAAU,CAAC8G,qBAAX,IAAkC9G,UAAU,CAAC8G,qBAAX,CAAiChG,IAAjC,CAAuCiG,oBAAD,IAAwBA,oBAAoB,CAAC5D,cAArB,KAAsC5B,IAAI,CAACyE,IAAzG,CAAlC,GACK,oBAAC,gBAAD;AACD,IAAA,QAAQ,MADP;AAED,IAAA,OAAO,EACH,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAE,IAAnB;AAAyB,MAAA,KAAK,EAAC,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHH;AAKD,IAAA,KAAK,EAAEzE,IAAI,CAACyE,IALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADL,GAQA,oBAAC,gBAAD;AACA,IAAA,OAAO,EACH,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAExF,OAAO,CAACH,eAAR,IAAyBG,OAAO,CAACH,eAAR,CAAwBS,IAAxB,CAA6BiG,oBAAoB,IAAEA,oBAAoB,CAAC/F,EAArB,IAAyBO,IAAI,CAACP,EAAjF,CAAzB,GAA8G,IAA9G,GAAmH,KAAtI;AAA6I,MAAA,QAAQ,EAAE,MAAIkC,oBAAoB,CAAC3B,IAAD,CAA/K;AAAuL,MAAA,KAAK,EAAC,UAA7L;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAIA,IAAA,KAAK,EAAEA,IAAI,CAACyE,IAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVmB,CAF/B,CAFJ,CAlGJ,EA2HI,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEI,oBAAC,SAAD;AAAW,IAAA,GAAG,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQhG,UAAU,CAACgH,kBAAX,IAA+BhH,UAAU,CAACgH,kBAAX,CAA8BlD,GAA9B,CAAkC,CAACvC,IAAD,EAAMwC,KAAN,KAE7D/D,UAAU,CAACiH,YAAX,IAAyBjH,UAAU,CAACiH,YAAX,CAAwBnG,IAAxB,CAA8ByC,WAAD,IAAeA,WAAW,KAAGhC,IAA1D,CAAzB,GACK,oBAAC,gBAAD;AACD,IAAA,QAAQ,MADP;AAED,IAAA,OAAO,EACH,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAE,IAAnB;AAAyB,MAAA,KAAK,EAAC,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHH;AAKD,IAAA,KAAK,EAAEA,IALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADL,GAQA,oBAAC,gBAAD;AACA,IAAA,OAAO,EACH,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAEf,OAAO,CAACD,IAAR,IAAcC,OAAO,CAACD,IAAR,CAAaO,IAAb,CAAkBoG,QAAQ,IAAEA,QAAQ,IAAE3F,IAAtC,CAAd,GAA0D,IAA1D,GAA+D,KAAlF;AAAyF,MAAA,QAAQ,EAAE,MAAI+B,UAAU,CAAC/B,IAAD,CAAjH;AAAyH,MAAA,KAAK,EAAC,UAA/H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAIA,IAAA,KAAK,EAAEA,IAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAV2B,CAFvC,CAFJ,CA3HJ,CADJ,EAsJI,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACSf,OAAO,CAACN,WAAR,KAAwBiH,SAAxB,GAAoC,IAApC,GAA2C3G,OAAO,CAACN,WAAR,CAAoB4D,GAApB,CAAwB,CAACG,KAAD,EAAOF,KAAP,KACpE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAE,EAAV;AAAc,IAAA,SAAS,MAAvB;AAAwB,IAAA,OAAO,EAAE,CAAjC;AAAoC,IAAA,IAAI,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,IAAD;AAAO,IAAA,EAAE,EAAE,EAAX;AAAgB,IAAA,IAAI,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEA,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAC,IAAtB;AAA2B,IAAA,OAAO,EAAC,IAAnC;AAAwC,IAAA,KAAK,EAAC,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCE,KAAK,CAAC+B,IADP,CAFA,CADA,EAOA,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAE,EAAV;AAAc,IAAA,EAAE,EAAE,EAAlB;AAAsB,IAAA,EAAE,EAAE,EAA1B;AAA8B,IAAA,IAAI,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,QAAD;AACY,IAAA,sBAAsB,MADlC;AAEY,IAAA,yBAAyB,EAAC,MAFtC;AAGY,IAAA,0BAA0B,EAAC,MAHvC;AAIY,IAAA,wBAAwB,EAAGN,IAAD,IAAQ,IAAI0B,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAkB,CAE/D,CAFiC,CAJ9C;AAOY,IAAA,SAAS,EAAC,cAPtB;AAQY,IAAA,aAAa,EAAE,IAR3B,CASY;AATZ;AAUY,IAAA,aAAa,EAAEC,QAAQ,IAAI,CACvB;AAEH,KAbb;AAcY,IAAA,SAAS,EAAE,CAACC,KAAD,EAAQD,QAAR,KAAoB;AAC3BrD,MAAAA,mBAAmB,CAACqD,QAAD,EAAWxD,KAAX,EAAkBE,KAAK,CAAC+B,IAAxB,EAA8B,KAA9B,CAAnB;AACH,KAhBb;AAiBY,IAAA,YAAY,EAAE,CAACwB,KAAD,EAAQD,QAAR,KAAmB,CAEhC,CAnBb;AAoBY,IAAA,kBAAkB,EACb7B,IAAD,IAAU,IAAI0B,OAAJ,CAAYC,OAAO,IAAI;AACjC,UAAI7C,MAAM,GAAG7E,OAAb;AACA,UAAI8E,cAAc,GAAGjE,OAAO,CAACF,cAAR,CAAuB2D,KAAK,CAAC+B,IAA7B,CAArB;AACA,UAAItB,UAAU,GAAI,CAAlB;;AACA,UAAGD,cAAH,EACA;AACIC,QAAAA,UAAU,GAAGD,cAAc,CAACE,MAAf,GAAwB,CAArC;AACH;;AACD,UAAIC,SAAS,GAAIJ,MAAM,GAAC,GAAP,GAAYE,UAAZ,GAAwBT,KAAK,CAAC+B,IAAN,CAAWnB,MAAX,CAAkB,CAAlB,CAAzB,GAA+Ca,IAAI,CAAC+B,SAApE;AACAJ,MAAAA,OAAO,CAACzC,SAAD,CAAP;AAEH,KAXa,CArB1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CAPA,CAD4C,CADpD,CAtJJ,CADJ;AA6MH;AACD,eAAepF,aAAf","sourcesContent":["import React,{useState} from 'react';\nimport { Grid, FormGroup, FormControlLabel, Checkbox, TextField } from '@material-ui/core';\nimport { withRouter } from \"react-router-dom\";\nimport { ProductContext,ProductProvider } from '../../context';\nimport axios from 'axios';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { API_URL } from '../../config';\nimport { isString } from 'util';\nimport { makeStyles } from '@material-ui/styles';\n import Typography from '@material-ui/core/Typography';\n import { FilePond, registerPlugin } from 'react-filepond';\n import 'filepond/dist/filepond.min.css';\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport FilePondPluginImageValidateSize from 'filepond-plugin-image-validate-size';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename';\n// import { NetworkContext } from '../../context/NetworkContext';\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview,FilePondPluginImageValidateSize,FilePondPluginFileRename);\nconst useStyle = makeStyles(theme => ({\n    helperinput: {\n      '& .MuiFormHelperText-root': {\n        color: \"#e53935\",\n      }\n    },\n    variantFontSize:{\n        fontSize:'.9rem'\n    }\n  }))\nexport function CreateVariant(props) {\n    // const { sendNetworkRequest } = React.useContext(NetworkContext);\n    const classes = useStyle();\n    let prod_id = localStorage.getItem('productEditId');\n    const TOKEN = 'token'\n    const { productCtx, setProductCtx } = React.useContext(ProductContext);\n    const [variant,setVariant] = useState({\n        metal_color:[],\n        metal_purity:[],\n        diamond_color:[],\n        diamond_clarity:[],\n        product_images:{},\n        size:[]\n        \n    })\n    console.log(productCtx,'createvariants')\n    function handleMetalColor(status_data) {\n        let color = variant.metal_color;\n        color.some(color_data=>color_data.id===status_data.id)? color=color.filter(color_fil=>color_fil.id!==status_data.id):color.push(status_data)\n        setVariant({\n            ...variant,\n            metal_color:color\n        })\n    }\n    const sendNetworkRequest = async (url, params, data, auth = false) => {\n        url = API_URL+url;\n        console.info('URL', url, data)\n        const method = data ? 'POST' : 'GET', \n            headers = {\n                'Content-Type': 'application/json'\n            };\n        let resdata = null;\n        if(auth){\n            const token = localStorage.getItem(TOKEN)\n            if(token) headers[\"auth\"] = token\n            else window.location = '/'\n        }\n        const response = await fetch(url, {\n            method, body: isString(data) ? data : JSON.stringify(data), headers\n        })\n    \n        if(response.status < 400){\n            resdata = await response.json();\n        } else {\n            alert(`${response.status}:${response.statusText} - Unable to complete your request to \\n${url}`)\n        }\n        return resdata;\n    }\n    function handleMetalPurity(status_data){\n        status_data.metal_weight=\"\"\n        alert(JSON.stringify(status_data));\n        let purity = variant.metal_purity;\n        purity.some(purity_data=>purity_data.id===status_data.id)? purity=purity.filter(purity_fil=>purity_fil.id!==status_data.id):purity.push(status_data)\n        setVariant({\n            ...variant,\n            metal_purity:purity\n        })\n    }\n    function diamondColorChange(status_data){\n        let diamondColor = variant.diamond_color;\n        diamondColor.some(diamond_color_data=>diamond_color_data.id===status_data.id)? diamondColor=diamondColor.filter(diamond_color_fil=>diamond_color_fil.id!==status_data.id):diamondColor.push(status_data)\n        setVariant({\n            ...variant,\n            metal_purity:diamondColor\n        })\n    }\n    function diamondClarityChange(status_data){\n        let diamondClarity = variant.diamond_clarity;\n        diamondClarity.some(diamond_clarity_data=>diamond_clarity_data.id===status_data.id)? diamondClarity=diamondClarity.filter(diamond_clarity_fil=>diamond_clarity_fil.id!==status_data.id):diamondClarity.push(status_data)\n        setVariant({\n            ...variant,\n            metal_purity:diamondClarity\n        })\n        \n    }\n    function sizeChange(status_data){\n        let variantSize = variant.size;\n        variantSize.some(variant_size_data=>variant_size_data===status_data)? variantSize=variantSize.filter(variant_size_fil=>variant_size_fil!==status_data):variantSize.push(status_data)\n        setVariant({\n            ...variant,\n            size:variantSize\n        })\n        \n    }\n    function setMetalWeightInput(e,metalPurityId){\n            // alert(e.target.value)\n            let metalWeight =  variant.metal_purity;\n            metalWeight = metalWeight && metalWeight.map((metal_weight,index)=>{\n                if(metalPurityId===metal_weight.id){\n                    metal_weight.metal_weight = e.target.value;\n                }\n                return metal_weight;\n            });\n            setVariant({\n                ...variant,\n                metal_purity:metalWeight\n            })\n    }\n    async function uploadimagetoserver(bodaydata, imageposition, imagecolor, uploadtype)\n    {\n    let prodimages = variant.product_images;\n    // if(true)\n    // {\n      var prodid = prod_id;\n      let imagecolourobj = variant.product_images[imagecolor];\n      var imagecount  = 1;\n      if(imagecolourobj)\n      {\n        imagecount = imagecolourobj.length + 1;\n      }\n  \n      let imagename = (prodid+\"_\"+(imagecount)+imagecolor.charAt(0));\n      let responsedata = await sendNetworkRequest('/uploadimage', {}, {image:bodaydata.fileExtension, filename :imagename, product_id: prodid },false)\n      var returnData =responsedata&&responsedata.data&& responsedata.data.returnData;\n      var signedRequest = returnData&&returnData.signedRequest;\n      var url = returnData&&returnData.url;\n      console.log(\"responseurl\"+url);\n      var filepathname = returnData&&returnData.filepath;\n      var options = {\n          headers: {\n              'Content-Type': bodaydata.fileExtension,\n              'Access-Control-Allow-Origin':'*'\n          }\n      };\n      \n      if(imagecolourobj)\n      {\n        const imageobj = {\n          \"name\": (prodid+\"_\"+(imagecolourobj.length+1)+imagecolor.charAt(0)),\n          \"position\":imageposition,\n          \"color\":imagecolor,\n          \"image_url\":filepathname,\n          \"url\":'https://s3.ap-south-1.amazonaws.com/styloribaseimages/'+filepathname\n        }\n        if(uploadtype === 'edit')\n        {\n          imagecolourobj[imageposition] = imageobj;\n  \n        }else\n        {\n          imagecolourobj.push(imageobj)\n  \n        }\n        prodimages[imagecolor] = imagecolourobj;\n  \n      }else\n      {\n        const imageobj = {\n          \"name\": (prodid+\"_1\"+imagecolor.charAt(0)),\n          \"position\":imageposition,\n          \"color\":imagecolor,\n          \"image_url\":filepathname,\n          \"url\":'https://s3.ap-south-1.amazonaws.com/styloribaseimages/'+filepathname\n        }\n        imagecolourobj = [];\n        imagecolourobj.push(imageobj)\n      }\n      prodimages[imagecolor] = imagecolourobj;\n      setVariant({ ...variant, product_images: prodimages })\n      // setFiles([])\n    // }\n  \n    await axios.put(signedRequest, bodaydata.file, options)\n    }\n    return (\n        <Grid container>\n            <Grid item>\n                <Grid container>\n                    <Grid item>\n                        <Grid item >Metal Color</Grid>\n                        <Grid item >\n                        <FormGroup row>\n                            {\n                                productCtx.masterData&&productCtx.masterData.metalcolour.map((data,index)=>(\n                                    \n                                    productCtx.productMetalColor&&productCtx.productMetalColor.some((prod_metal_color)=>prod_metal_color.productColor===data.name) ?     \n                                        <FormControlLabel\n                                        disabled\n                                        control={\n                                            <Checkbox checked={true} value=\"checkedA\" />\n                                        }\n                                        label={data.name}\n                                    />:     \n                                    <FormControlLabel\n                                    control={\n                                        <Checkbox checked={variant.metal_color&&variant.metal_color.some(met_colr=>met_colr.id==data.id)?true:false} onChange={()=>handleMetalColor(data)} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />\n                            \n                                ))\n                            }\n                        </FormGroup>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid>Metal Purity</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.metalpurity.map((data,index)=>(\n                                \n                                productCtx.productMetalColor&&productCtx.productMetalPurity.some((prod_metal_purity)=>prod_metal_purity.purity===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.metal_purity&&variant.metal_purity.some(met_purity=>met_purity.id==data.id)?true:false} onChange={()=>handleMetalPurity(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                    {\n                        variant.metal_purity&& variant.metal_purity.map(metal_purity=>(\n                            <TextField\n                            className={classes.helperinput}\n                            style={{    width: \"124px\"}}\n                            variant=\"outlined\"\n                            margin=\"dense\"\n                            fullWidth\n                            type=\"number\"\n                            value={metal_purity.metal_weight}\n                            id=\"metal_weight\"\n                            error={productCtx && productCtx.error_message && productCtx.error_message.product_type}\n                            name=\"metal_weight\"\n                            label={`Metal Weight${metal_purity.name}`}\n                            onChange={(e)=>setMetalWeightInput(e, metal_purity.id)}\n                          />\n                        ))\n                    }\n                </Grid>\n                <Grid container>\n                    <Grid>Diamond Color</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.diamondcolors.map((data,index)=>(\n                                \n                                productCtx.productDiamondColor&&productCtx.productDiamondColor.some((prod_diamon_color)=>prod_diamon_color.diamondColour===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.diamond_color&&variant.diamond_color.some(diamond_color=>diamond_color.id==data.id)?true:false} onChange={()=>diamondColorChange(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid>\n                <Grid container>\n                    <Grid>Diamond Clarity</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.diamondclarities.map((data,index)=>(\n                                \n                                productCtx.productDiamondClarity&&productCtx.productDiamondClarity.some((prod_diamond_clarity)=>prod_diamond_clarity.diamondClarity===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.diamond_clarity&&variant.diamond_clarity.some(prod_diamond_clarity=>prod_diamond_clarity.id==data.id)?true:false} onChange={()=>diamondClarityChange(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid>\n                <Grid container>\n                    <Grid>Size</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.productVariantSize&&productCtx.productVariantSize.map((data,index)=>(\n                                \n                                productCtx.variant_size&&productCtx.variant_size.some((variantSize)=>variantSize===data) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.size&&variant.size.some(var_size=>var_size==data)?true:false} onChange={()=>sizeChange(data)} value=\"checkedA\" />\n                                }\n                                label={data}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid>\n            </Grid>\n            <Grid container>\n                    {variant.metal_color === undefined ? null : variant.metal_color.map((value,index) => ( \n                    <Grid xs={12} container spacing={1} item>\n                    <Grid  xs={12}  item>\n\n                    <Typography component=\"h6\" variant=\"h6\" align=\"left\">\n                    {value.name}\n                    </Typography> \n                    </Grid>\n                    <Grid xs={12} sm={12} md={12} item>\n                    <FilePond  \n                                allowImageValidateSize\n                                imageValidateSizeMinWidth=\"2400\"\n                                imageValidateSizeMinHeight=\"2400\"\n                                imageValidateSizeMeasure={(file)=>new Promise((resolve,reject)=>{\n                                   \n                                })}\n                                labelIdle=\"Upload Image\" \n                                allowMultiple={true}  \n                                //files = {files}\n                                onupdatefiles={fileItem => {\n                                    // Set currently active file objectsfiles to this.state\n                                    \n                                }}\n                                onaddfile={(error, fileItem)=> {\n                                    uploadimagetoserver(fileItem, index, value.name, \"add\")\n                                }}\n                                onremovefile={(error, fileItem)=>{\n\n                                }}\n                                fileRenameFunction={\n                                    (file) => new Promise(resolve => {\n                                    var prodid = prod_id;\n                                    let imagecolourobj = variant.product_images[value.name];\n                                    var imagecount  = 1;\n                                    if(imagecolourobj)\n                                    {\n                                        imagecount = imagecolourobj.length + 1;\n                                    }\n                                    let imagename = (prodid+\"_\"+(imagecount)+value.name.charAt(0))+file.extension;\n                                    resolve(imagename)\n                                    \n                                })\n                                } \n                                >\n                        </FilePond>\n                    </Grid>\n                    \n                    </Grid>\n                ))} \n            </Grid>\n        </Grid>\n    )\n\n}\nexport default CreateVariant;"]},"metadata":{},"sourceType":"module"}