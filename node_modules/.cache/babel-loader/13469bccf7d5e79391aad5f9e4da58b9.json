{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Dropdown = exports.DraggableAttribute = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _immutabilityHelper = require('immutability-helper');\n\nvar _immutabilityHelper2 = _interopRequireDefault(_immutabilityHelper);\n\nvar _Utilities = require('./Utilities');\n\nvar _PivotTable = require('./PivotTable');\n\nvar _PivotTable2 = _interopRequireDefault(_PivotTable);\n\nvar _reactSortablejs = require('react-sortablejs');\n\nvar _reactSortablejs2 = _interopRequireDefault(_reactSortablejs);\n\nvar _reactDraggable = require('react-draggable');\n\nvar _reactDraggable2 = _interopRequireDefault(_reactDraggable);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable react/prop-types */\n// eslint can't see inherited propTypes!\n\n\nvar DraggableAttribute = exports.DraggableAttribute = function (_React$Component) {\n  _inherits(DraggableAttribute, _React$Component);\n\n  function DraggableAttribute(props) {\n    _classCallCheck(this, DraggableAttribute);\n\n    var _this = _possibleConstructorReturn(this, (DraggableAttribute.__proto__ || Object.getPrototypeOf(DraggableAttribute)).call(this, props));\n\n    _this.state = {\n      open: false,\n      filterText: ''\n    };\n    return _this;\n  }\n\n  _createClass(DraggableAttribute, [{\n    key: 'toggleValue',\n    value: function toggleValue(value) {\n      if (value in this.props.valueFilter) {\n        this.props.removeValuesFromFilter(this.props.name, [value]);\n      } else {\n        this.props.addValuesToFilter(this.props.name, [value]);\n      }\n    }\n  }, {\n    key: 'matchesFilter',\n    value: function matchesFilter(x) {\n      return x.toLowerCase().trim().includes(this.state.filterText.toLowerCase().trim());\n    }\n  }, {\n    key: 'selectOnly',\n    value: function selectOnly(e, value) {\n      e.stopPropagation();\n      this.props.setValuesInFilter(this.props.name, Object.keys(this.props.attrValues).filter(function (y) {\n        return y !== value;\n      }));\n    }\n  }, {\n    key: 'getFilterBox',\n    value: function getFilterBox() {\n      var _this2 = this;\n\n      var showMenu = Object.keys(this.props.attrValues).length < this.props.menuLimit;\n      var values = Object.keys(this.props.attrValues);\n      var shown = values.filter(this.matchesFilter.bind(this)).sort(this.props.sorter);\n      return _react2.default.createElement(_reactDraggable2.default, {\n        handle: '.pvtDragHandle'\n      }, _react2.default.createElement('div', {\n        className: 'pvtFilterBox',\n        style: {\n          display: 'block',\n          cursor: 'initial',\n          zIndex: this.props.zIndex\n        },\n        onClick: function onClick() {\n          return _this2.props.moveFilterBoxToTop(_this2.props.name);\n        }\n      }, _react2.default.createElement('a', {\n        onClick: function onClick() {\n          return _this2.setState({\n            open: false\n          });\n        },\n        className: 'pvtCloseX'\n      }, '\\xD7'), _react2.default.createElement('span', {\n        className: 'pvtDragHandle'\n      }, '\\u2630'), _react2.default.createElement('h4', null, this.props.name), showMenu || _react2.default.createElement('p', null, '(too many values to show)'), showMenu && _react2.default.createElement('p', null, _react2.default.createElement('input', {\n        type: 'text',\n        placeholder: 'Filter values',\n        className: 'pvtSearch',\n        value: this.state.filterText,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            filterText: e.target.value\n          });\n        }\n      }), _react2.default.createElement('br', null), _react2.default.createElement('a', {\n        role: 'button',\n        className: 'pvtButton',\n        onClick: function onClick() {\n          return _this2.props.removeValuesFromFilter(_this2.props.name, Object.keys(_this2.props.attrValues).filter(_this2.matchesFilter.bind(_this2)));\n        }\n      }, 'Select ', values.length === shown.length ? 'All' : shown.length), ' ', _react2.default.createElement('a', {\n        role: 'button',\n        className: 'pvtButton',\n        onClick: function onClick() {\n          return _this2.props.addValuesToFilter(_this2.props.name, Object.keys(_this2.props.attrValues).filter(_this2.matchesFilter.bind(_this2)));\n        }\n      }, 'Deselect ', values.length === shown.length ? 'All' : shown.length)), showMenu && _react2.default.createElement('div', {\n        className: 'pvtCheckContainer'\n      }, shown.map(function (x) {\n        return _react2.default.createElement('p', {\n          key: x,\n          onClick: function onClick() {\n            return _this2.toggleValue(x);\n          },\n          className: x in _this2.props.valueFilter ? '' : 'selected'\n        }, _react2.default.createElement('a', {\n          className: 'pvtOnly',\n          onClick: function onClick(e) {\n            return _this2.selectOnly(e, x);\n          }\n        }, 'only'), _react2.default.createElement('a', {\n          className: 'pvtOnlySpacer'\n        }, '\\xA0'), x === '' ? _react2.default.createElement('em', null, 'null') : x);\n      }))));\n    }\n  }, {\n    key: 'toggleFilterBox',\n    value: function toggleFilterBox() {\n      this.setState({\n        open: !this.state.open\n      });\n      this.props.moveFilterBoxToTop(this.props.name);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var filtered = Object.keys(this.props.valueFilter).length !== 0 ? 'pvtFilteredAttribute' : '';\n      return _react2.default.createElement('li', {\n        'data-id': this.props.name\n      }, _react2.default.createElement('span', {\n        className: 'pvtAttr ' + filtered\n      }, this.props.name, _react2.default.createElement('span', {\n        className: 'pvtTriangle',\n        onClick: this.toggleFilterBox.bind(this)\n      }, ' ', '\\u25BE')), this.state.open ? this.getFilterBox() : null);\n    }\n  }]);\n\n  return DraggableAttribute;\n}(_react2.default.Component);\n\nDraggableAttribute.defaultProps = {\n  valueFilter: {}\n};\nDraggableAttribute.propTypes = {\n  name: _propTypes2.default.string.isRequired,\n  addValuesToFilter: _propTypes2.default.func.isRequired,\n  removeValuesFromFilter: _propTypes2.default.func.isRequired,\n  attrValues: _propTypes2.default.objectOf(_propTypes2.default.number).isRequired,\n  valueFilter: _propTypes2.default.objectOf(_propTypes2.default.bool),\n  moveFilterBoxToTop: _propTypes2.default.func.isRequired,\n  sorter: _propTypes2.default.func.isRequired,\n  menuLimit: _propTypes2.default.number,\n  zIndex: _propTypes2.default.number\n};\n\nvar Dropdown = exports.Dropdown = function (_React$PureComponent) {\n  _inherits(Dropdown, _React$PureComponent);\n\n  function Dropdown() {\n    _classCallCheck(this, Dropdown);\n\n    return _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).apply(this, arguments));\n  }\n\n  _createClass(Dropdown, [{\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      return _react2.default.createElement('div', {\n        className: 'pvtDropdown',\n        style: {\n          zIndex: this.props.zIndex\n        }\n      }, _react2.default.createElement('div', {\n        onClick: function onClick(e) {\n          e.stopPropagation();\n\n          _this4.props.toggle();\n        },\n        className: 'pvtDropdownValue pvtDropdownCurrent ' + (this.props.open ? 'pvtDropdownCurrentOpen' : ''),\n        role: 'button'\n      }, _react2.default.createElement('div', {\n        className: 'pvtDropdownIcon'\n      }, this.props.open ? '×' : '▾'), this.props.current || _react2.default.createElement('span', null, '\\xA0')), this.props.open && _react2.default.createElement('div', {\n        className: 'pvtDropdownMenu'\n      }, this.props.values.map(function (r) {\n        return _react2.default.createElement('div', {\n          key: r,\n          role: 'button',\n          onClick: function onClick(e) {\n            e.stopPropagation();\n\n            if (_this4.props.current === r) {\n              _this4.props.toggle();\n            } else {\n              _this4.props.setValue(r);\n            }\n          },\n          className: 'pvtDropdownValue ' + (r === _this4.props.current ? 'pvtDropdownActiveValue' : '')\n        }, r);\n      })));\n    }\n  }]);\n\n  return Dropdown;\n}(_react2.default.PureComponent);\n\nvar PivotTableUI = function (_React$PureComponent2) {\n  _inherits(PivotTableUI, _React$PureComponent2);\n\n  function PivotTableUI(props) {\n    _classCallCheck(this, PivotTableUI);\n\n    var _this5 = _possibleConstructorReturn(this, (PivotTableUI.__proto__ || Object.getPrototypeOf(PivotTableUI)).call(this, props));\n\n    _this5.state = {\n      unusedOrder: [],\n      zIndices: {},\n      maxZIndex: 1000,\n      openDropdown: false\n    };\n    return _this5;\n  }\n\n  _createClass(PivotTableUI, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.materializeInput(this.props.data);\n    }\n  }, {\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate(nextProps) {\n      this.materializeInput(nextProps.data);\n    }\n  }, {\n    key: 'materializeInput',\n    value: function materializeInput(nextData) {\n      if (this.data === nextData) {\n        return;\n      }\n\n      this.data = nextData;\n      var attrValues = {};\n      var materializedInput = [];\n      var recordsProcessed = 0;\n\n      _Utilities.PivotData.forEachRecord(this.data, this.props.derivedAttributes, function (record) {\n        materializedInput.push(record);\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = Object.keys(record)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var attr = _step.value;\n\n            if (!(attr in attrValues)) {\n              attrValues[attr] = {};\n\n              if (recordsProcessed > 0) {\n                attrValues[attr].null = recordsProcessed;\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        for (var _attr in attrValues) {\n          var value = _attr in record ? record[_attr] : 'null';\n\n          if (!(value in attrValues[_attr])) {\n            attrValues[_attr][value] = 0;\n          }\n\n          attrValues[_attr][value]++;\n        }\n\n        recordsProcessed++;\n      });\n\n      this.materializedInput = materializedInput;\n      this.attrValues = attrValues;\n    }\n  }, {\n    key: 'sendPropUpdate',\n    value: function sendPropUpdate(command) {\n      this.props.onChange((0, _immutabilityHelper2.default)(this.props, command));\n    }\n  }, {\n    key: 'propUpdater',\n    value: function propUpdater(key) {\n      var _this6 = this;\n\n      return function (value) {\n        return _this6.sendPropUpdate(_defineProperty({}, key, {\n          $set: value\n        }));\n      };\n    }\n  }, {\n    key: 'setValuesInFilter',\n    value: function setValuesInFilter(attribute, values) {\n      this.sendPropUpdate({\n        valueFilter: _defineProperty({}, attribute, {\n          $set: values.reduce(function (r, v) {\n            r[v] = true;\n            return r;\n          }, {})\n        })\n      });\n    }\n  }, {\n    key: 'addValuesToFilter',\n    value: function addValuesToFilter(attribute, values) {\n      if (attribute in this.props.valueFilter) {\n        this.sendPropUpdate({\n          valueFilter: _defineProperty({}, attribute, values.reduce(function (r, v) {\n            r[v] = {\n              $set: true\n            };\n            return r;\n          }, {}))\n        });\n      } else {\n        this.setValuesInFilter(attribute, values);\n      }\n    }\n  }, {\n    key: 'removeValuesFromFilter',\n    value: function removeValuesFromFilter(attribute, values) {\n      this.sendPropUpdate({\n        valueFilter: _defineProperty({}, attribute, {\n          $unset: values\n        })\n      });\n    }\n  }, {\n    key: 'moveFilterBoxToTop',\n    value: function moveFilterBoxToTop(attribute) {\n      this.setState((0, _immutabilityHelper2.default)(this.state, {\n        maxZIndex: {\n          $set: this.state.maxZIndex + 1\n        },\n        zIndices: _defineProperty({}, attribute, {\n          $set: this.state.maxZIndex + 1\n        })\n      }));\n    }\n  }, {\n    key: 'isOpen',\n    value: function isOpen(dropdown) {\n      return this.state.openDropdown === dropdown;\n    }\n  }, {\n    key: 'makeDnDCell',\n    value: function makeDnDCell(items, onChange, classes) {\n      var _this7 = this;\n\n      return _react2.default.createElement(_reactSortablejs2.default, {\n        options: {\n          group: 'shared',\n          ghostClass: 'pvtPlaceholder',\n          filter: '.pvtFilterBox',\n          preventOnFilter: false\n        },\n        tag: 'td',\n        className: classes,\n        onChange: onChange\n      }, items.map(function (x) {\n        return _react2.default.createElement(DraggableAttribute, {\n          name: x,\n          key: x,\n          attrValues: _this7.attrValues[x],\n          valueFilter: _this7.props.valueFilter[x] || {},\n          sorter: (0, _Utilities.getSort)(_this7.props.sorters, x),\n          menuLimit: _this7.props.menuLimit,\n          setValuesInFilter: _this7.setValuesInFilter.bind(_this7),\n          addValuesToFilter: _this7.addValuesToFilter.bind(_this7),\n          moveFilterBoxToTop: _this7.moveFilterBoxToTop.bind(_this7),\n          removeValuesFromFilter: _this7.removeValuesFromFilter.bind(_this7),\n          zIndex: _this7.state.zIndices[x] || _this7.state.maxZIndex\n        });\n      }));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this8 = this;\n\n      var numValsAllowed = this.props.aggregators[this.props.aggregatorName]([])().numInputs || 0;\n      var rendererName = this.props.rendererName in this.props.renderers ? this.props.rendererName : Object.keys(this.props.renderers)[0];\n\n      var rendererCell = _react2.default.createElement('td', {\n        className: 'pvtRenderers'\n      }, _react2.default.createElement(Dropdown, {\n        current: rendererName,\n        values: Object.keys(this.props.renderers),\n        open: this.isOpen('renderer'),\n        zIndex: this.isOpen('renderer') ? this.state.maxZIndex + 1 : 1,\n        toggle: function toggle() {\n          return _this8.setState({\n            openDropdown: _this8.isOpen('renderer') ? false : 'renderer'\n          });\n        },\n        setValue: this.propUpdater('rendererName')\n      }));\n\n      var sortIcons = {\n        key_a_to_z: {\n          rowSymbol: '↕',\n          colSymbol: '↔',\n          next: 'value_a_to_z'\n        },\n        value_a_to_z: {\n          rowSymbol: '↓',\n          colSymbol: '→',\n          next: 'value_z_to_a'\n        },\n        value_z_to_a: {\n          rowSymbol: '↑',\n          colSymbol: '←',\n          next: 'key_a_to_z'\n        }\n      };\n\n      var aggregatorCell = _react2.default.createElement('td', {\n        className: 'pvtVals'\n      }, _react2.default.createElement(Dropdown, {\n        current: this.props.aggregatorName,\n        values: Object.keys(this.props.aggregators),\n        open: this.isOpen('aggregators'),\n        zIndex: this.isOpen('aggregators') ? this.state.maxZIndex + 1 : 1,\n        toggle: function toggle() {\n          return _this8.setState({\n            openDropdown: _this8.isOpen('aggregators') ? false : 'aggregators'\n          });\n        },\n        setValue: this.propUpdater('aggregatorName')\n      }), _react2.default.createElement('a', {\n        role: 'button',\n        className: 'pvtRowOrder',\n        onClick: function onClick() {\n          return _this8.propUpdater('rowOrder')(sortIcons[_this8.props.rowOrder].next);\n        }\n      }, sortIcons[this.props.rowOrder].rowSymbol), _react2.default.createElement('a', {\n        role: 'button',\n        className: 'pvtColOrder',\n        onClick: function onClick() {\n          return _this8.propUpdater('colOrder')(sortIcons[_this8.props.colOrder].next);\n        }\n      }, sortIcons[this.props.colOrder].colSymbol), numValsAllowed > 0 && _react2.default.createElement('br', null), new Array(numValsAllowed).fill().map(function (n, i) {\n        return [_react2.default.createElement(Dropdown, {\n          key: i,\n          current: _this8.props.vals[i],\n          values: Object.keys(_this8.attrValues).filter(function (e) {\n            return !_this8.props.hiddenAttributes.includes(e) && !_this8.props.hiddenFromAggregators.includes(e);\n          }),\n          open: _this8.isOpen('val' + i),\n          zIndex: _this8.isOpen('val' + i) ? _this8.state.maxZIndex + 1 : 1,\n          toggle: function toggle() {\n            return _this8.setState({\n              openDropdown: _this8.isOpen('val' + i) ? false : 'val' + i\n            });\n          },\n          setValue: function setValue(value) {\n            return _this8.sendPropUpdate({\n              vals: {\n                $splice: [[i, 1, value]]\n              }\n            });\n          }\n        }), i + 1 !== numValsAllowed ? _react2.default.createElement('br', {\n          key: 'br' + i\n        }) : null];\n      }));\n\n      var unusedAttrs = Object.keys(this.attrValues).filter(function (e) {\n        return !_this8.props.rows.includes(e) && !_this8.props.cols.includes(e) && !_this8.props.hiddenAttributes.includes(e) && !_this8.props.hiddenFromDragDrop.includes(e);\n      }).sort((0, _Utilities.sortAs)(this.state.unusedOrder));\n      var unusedLength = unusedAttrs.reduce(function (r, e) {\n        return r + e.length;\n      }, 0);\n      var horizUnused = unusedLength < this.props.unusedOrientationCutoff;\n      var unusedAttrsCell = this.makeDnDCell(unusedAttrs, function (order) {\n        return _this8.setState({\n          unusedOrder: order\n        });\n      }, 'pvtAxisContainer pvtUnused ' + (horizUnused ? 'pvtHorizList' : 'pvtVertList'));\n      var colAttrs = this.props.cols.filter(function (e) {\n        return !_this8.props.hiddenAttributes.includes(e) && !_this8.props.hiddenFromDragDrop.includes(e);\n      });\n      var colAttrsCell = this.makeDnDCell(colAttrs, this.propUpdater('cols'), 'pvtAxisContainer pvtHorizList pvtCols');\n      var rowAttrs = this.props.rows.filter(function (e) {\n        return !_this8.props.hiddenAttributes.includes(e) && !_this8.props.hiddenFromDragDrop.includes(e);\n      });\n      var rowAttrsCell = this.makeDnDCell(rowAttrs, this.propUpdater('rows'), 'pvtAxisContainer pvtVertList pvtRows');\n\n      var outputCell = _react2.default.createElement('td', {\n        className: 'pvtOutput'\n      }, _react2.default.createElement(_PivotTable2.default, (0, _immutabilityHelper2.default)(this.props, {\n        data: {\n          $set: this.materializedInput\n        }\n      })));\n\n      if (horizUnused) {\n        return _react2.default.createElement('table', {\n          className: 'pvtUi'\n        }, _react2.default.createElement('tbody', {\n          onClick: function onClick() {\n            return _this8.setState({\n              openDropdown: false\n            });\n          }\n        }, _react2.default.createElement('tr', null, rendererCell, unusedAttrsCell), _react2.default.createElement('tr', null, aggregatorCell, colAttrsCell), _react2.default.createElement('tr', null, rowAttrsCell, outputCell)));\n      }\n\n      return _react2.default.createElement('table', {\n        className: 'pvtUi'\n      }, _react2.default.createElement('tbody', {\n        onClick: function onClick() {\n          return _this8.setState({\n            openDropdown: false\n          });\n        }\n      }, _react2.default.createElement('tr', null, rendererCell, aggregatorCell, colAttrsCell), _react2.default.createElement('tr', null, unusedAttrsCell, rowAttrsCell, outputCell)));\n    }\n  }]);\n\n  return PivotTableUI;\n}(_react2.default.PureComponent);\n\nPivotTableUI.propTypes = Object.assign({}, _PivotTable2.default.propTypes, {\n  onChange: _propTypes2.default.func.isRequired,\n  hiddenAttributes: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  hiddenFromAggregators: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  hiddenFromDragDrop: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  unusedOrientationCutoff: _propTypes2.default.number,\n  menuLimit: _propTypes2.default.number\n});\nPivotTableUI.defaultProps = Object.assign({}, _PivotTable2.default.defaultProps, {\n  hiddenAttributes: [],\n  hiddenFromAggregators: [],\n  hiddenFromDragDrop: [],\n  unusedOrientationCutoff: 85,\n  menuLimit: 500\n});\nexports.default = PivotTableUI;","map":null,"metadata":{},"sourceType":"script"}