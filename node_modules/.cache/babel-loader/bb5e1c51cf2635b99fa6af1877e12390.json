{"ast":null,"code":"import _objectSpread from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/manikandan/Downloads/Archive/src/screens/ProductEdit/CreateVariant.js\";\nimport React, { useState } from 'react';\nimport { Grid, FormGroup, FormControlLabel, Checkbox, TextField, Button } from '@material-ui/core';\nimport { withRouter } from \"react-router-dom\";\nimport { ProductContext, ProductProvider } from '../../context';\nimport axios from 'axios';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { API_URL } from '../../config';\nimport { isString } from 'util';\nimport { makeStyles } from '@material-ui/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FilePond, registerPlugin } from 'react-filepond';\nimport 'filepond/dist/filepond.min.css';\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport FilePondPluginImageValidateSize from 'filepond-plugin-image-validate-size';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename'; // import { NetworkContext } from '../../context/NetworkContext';\n\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginImageValidateSize, FilePondPluginFileRename);\nconst useStyle = makeStyles(theme => ({\n  helperinput: {\n    '& .MuiFormHelperText-root': {\n      color: \"#e53935\"\n    }\n  },\n  variantFontSize: {\n    fontSize: '.9rem'\n  },\n  variantMarginTop: {\n    marginTop: \"20px\"\n  }\n}));\nexport function CreateVariant(props) {\n  // const { sendNetworkRequest } = React.useContext(NetworkContext);\n  const classes = useStyle();\n  let prod_id = localStorage.getItem('productEditId');\n  const TOKEN = 'token';\n\n  const _React$useContext = React.useContext(ProductContext),\n        productCtx = _React$useContext.productCtx,\n        setProductCtx = _React$useContext.setProductCtx;\n\n  const _useState = useState({\n    metal_color: [],\n    metal_purity: [],\n    diamond_color: [],\n    diamond_clarity: [],\n    product_images: {},\n    size: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        variant = _useState2[0],\n        setVariant = _useState2[1];\n\n  console.log(productCtx, 'createvariants');\n\n  function handleMetalColor(status_data) {\n    let color = variant.metal_color;\n    color.some(color_data => color_data.id === status_data.id) ? color = color.filter(color_fil => color_fil.id !== status_data.id) : color.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_color: color\n    }));\n  }\n\n  const sendNetworkRequest = async (url, params, data, auth = false) => {\n    url = API_URL + url;\n    console.info('URL', url, data);\n    const method = data ? 'POST' : 'GET',\n          headers = {\n      'Content-Type': 'application/json'\n    };\n    let resdata = null;\n\n    if (auth) {\n      const token = localStorage.getItem(TOKEN);\n      if (token) headers[\"auth\"] = token;else window.location = '/';\n    }\n\n    const response = await fetch(url, {\n      method,\n      body: isString(data) ? data : JSON.stringify(data),\n      headers\n    });\n\n    if (response.status < 400) {\n      resdata = await response.json();\n    } else {\n      alert(\"\".concat(response.status, \":\").concat(response.statusText, \" - Unable to complete your request to \\n\").concat(url));\n    }\n\n    return resdata;\n  };\n\n  function handleMetalPurity(status_data) {\n    status_data.metal_weight = \"\";\n    alert(JSON.stringify(status_data));\n    let purity = variant.metal_purity;\n    purity.some(purity_data => purity_data.id === status_data.id) ? purity = purity.filter(purity_fil => purity_fil.id !== status_data.id) : purity.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: purity\n    }));\n  }\n\n  function diamondColorChange(status_data) {\n    let diamondColor = variant.diamond_color;\n    diamondColor.some(diamond_color_data => diamond_color_data.id === status_data.id) ? diamondColor = diamondColor.filter(diamond_color_fil => diamond_color_fil.id !== status_data.id) : diamondColor.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: diamondColor\n    }));\n  }\n\n  function diamondClarityChange(status_data) {\n    let diamondClarity = variant.diamond_clarity;\n    diamondClarity.some(diamond_clarity_data => diamond_clarity_data.id === status_data.id) ? diamondClarity = diamondClarity.filter(diamond_clarity_fil => diamond_clarity_fil.id !== status_data.id) : diamondClarity.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: diamondClarity\n    }));\n  }\n\n  function sizeChange(status_data) {\n    let variantSize = variant.size;\n    variantSize.some(variant_size_data => variant_size_data === status_data) ? variantSize = variantSize.filter(variant_size_fil => variant_size_fil !== status_data) : variantSize.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      size: variantSize\n    }));\n  }\n\n  function setMetalWeightInput(e, metalPurityId) {\n    // alert(e.target.value)\n    let metalWeight = variant.metal_purity;\n    metalWeight = metalWeight && metalWeight.map((metal_weight, index) => {\n      if (metalPurityId === metal_weight.id) {\n        metal_weight.metal_weight = e.target.value;\n      }\n\n      return metal_weight;\n    });\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: metalWeight\n    }));\n  }\n\n  function saveCreateVariant() {\n    let createVariant = {\n      productMetalcoloursByProductId: variant.metal_color,\n      productPuritiesByProductId: variant.metal_purity,\n      productDiamondColor: variant.diamond_color,\n      productDiamondClarity: variant.diamond_clarity,\n      productSize: variant.size,\n      productImage: variant.product_images\n    };\n    let createVariants = productCtx.createVariantList;\n    createVariants.push(createVariant);\n    setProductCtx(_objectSpread({}, productCtx, {\n      createVariantList: createVariants\n    }));\n    setVariant(_objectSpread({}, variant, {\n      metal_color: [],\n      metal_purity: [],\n      diamond_color: [],\n      diamond_clarity: [],\n      product_images: {},\n      size: []\n    }));\n    props.changeVariant();\n  }\n\n  function backToProductAttribute() {\n    props.changeVariant();\n  }\n\n  async function uploadimagetoserver(bodaydata, imageposition, imagecolor, uploadtype) {\n    let prodimages = variant.product_images; // if(true)\n    // {\n\n    var prodid = prod_id;\n    let imagecolourobj = variant.product_images[imagecolor];\n    var imagecount = 1;\n\n    if (imagecolourobj) {\n      imagecount = imagecolourobj.length + 1;\n    }\n\n    let imagename = prodid + \"_\" + imagecount + imagecolor.charAt(0);\n    let responsedata = await sendNetworkRequest('/uploadimage', {}, {\n      image: bodaydata.fileExtension,\n      filename: imagename,\n      product_id: prodid\n    }, false);\n    var returnData = responsedata && responsedata.data && responsedata.data.returnData;\n    var signedRequest = returnData && returnData.signedRequest;\n    var url = returnData && returnData.url;\n    console.log(\"responseurl\" + url);\n    var filepathname = returnData && returnData.filepath;\n    var options = {\n      headers: {\n        'Content-Type': bodaydata.fileExtension,\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n\n    if (imagecolourobj) {\n      const imageobj = {\n        \"name\": prodid + \"_\" + (imagecolourobj.length + 1) + imagecolor.charAt(0),\n        \"position\": imageposition,\n        \"color\": imagecolor,\n        \"image_url\": filepathname,\n        \"url\": 'https://s3.ap-south-1.amazonaws.com/styloribaseimages/' + filepathname\n      };\n\n      if (uploadtype === 'edit') {\n        imagecolourobj[imageposition] = imageobj;\n      } else {\n        imagecolourobj.push(imageobj);\n      }\n\n      prodimages[imagecolor] = imagecolourobj;\n    } else {\n      const imageobj = {\n        \"name\": prodid + \"_1\" + imagecolor.charAt(0),\n        \"position\": imageposition,\n        \"color\": imagecolor,\n        \"image_url\": filepathname,\n        \"url\": 'https://s3.ap-south-1.amazonaws.com/styloribaseimages/' + filepathname\n      };\n      imagecolourobj = [];\n      imagecolourobj.push(imageobj);\n    }\n\n    prodimages[imagecolor] = imagecolourobj;\n    setVariant(_objectSpread({}, variant, {\n      product_images: prodimages\n    })); // setFiles([])\n    // }\n\n    await axios.put(signedRequest, bodaydata.file, options);\n  }\n\n  return React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    className: classes.variantFontSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, \"Metal Color\"), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.metalcolour.map((data, index) => productCtx.productMetalColor && productCtx.productMetalColor.some(prod_metal_color => prod_metal_color.productColor === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.metal_color && variant.metal_color.some(met_colr => met_colr.id == data.id) ? true : false,\n      onChange: () => handleMetalColor(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  })))))), React.createElement(Grid, {\n    container: true,\n    className: classes.variantMarginTop,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    className: classes.variantFontSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, \"Metal Purity\"), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.metalpurity.map((data, index) => productCtx.productMetalColor && productCtx.productMetalPurity.some(prod_metal_purity => prod_metal_purity.purity === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.metal_purity && variant.metal_purity.some(met_purity => met_purity.id == data.id) ? true : false,\n      onChange: () => handleMetalPurity(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }))), variant.metal_purity && variant.metal_purity.map(metal_purity => React.createElement(TextField, {\n    className: classes.helperinput,\n    style: {\n      width: \"124px\"\n    },\n    variant: \"outlined\",\n    margin: \"dense\",\n    fullWidth: true,\n    type: \"number\",\n    value: metal_purity.metal_weight,\n    id: \"metal_weight\",\n    error: productCtx && productCtx.error_message && productCtx.error_message.product_type,\n    name: \"metal_weight\",\n    label: \"Metal Weight\".concat(metal_purity.name),\n    onChange: e => setMetalWeightInput(e, metal_purity.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }))))), React.createElement(Grid, {\n    container: true,\n    className: classes.variantMarginTop,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    className: classes.variantFontSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }, \"Diamond Color\"), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.diamondcolors.map((data, index) => productCtx.productDiamondColor && productCtx.productDiamondColor.some(prod_diamon_color => prod_diamon_color.diamondColour === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.diamond_color && variant.diamond_color.some(diamond_color => diamond_color.id == data.id) ? true : false,\n      onChange: () => diamondColorChange(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320\n    },\n    __self: this\n  })))))), React.createElement(Grid, {\n    container: true,\n    className: classes.variantMarginTop,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    className: classes.variantFontSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335\n    },\n    __self: this\n  }, \"Diamond Clarity\"), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.diamondclarities.map((data, index) => productCtx.productDiamondClarity && productCtx.productDiamondClarity.some(prod_diamond_clarity => prod_diamond_clarity.diamondClarity === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.diamond_clarity && variant.diamond_clarity.some(prod_diamond_clarity => prod_diamond_clarity.id == data.id) ? true : false,\n      onChange: () => diamondClarityChange(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351\n    },\n    __self: this\n  })))))), React.createElement(Grid, {\n    container: true,\n    className: classes.variantMarginTop,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    className: classes.variantFontSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366\n    },\n    __self: this\n  }, \"Size\"), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370\n    },\n    __self: this\n  }, productCtx.productVariantSize && productCtx.productVariantSize.map((data, index) => productCtx.variant_size && productCtx.variant_size.some(variantSize => variantSize === data) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }),\n    label: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.size && variant.size.some(var_size => var_size == data) ? true : false,\n      onChange: () => sizeChange(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }),\n    label: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382\n    },\n    __self: this\n  }))))))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397\n    },\n    __self: this\n  }, variant.metal_color === undefined ? null : variant.metal_color.map((value, index) => React.createElement(Grid, {\n    xs: 12,\n    container: true,\n    spacing: 1,\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    xs: 12,\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    component: \"h6\",\n    variant: \"h6\",\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402\n    },\n    __self: this\n  }, value.name)), React.createElement(Grid, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406\n    },\n    __self: this\n  }, React.createElement(FilePond, {\n    allowImageValidateSize: true,\n    imageValidateSizeMinWidth: \"2400\",\n    imageValidateSizeMinHeight: \"2400\",\n    imageValidateSizeMeasure: file => new Promise((resolve, reject) => {}),\n    labelIdle: \"Upload Image\",\n    allowMultiple: true //files = {files}\n    ,\n    onupdatefiles: fileItem => {// Set currently active file objectsfiles to this.state\n    },\n    onaddfile: (error, fileItem) => {\n      uploadimagetoserver(fileItem, index, value.name, \"add\");\n    },\n    onremovefile: (error, fileItem) => {},\n    fileRenameFunction: file => new Promise(resolve => {\n      var prodid = prod_id;\n      let imagecolourobj = variant.product_images[value.name];\n      var imagecount = 1;\n\n      if (imagecolourobj) {\n        imagecount = imagecolourobj.length + 1;\n      }\n\n      let imagename = prodid + \"_\" + imagecount + value.name.charAt(0) + file.extension;\n      resolve(imagename);\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407\n    },\n    __self: this\n  }))))), React.createElement(Grid, {\n    container: true,\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-end\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    style: {\n      flexBasis: 2\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: e => saveCreateVariant(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449\n    },\n    __self: this\n  }, \"Save\")), React.createElement(Grid, {\n    item: true,\n    style: {\n      flexBasis: 2\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453\n    },\n    __self: this\n  }, React.createElement(Button, {\n    style: {\n      background: \"#b5b6b8\"\n    },\n    variant: \"contained\",\n    onClick: e => backToProductAttribute(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454\n    },\n    __self: this\n  }, \"Back\"))));\n}\nexport default CreateVariant;","map":{"version":3,"sources":["/home/manikandan/Downloads/Archive/src/screens/ProductEdit/CreateVariant.js"],"names":["React","useState","Grid","FormGroup","FormControlLabel","Checkbox","TextField","Button","withRouter","ProductContext","ProductProvider","axios","CardMedia","API_URL","isString","makeStyles","Typography","FilePond","registerPlugin","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","FilePondPluginImageValidateSize","FilePondPluginFileRename","useStyle","theme","helperinput","color","variantFontSize","fontSize","variantMarginTop","marginTop","CreateVariant","props","classes","prod_id","localStorage","getItem","TOKEN","useContext","productCtx","setProductCtx","metal_color","metal_purity","diamond_color","diamond_clarity","product_images","size","variant","setVariant","console","log","handleMetalColor","status_data","some","color_data","id","filter","color_fil","push","sendNetworkRequest","url","params","data","auth","info","method","headers","resdata","token","window","location","response","fetch","body","JSON","stringify","status","json","alert","statusText","handleMetalPurity","metal_weight","purity","purity_data","purity_fil","diamondColorChange","diamondColor","diamond_color_data","diamond_color_fil","diamondClarityChange","diamondClarity","diamond_clarity_data","diamond_clarity_fil","sizeChange","variantSize","variant_size_data","variant_size_fil","setMetalWeightInput","e","metalPurityId","metalWeight","map","index","target","value","saveCreateVariant","createVariant","productMetalcoloursByProductId","productPuritiesByProductId","productDiamondColor","productDiamondClarity","productSize","productImage","createVariants","createVariantList","changeVariant","backToProductAttribute","uploadimagetoserver","bodaydata","imageposition","imagecolor","uploadtype","prodimages","prodid","imagecolourobj","imagecount","length","imagename","charAt","responsedata","image","fileExtension","filename","product_id","returnData","signedRequest","filepathname","filepath","options","imageobj","put","file","masterData","metalcolour","productMetalColor","prod_metal_color","productColor","name","met_colr","metalpurity","productMetalPurity","prod_metal_purity","met_purity","width","error_message","product_type","diamondcolors","prod_diamon_color","diamondColour","diamondclarities","prod_diamond_clarity","productVariantSize","variant_size","var_size","undefined","Promise","resolve","reject","fileItem","error","extension","display","justifyContent","flexBasis","background"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Grid, FormGroup, FormControlLabel, Checkbox, TextField, Button } from '@material-ui/core';\nimport { withRouter } from \"react-router-dom\";\nimport { ProductContext, ProductProvider } from '../../context';\nimport axios from 'axios';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { API_URL } from '../../config';\nimport { isString } from 'util';\nimport { makeStyles } from '@material-ui/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FilePond, registerPlugin } from 'react-filepond';\nimport 'filepond/dist/filepond.min.css';\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport FilePondPluginImageValidateSize from 'filepond-plugin-image-validate-size';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename';\n// import { NetworkContext } from '../../context/NetworkContext';\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginImageValidateSize, FilePondPluginFileRename);\nconst useStyle = makeStyles(theme => ({\n    helperinput: {\n        '& .MuiFormHelperText-root': {\n            color: \"#e53935\",\n        }\n    },\n    variantFontSize: {\n        fontSize: '.9rem'\n    },\n    variantMarginTop:{\n        marginTop: \"20px\"\n    }\n    \n}))\nexport function CreateVariant(props) {\n    // const { sendNetworkRequest } = React.useContext(NetworkContext);\n    const classes = useStyle();\n    let prod_id = localStorage.getItem('productEditId');\n    const TOKEN = 'token'\n    const { productCtx, setProductCtx } = React.useContext(ProductContext);\n    const [variant, setVariant] = useState({\n        metal_color: [],\n        metal_purity: [],\n        diamond_color: [],\n        diamond_clarity: [],\n        product_images: {},\n        size: []\n\n    })\n    console.log(productCtx, 'createvariants')\n    function handleMetalColor(status_data) {\n        let color = variant.metal_color;\n        color.some(color_data => color_data.id === status_data.id) ? color = color.filter(color_fil => color_fil.id !== status_data.id) : color.push(status_data)\n        setVariant({\n            ...variant,\n            metal_color: color\n        })\n    }\n    const sendNetworkRequest = async (url, params, data, auth = false) => {\n        url = API_URL + url;\n        console.info('URL', url, data)\n        const method = data ? 'POST' : 'GET',\n            headers = {\n                'Content-Type': 'application/json'\n            };\n        let resdata = null;\n        if (auth) {\n            const token = localStorage.getItem(TOKEN)\n            if (token) headers[\"auth\"] = token\n            else window.location = '/'\n        }\n        const response = await fetch(url, {\n            method, body: isString(data) ? data : JSON.stringify(data), headers\n        })\n\n        if (response.status < 400) {\n            resdata = await response.json();\n        } else {\n            alert(`${response.status}:${response.statusText} - Unable to complete your request to \\n${url}`)\n        }\n        return resdata;\n    }\n    function handleMetalPurity(status_data) {\n        status_data.metal_weight = \"\"\n        alert(JSON.stringify(status_data));\n        let purity = variant.metal_purity;\n        purity.some(purity_data => purity_data.id === status_data.id) ? purity = purity.filter(purity_fil => purity_fil.id !== status_data.id) : purity.push(status_data)\n        setVariant({\n            ...variant,\n            metal_purity: purity\n        })\n    }\n    function diamondColorChange(status_data) {\n        let diamondColor = variant.diamond_color;\n        diamondColor.some(diamond_color_data => diamond_color_data.id === status_data.id) ? diamondColor = diamondColor.filter(diamond_color_fil => diamond_color_fil.id !== status_data.id) : diamondColor.push(status_data)\n        setVariant({\n            ...variant,\n            metal_purity: diamondColor\n        })\n    }\n    function diamondClarityChange(status_data) {\n        let diamondClarity = variant.diamond_clarity;\n        diamondClarity.some(diamond_clarity_data => diamond_clarity_data.id === status_data.id) ? diamondClarity = diamondClarity.filter(diamond_clarity_fil => diamond_clarity_fil.id !== status_data.id) : diamondClarity.push(status_data)\n        setVariant({\n            ...variant,\n            metal_purity: diamondClarity\n        })\n\n    }\n    function sizeChange(status_data) {\n        let variantSize = variant.size;\n        variantSize.some(variant_size_data => variant_size_data === status_data) ? variantSize = variantSize.filter(variant_size_fil => variant_size_fil !== status_data) : variantSize.push(status_data)\n        setVariant({\n            ...variant,\n            size: variantSize\n        })\n\n    }\n    function setMetalWeightInput(e, metalPurityId) {\n        // alert(e.target.value)\n        let metalWeight = variant.metal_purity;\n        metalWeight = metalWeight && metalWeight.map((metal_weight, index) => {\n            if (metalPurityId === metal_weight.id) {\n                metal_weight.metal_weight = e.target.value;\n            }\n            return metal_weight;\n        });\n        setVariant({\n            ...variant,\n            metal_purity: metalWeight\n        })\n    }\n    function saveCreateVariant(){\n        let createVariant={\n            productMetalcoloursByProductId:variant.metal_color,\n            productPuritiesByProductId:variant.metal_purity,\n            productDiamondColor:variant.diamond_color,\n            productDiamondClarity:variant.diamond_clarity,\n            productSize:variant.size,\n            productImage:variant.product_images\n        }\n        let createVariants = productCtx.createVariantList;\n        createVariants.push(createVariant);\n        setProductCtx({\n            ...productCtx,\n            createVariantList:createVariants\n        })\n        setVariant({\n            ...variant,\n            metal_color: [],\n            metal_purity: [],\n            diamond_color: [],\n            diamond_clarity: [],\n            product_images: {},\n            size: []\n        })\n        props.changeVariant();\n    }\n    function backToProductAttribute(){\n        props.changeVariant();\n    }\n    async function uploadimagetoserver(bodaydata, imageposition, imagecolor, uploadtype) {\n        let prodimages = variant.product_images;\n        // if(true)\n        // {\n        var prodid = prod_id;\n        let imagecolourobj = variant.product_images[imagecolor];\n        var imagecount = 1;\n        if (imagecolourobj) {\n            imagecount = imagecolourobj.length + 1;\n        }\n\n        let imagename = (prodid + \"_\" + (imagecount) + imagecolor.charAt(0));\n        let responsedata = await sendNetworkRequest('/uploadimage', {}, { image: bodaydata.fileExtension, filename: imagename, product_id: prodid }, false)\n        var returnData = responsedata && responsedata.data && responsedata.data.returnData;\n        var signedRequest = returnData && returnData.signedRequest;\n        var url = returnData && returnData.url;\n        console.log(\"responseurl\" + url);\n        var filepathname = returnData && returnData.filepath;\n        var options = {\n            headers: {\n                'Content-Type': bodaydata.fileExtension,\n                'Access-Control-Allow-Origin': '*'\n            }\n        };\n\n        if (imagecolourobj) {\n            const imageobj = {\n                \"name\": (prodid + \"_\" + (imagecolourobj.length + 1) + imagecolor.charAt(0)),\n                \"position\": imageposition,\n                \"color\": imagecolor,\n                \"image_url\": filepathname,\n                \"url\": 'https://s3.ap-south-1.amazonaws.com/styloribaseimages/' + filepathname\n            }\n            if (uploadtype === 'edit') {\n                imagecolourobj[imageposition] = imageobj;\n\n            } else {\n                imagecolourobj.push(imageobj)\n\n            }\n            prodimages[imagecolor] = imagecolourobj;\n\n        } else {\n            const imageobj = {\n                \"name\": (prodid + \"_1\" + imagecolor.charAt(0)),\n                \"position\": imageposition,\n                \"color\": imagecolor,\n                \"image_url\": filepathname,\n                \"url\": 'https://s3.ap-south-1.amazonaws.com/styloribaseimages/' + filepathname\n            }\n            imagecolourobj = [];\n            imagecolourobj.push(imageobj)\n        }\n        prodimages[imagecolor] = imagecolourobj;\n        setVariant({ ...variant, product_images: prodimages })\n        // setFiles([])\n        // }\n\n        await axios.put(signedRequest, bodaydata.file, options)\n    }\n    return (\n        <Grid container>\n            <Grid item>\n                <Grid container >\n                    <Grid item>\n                        <Grid item className={classes.variantFontSize} >Metal Color</Grid>\n                        <Grid item >\n                            <FormGroup row>\n                                {\n                                    productCtx.masterData && productCtx.masterData.metalcolour.map((data, index) => (\n\n                                        productCtx.productMetalColor && productCtx.productMetalColor.some((prod_metal_color) => prod_metal_color.productColor === data.name) ?\n                                            <FormControlLabel\n                                                disabled\n                                                control={\n                                                    <Checkbox checked={true} value=\"checkedA\" />\n                                                }\n                                                label={data.name}\n                                            /> :\n                                            <FormControlLabel\n                                                control={\n                                                    <Checkbox checked={variant.metal_color && variant.metal_color.some(met_colr => met_colr.id == data.id) ? true : false} onChange={() => handleMetalColor(data)} value=\"checkedA\" />\n                                                }\n                                                label={data.name}\n                                            />\n\n                                    ))\n                                }\n                            </FormGroup>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container className={classes.variantMarginTop}>\n                    <Grid item>\n                        <Grid item className={classes.variantFontSize} >\n                            Metal Purity\n                        </Grid>\n                        <Grid item>\n                            <FormGroup row>\n                                {\n                                    productCtx.masterData && productCtx.masterData.metalpurity.map((data, index) => (\n\n                                        productCtx.productMetalColor && productCtx.productMetalPurity.some((prod_metal_purity) => prod_metal_purity.purity === data.name) ?\n                                            <FormControlLabel\n                                                disabled\n                                                control={\n                                                    <Checkbox checked={true} value=\"checkedA\" />\n                                                }\n                                                label={data.name}\n                                            /> :\n                                            <FormControlLabel\n                                                control={\n                                                    <Checkbox checked={variant.metal_purity && variant.metal_purity.some(met_purity => met_purity.id == data.id) ? true : false} onChange={() => handleMetalPurity(data)} value=\"checkedA\" />\n                                                }\n                                                label={data.name}\n                                            />\n\n                                    ))\n                                }\n                            </FormGroup>\n                            {\n                                variant.metal_purity && variant.metal_purity.map(metal_purity => (\n                                    <TextField\n                                        className={classes.helperinput}\n                                        style={{ width: \"124px\" }}\n                                        variant=\"outlined\"\n                                        margin=\"dense\"\n                                        fullWidth\n                                        type=\"number\"\n                                        value={metal_purity.metal_weight}\n                                        id=\"metal_weight\"\n                                        error={productCtx && productCtx.error_message && productCtx.error_message.product_type}\n                                        name=\"metal_weight\"\n                                        label={`Metal Weight${metal_purity.name}`}\n                                        onChange={(e) => setMetalWeightInput(e, metal_purity.id)}\n                                    />\n                                ))\n                            }\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container className={classes.variantMarginTop}>\n                    <Grid item>\n                        <Grid item className={classes.variantFontSize} >\n                            Diamond Color\n                        </Grid>\n                        <Grid item>\n                            <FormGroup row>\n                                {\n                                    productCtx.masterData && productCtx.masterData.diamondcolors.map((data, index) => (\n\n                                        productCtx.productDiamondColor && productCtx.productDiamondColor.some((prod_diamon_color) => prod_diamon_color.diamondColour === data.name) ?\n                                            <FormControlLabel\n                                                disabled\n                                                control={\n                                                    <Checkbox checked={true} value=\"checkedA\" />\n                                                }\n                                                label={data.name}\n                                            /> :\n                                            <FormControlLabel\n                                                control={\n                                                    <Checkbox checked={variant.diamond_color && variant.diamond_color.some(diamond_color => diamond_color.id == data.id) ? true : false} onChange={() => diamondColorChange(data)} value=\"checkedA\" />\n                                                }\n                                                label={data.name}\n                                            />\n\n                                    ))\n                                }\n                            </FormGroup>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container className={classes.variantMarginTop}>\n                    <Grid item>\n                        <Grid item className={classes.variantFontSize} >\n                            Diamond Clarity\n                        </Grid>\n                        <Grid item>\n                            <FormGroup row>\n                                {\n                                    productCtx.masterData && productCtx.masterData.diamondclarities.map((data, index) => (\n\n                                        productCtx.productDiamondClarity && productCtx.productDiamondClarity.some((prod_diamond_clarity) => prod_diamond_clarity.diamondClarity === data.name) ?\n                                            <FormControlLabel\n                                                disabled\n                                                control={\n                                                    <Checkbox checked={true} value=\"checkedA\" />\n                                                }\n                                                label={data.name}\n                                            /> :\n                                            <FormControlLabel\n                                                control={\n                                                    <Checkbox checked={variant.diamond_clarity && variant.diamond_clarity.some(prod_diamond_clarity => prod_diamond_clarity.id == data.id) ? true : false} onChange={() => diamondClarityChange(data)} value=\"checkedA\" />\n                                                }\n                                                label={data.name}\n                                            />\n\n                                    ))\n                                }\n                            </FormGroup>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container className={classes.variantMarginTop}>\n                    <Grid item>\n                        <Grid item className={classes.variantFontSize} >\n                            Size\n                        </Grid>\n                        <Grid item>\n                            <FormGroup row>\n                                {\n                                    productCtx.productVariantSize && productCtx.productVariantSize.map((data, index) => (\n\n                                        productCtx.variant_size && productCtx.variant_size.some((variantSize) => variantSize === data) ?\n                                            <FormControlLabel\n                                                disabled\n                                                control={\n                                                    <Checkbox checked={true} value=\"checkedA\" />\n                                                }\n                                                label={data}\n                                            /> :\n                                            <FormControlLabel\n                                                control={\n                                                    <Checkbox checked={variant.size && variant.size.some(var_size => var_size == data) ? true : false} onChange={() => sizeChange(data)} value=\"checkedA\" />\n                                                }\n                                                label={data}\n                                            />\n\n                                    ))\n                                }\n                            </FormGroup>\n                        </Grid>\n                    </Grid>\n\n                </Grid>\n            </Grid>\n            <Grid container>\n                {variant.metal_color === undefined ? null : variant.metal_color.map((value, index) => (\n                    <Grid xs={12} container spacing={1} item>\n                        <Grid xs={12} item>\n\n                            <Typography component=\"h6\" variant=\"h6\" align=\"left\">\n                                {value.name}\n                            </Typography>\n                        </Grid>\n                        <Grid xs={12} sm={12} md={12} item>\n                            <FilePond\n                                allowImageValidateSize\n                                imageValidateSizeMinWidth=\"2400\"\n                                imageValidateSizeMinHeight=\"2400\"\n                                imageValidateSizeMeasure={(file) => new Promise((resolve, reject) => {\n\n                                })}\n                                labelIdle=\"Upload Image\"\n                                allowMultiple={true}\n                                //files = {files}\n                                onupdatefiles={fileItem => {\n                                    // Set currently active file objectsfiles to this.state\n\n                                }}\n                                onaddfile={(error, fileItem) => {\n                                    uploadimagetoserver(fileItem, index, value.name, \"add\")\n                                }}\n                                onremovefile={(error, fileItem) => {\n\n                                }}\n                                fileRenameFunction={\n                                    (file) => new Promise(resolve => {\n                                        var prodid = prod_id;\n                                        let imagecolourobj = variant.product_images[value.name];\n                                        var imagecount = 1;\n                                        if (imagecolourobj) {\n                                            imagecount = imagecolourobj.length + 1;\n                                        }\n                                        let imagename = (prodid + \"_\" + (imagecount) + value.name.charAt(0)) + file.extension;\n                                        resolve(imagename)\n\n                                    })\n                                }\n                            >\n                            </FilePond>\n                        </Grid>\n\n                    </Grid>\n                ))}\n            </Grid>\n            <Grid container style={{display:\"flex\",justifyContent:\"flex-end\"}}>\n                    <Grid item style={{flexBasis:2}} >\n                <Button color=\"primary\" variant=\"contained\" onClick={(e) => saveCreateVariant()}>\n                Save\n                </Button>\n                </Grid>\n                <Grid item style={{flexBasis:2}} >\n                <Button  style={{background: \"#b5b6b8\"}} variant=\"contained\" onClick={(e) => backToProductAttribute()}>\n                Back\n                </Button>\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n}\nexport default CreateVariant;"]},"metadata":{},"sourceType":"module"}