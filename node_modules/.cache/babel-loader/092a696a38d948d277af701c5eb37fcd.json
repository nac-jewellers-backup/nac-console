{"ast":null,"code":"import _objectSpread from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/manikandan/Downloads/Archive/src/screens/Productupload/Step6.js\";\nimport React from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport CardMedia from '@material-ui/core/CardMedia'; // Import React FilePond\n\nimport { FilePond, registerPlugin } from 'react-filepond';\nimport TextField from '@material-ui/core/TextField'; // Import FilePond styles\n\nimport 'filepond/dist/filepond.min.css';\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport FilePondPluginImageValidateSize from 'filepond-plugin-image-validate-size';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename'; // Register the plugins\n\nimport { ProductContext } from '../../context';\nimport { NetworkContext } from '../../context/NetworkContext';\nimport { file } from '@babel/types';\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginImageValidateSize, FilePondPluginFileRename);\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    height: 140\n  },\n  img: {\n    height: '100%',\n    width: '100%',\n    objectFit: 'contain'\n  },\n  control: {\n    padding: theme.spacing(2)\n  },\n  input: {\n    display: 'none'\n  }\n}));\nexport default function Review() {\n  let count = 0;\n  const classes = useStyles();\n\n  const _React$useContext = React.useContext(ProductContext),\n        productCtx = _React$useContext.productCtx,\n        setProductCtx = _React$useContext.setProductCtx;\n\n  const _React$useContext2 = React.useContext(NetworkContext),\n        sendNetworkRequest = _React$useContext2.sendNetworkRequest;\n\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        metalcolour = _React$useState2[0],\n        setMetalcolour = _React$useState2[1];\n\n  const _React$useState3 = React.useState([]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        files = _React$useState4[0],\n        setFiles = _React$useState4[1];\n\n  const _React$useState5 = React.useState({}),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        images = _React$useState6[0],\n        setImages = _React$useState6[1];\n\n  React.useEffect(() => {\n    let metalcolour = [];\n    let product_images = [];\n    productCtx.metalcolour.forEach(element => {\n      if (element.name === productCtx.default_metal_colour.name) {\n        product_images[element.name] = [];\n\n        if (metalcolour.length > 0) {\n          metalcolour.unshift(element);\n        } else {\n          metalcolour.push(element);\n        }\n      } else {\n        metalcolour.push(element);\n        product_images[element.name] = [];\n      }\n    });\n    setMetalcolour(metalcolour);\n  }, []);\n\n  async function uploadimagetoserver(bodaydata, imageposition, imagecolor, uploadtype) {\n    //alert(JSON.stringify(bodaydata))\n    let prodimages = productCtx.product_images;\n\n    if (prodimages) {\n      var prodid = \"S\" + productCtx.product_type.shortCode + (productCtx.masterData.productseries[0].value + 1);\n      let imagecolourobj = productCtx.product_images[imagecolor];\n      var imagecount = 1;\n\n      if (imagecolourobj) {\n        imagecount = imagecolourobj.length + 1;\n      }\n\n      let imagename = prodid + \"_\" + imagecount + imagecolor.charAt(0);\n      let responsedata = await sendNetworkRequest('/uploadimage', {}, {\n        image: bodaydata.fileExtension,\n        filename: imagename,\n        product_id: prodid\n      }, false);\n      var returnData = responsedata.data.returnData;\n      var signedRequest = returnData.signedRequest;\n      var url = returnData.url;\n      console.log(\"responseurl\" + url);\n      var filepathname = returnData.filepath;\n      var options = {\n        headers: {\n          'Content-Type': bodaydata.fileExtension,\n          'Access-Control-Allow-Origin': '*'\n        }\n      };\n\n      if (imagecolourobj) {\n        const imageobj = {\n          \"name\": prodid + \"_\" + (imagecolourobj.length + 1) + imagecolor.charAt(0),\n          \"position\": imageposition,\n          \"color\": imagecolor,\n          \"image_url\": filepathname,\n          \"url\": 'https://s3.ap-south-1.amazonaws.com/styloribaseimages/' + filepathname\n        };\n\n        if (uploadtype === 'edit') {\n          imagecolourobj[imageposition] = imageobj;\n        } else {\n          imagecolourobj.push(imageobj);\n        }\n\n        prodimages[imagecolor] = imagecolourobj;\n      } else {\n        const imageobj = {\n          \"name\": prodid + \"_1\" + imagecolor.charAt(0),\n          \"position\": imageposition,\n          \"color\": imagecolor,\n          \"image_url\": filepathname,\n          \"url\": 'https://s3.ap-south-1.amazonaws.com/styloribaseimages/' + filepathname\n        };\n        imagecolourobj = [];\n        imagecolourobj.push(imageobj);\n      }\n\n      prodimages[imagecolor] = imagecolourobj;\n      setProductCtx(_objectSpread({}, productCtx, {\n        product_images: prodimages\n      })); // setFiles([])\n    }\n\n    await axios.put(signedRequest, bodaydata.file, options);\n  }\n\n  function removefiles(imageposition, imagecolor) {\n    let prodimages = productCtx.product_images;\n\n    if (prodimages) {\n      let imagecolourobj = prodimages[imagecolor];\n\n      if (imagecolourobj) {\n        if (imagecolourobj.length > imageposition) {\n          let removedfile = imagecolourobj[imageposition];\n          imagecolourobj[imageposition] = _objectSpread({}, removedfile, {\n            url: \"\"\n          });\n        }\n      }\n\n      prodimages[imagecolor] = imagecolourobj;\n      setProductCtx(_objectSpread({}, productCtx, {\n        product_images: prodimages\n      })); //alert(JSON.stringify(productCtx.product_images))\n    }\n  }\n\n  const handleInit = () => {// alert(\"initialized\")\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    className: classes.root,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    direction: \"row\",\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    justify: \"left\",\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, metalcolour === undefined ? null : metalcolour.map((value, index) => React.createElement(Grid, {\n    xs: 12,\n    container: true,\n    spacing: 1,\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    xs: 12,\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    component: \"h6\",\n    variant: \"h6\",\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, value.name)), React.createElement(Grid, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, React.createElement(FilePond, {\n    allowImageValidateSize: true,\n    imageValidateSizeMinWidth: \"2400\",\n    imageValidateSizeMinHeight: \"2400\",\n    imageValidateSizeMeasure: file => new Promise((resolve, reject) => {\n      console.log(file);\n      console.log('filepond property');\n      debugger;\n    }),\n    labelIdle: \"Upload Image\",\n    allowMultiple: true //files = {files}\n    ,\n    onupdatefiles: fileItem => {// Set currently active file objectsfiles to this.state\n    },\n    onaddfile: (error, fileItem) => {\n      uploadimagetoserver(fileItem, index, value.name, \"add\");\n    },\n    onremovefile: (error, fileItem) => {},\n    fileRenameFunction: file => new Promise(resolve => {\n      var prodid = \"S\" + productCtx.product_type.shortCode + (productCtx.masterData.productseries[0].value + 1);\n      let imagecolourobj = productCtx.product_images[value.name];\n      var imagecount = 1;\n\n      if (imagecolourobj) {\n        imagecount = imagecolourobj.length + 1;\n      }\n\n      let imagename = prodid + \"_\" + imagecount + value.name.charAt(0) + file.extension;\n      resolve(imagename);\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }))))))));\n}","map":{"version":3,"sources":["/home/manikandan/Downloads/Archive/src/screens/Productupload/Step6.js"],"names":["React","makeStyles","useTheme","Grid","Paper","Typography","Button","axios","CardMedia","FilePond","registerPlugin","TextField","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","FilePondPluginImageValidateSize","FilePondPluginFileRename","ProductContext","NetworkContext","file","useStyles","theme","root","flexGrow","paper","height","img","width","objectFit","control","padding","spacing","input","display","Review","count","classes","useContext","productCtx","setProductCtx","sendNetworkRequest","useState","metalcolour","setMetalcolour","files","setFiles","images","setImages","useEffect","product_images","forEach","element","name","default_metal_colour","length","unshift","push","uploadimagetoserver","bodaydata","imageposition","imagecolor","uploadtype","prodimages","prodid","product_type","shortCode","masterData","productseries","value","imagecolourobj","imagecount","imagename","charAt","responsedata","image","fileExtension","filename","product_id","returnData","data","signedRequest","url","console","log","filepathname","filepath","options","headers","imageobj","put","removefiles","removedfile","handleInit","undefined","map","index","Promise","resolve","reject","fileItem","error","extension"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles,useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport CardMedia from '@material-ui/core/CardMedia';\n\n // Import React FilePond\n import { FilePond, registerPlugin } from 'react-filepond';\n import TextField from '@material-ui/core/TextField';\n\n // Import FilePond styles\n import 'filepond/dist/filepond.min.css';\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport FilePondPluginImageValidateSize from 'filepond-plugin-image-validate-size';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename';\n\n// Register the plugins\n \nimport { ProductContext } from '../../context';\nimport { NetworkContext } from '../../context/NetworkContext';\nimport { file } from '@babel/types';\n\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview,FilePondPluginImageValidateSize,FilePondPluginFileRename);\n\n\n  const useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n      },\n      paper: {\n        height: 140,\n      },\n      img: {\n        height: '100%',\n        width:'100%',\n        objectFit:'contain'\n      },\n      control: {\n        padding: theme.spacing(2),\n      },\n      input: {\n        display: 'none',\n      },\n  }));\n  \n  \n  \n  \nexport default function Review() {\n  let count= 0;\n  const classes = useStyles();\n  const { productCtx, setProductCtx } = React.useContext(ProductContext);\n  const { sendNetworkRequest } = React.useContext(NetworkContext);\n  const [metalcolour, setMetalcolour] = React.useState([]);\n  const [files, setFiles] = React.useState([]);\n  const [images,setImages] = React.useState({});\n  React.useEffect(() => {\n    let metalcolour = []\n    let product_images = [];\n    productCtx.metalcolour.forEach(element => {\n      if(element.name === productCtx.default_metal_colour.name)\n      {\n        product_images[element.name] = [] \n        if(metalcolour.length > 0)\n        {\n          metalcolour.unshift(element);\n        }else{\n          metalcolour.push(element)\n        }\n\n      }else{\n        metalcolour.push(element)\n        product_images[element.name] = []\n      }\n\n    })\n    setMetalcolour(metalcolour)\n}, []);\n  async function uploadimagetoserver(bodaydata, imageposition, imagecolor, uploadtype)\n  {\n      \n//alert(JSON.stringify(bodaydata))\n\n  let prodimages = productCtx.product_images;\n  if(prodimages)\n  {\n    var prodid = \"S\"+productCtx.product_type.shortCode+(productCtx.masterData.productseries[0].value+1)\n    let imagecolourobj = productCtx.product_images[imagecolor];\n    var imagecount  = 1;\n    if(imagecolourobj)\n    {\n      imagecount = imagecolourobj.length + 1;\n    }\n\n    let imagename = (prodid+\"_\"+(imagecount)+imagecolor.charAt(0));\n    let responsedata = await sendNetworkRequest('/uploadimage', {}, {image:bodaydata.fileExtension, filename :imagename, product_id: prodid },false)\n    var returnData = responsedata.data.returnData;\n    var signedRequest = returnData.signedRequest;\n    var url = returnData.url;\n    console.log(\"responseurl\"+url);\n    var filepathname = returnData.filepath\n    var options = {\n        headers: {\n            'Content-Type': bodaydata.fileExtension,\n            'Access-Control-Allow-Origin':'*'\n        }\n    };\n    \n    if(imagecolourobj)\n    {\n      const imageobj = {\n        \"name\": (prodid+\"_\"+(imagecolourobj.length+1)+imagecolor.charAt(0)),\n        \"position\":imageposition,\n        \"color\":imagecolor,\n        \"image_url\":filepathname,\n        \"url\":'https://s3.ap-south-1.amazonaws.com/styloribaseimages/'+filepathname\n      }\n      if(uploadtype === 'edit')\n      {\n        imagecolourobj[imageposition] = imageobj;\n\n      }else\n      {\n        imagecolourobj.push(imageobj)\n\n      }\n      prodimages[imagecolor] = imagecolourobj;\n\n    }else\n    {\n      const imageobj = {\n        \"name\": (prodid+\"_1\"+imagecolor.charAt(0)),\n        \"position\":imageposition,\n        \"color\":imagecolor,\n        \"image_url\":filepathname,\n        \"url\":'https://s3.ap-south-1.amazonaws.com/styloribaseimages/'+filepathname\n      }\n      imagecolourobj = [];\n      imagecolourobj.push(imageobj)\n    }\n    prodimages[imagecolor] = imagecolourobj;\n    setProductCtx({ ...productCtx, product_images: prodimages })\n    // setFiles([])\n  }\n  await axios.put(signedRequest, bodaydata.file, options)\n\n  \n\n  }\n\n  function removefiles(imageposition, imagecolor)\n  {\n  \n\n    let prodimages = productCtx.product_images;\n\n  if(prodimages)\n  {\n    let imagecolourobj = prodimages[imagecolor];\n\n    if(imagecolourobj)\n    {\n      if(imagecolourobj.length > imageposition)\n      {\n        let removedfile = imagecolourobj[imageposition]\n\n      imagecolourobj[imageposition] = {...removedfile, url: \"\"}\n\n      }\n\n    }\n    prodimages[imagecolor] = imagecolourobj;\n    setProductCtx({ ...productCtx, product_images: prodimages })\n//alert(JSON.stringify(productCtx.product_images))\n  }\n  }\n  \n const handleInit = () =>\n    {\n     // alert(\"initialized\")\n    }\n  return (\n    <React.Fragment>\n         <Grid container className={classes.root} spacing={2}>\n\n     <Grid item direction=\"row\" xs={12}>\n       <Grid container  justify=\"left\" spacing={2}>\n\n          {metalcolour === undefined ? null : metalcolour.map((value,index) => ( \n            <Grid xs={12} container spacing={1} item>\n            <Grid  xs={12}  item>\n\n             <Typography component=\"h6\" variant=\"h6\" align=\"left\">\n            {value.name}\n             </Typography> \n             </Grid>\n             {/* {productCtx.product_images[value.name] === undefined ? null : productCtx.product_images[value.name].map((row,imageindex) => (\n\n            <Grid  xs={3} alignItems=\"center\" item>\n                 <Typography component=\"h6\" variant=\"h6\" align=\"left\">\n            {row.url}\n             </Typography> \n           {row.url.length === 0 ? <FilePond \n                          labelIdle=\"Image For\"\n                          allowMultiple={true}\n                          maxFiles={3}  \n                          files = {files}\n                          onupdatefiles={fileItem => {\n                              // Set currently active file objects to this.state\n                            \n                          }}\n                          onaddfile={(error, fileItem)=> {\n                            uploadimagetoserver(fileItem, imageindex, value.name, \"edit\")\n                          }}\n                          onremovefile={(error, fileItem)=>{\n\n                          }}>\n                </FilePond> :  <FilePond \n                          labelIdle=\"Image For\"\n                          files={[{\n                            source: row.url,\n                            options: {\n                                type: 'local'\n                            }\n                        }]}\n                          server={{\n                            load: (source, load) => {\n                                // simulates loading a file from the server\n                                fetch(source).then(res => \n                                  \n                                  res.blob()).then(load);\n                            }\n                        }} \n                          onupdatefiles={fileItems => {\n                              // Set currently active file objects to this.state\n                            \n                          }}\n                          onaddfile={(error, fileItems)=> {\n                            \n                          }}\n                          onremovefile={(error, fileItem)=>{\n                            removefiles(imageindex, value.name)\n                          }}>\n                </FilePond>\n               \n                \n                         } </Grid>\n             ))} */}\n            <Grid xs={12} sm={12} md={12} item>\n              <FilePond  \n                          allowImageValidateSize\n                          imageValidateSizeMinWidth=\"2400\"\n                          imageValidateSizeMinHeight=\"2400\"\n                          imageValidateSizeMeasure={(file)=>new Promise((resolve,reject)=>{\n                            console.log(file);\n                            console.log('filepond property');\n                            debugger;\n                          })}\n                          labelIdle=\"Upload Image\" \n                          allowMultiple={true}  \n                          //files = {files}\n                          onupdatefiles={fileItem => {\n                              // Set currently active file objectsfiles to this.state\n                            \n                          }}\n                          onaddfile={(error, fileItem)=> {\n                            uploadimagetoserver(fileItem, index, value.name, \"add\")\n                          }}\n                          onremovefile={(error, fileItem)=>{\n\n                          }}\n                          fileRenameFunction={\n                            (file) => new Promise(resolve => {\n                              var prodid = \"S\"+productCtx.product_type.shortCode+(productCtx.masterData.productseries[0].value+1)\n                              let imagecolourobj = productCtx.product_images[value.name];\n                              var imagecount  = 1;\n                              if(imagecolourobj)\n                              {\n                                imagecount = imagecolourobj.length + 1;\n                              }\n                              let imagename = (prodid+\"_\"+(imagecount)+value.name.charAt(0))+file.extension;\n                              resolve(imagename)\n                              \n                          })\n                           } \n                          >\n                </FilePond>\n                {/* <Grid container xs={12} alignItems=\"center\" spacing={1} item>\n                <Grid  xs={8} item>\n\n                <TextField\n                      variant=\"outlined\"\n                      margin=\"dense\"\n                      fullWidth\n                      value={\"S\"+productCtx.product_type_shortcode+(productCtx.masterData.productseries[0].value+1)+\"_1\"+ value.name.charAt(0)}\n                      id=\"imagename\"\n                      name=\"imagename\"\n                      label=\"imagename\"\n                      />  \n                                        </Grid>          \n\n                <Grid  xs={4}  item>\n\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"small\"\n                    className={classes.button}\n                  >Upload</Button> \n                                    </Grid>          \n  \n                  </Grid>           */}\n            </Grid>\n            \n            </Grid>\n           ))} \n       </Grid>\n     </Grid>\n\n    </Grid>\n \n </React.Fragment>\n  );\n}"]},"metadata":{},"sourceType":"module"}