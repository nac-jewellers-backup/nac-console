{"ast":null,"code":"import _slicedToArray from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/manikandan/Downloads/Archive/src/context/NetworkContext.js\";\nimport React from 'react';\nimport { productCategory } from '../services/mapper';\nimport { API_URL } from '../config';\nimport { isString } from 'util';\nconst TOKEN = 'token';\nconst initialNetworkCtx = {\n  networkCtx: {\n    mapper: productCategory,\n    status: {\n      called: false,\n      data: [],\n      loading: true,\n      error: false,\n      parsedData: []\n    },\n    notRequested: true\n  },\n  setNetworkCtx: () => null,\n  sendNetworkRequest: () => null\n};\n\nconst sendNetworkRequest = async (url, params, data, auth = true) => {// url = API_URL+url;\n  // console.info('URL', url, data)\n  // const method = data ? 'POST' : 'GET', \n  //     headers = {\n  //         'Content-Type': 'application/json'\n  //     };\n  // let resdata = null;\n  // if(auth){\n  //     const token = localStorage.getItem(TOKEN)\n  //     if(token) headers[\"auth\"] = token\n  //     else window.location = '/'\n  // }\n  // const response = await fetch(url, {\n  //     method, body: isString(data) ? data : JSON.stringify(data), headers\n  // })\n  // if(response.status < 400){\n  //     resdata = await response.json();\n  // } else {\n  //     alert(`${response.status}:${response.statusText} - Unable to complete your request to \\n${url}`)\n  // }\n  // return resdata;\n};\n\nexport const NetworkContext = React.createContext(initialNetworkCtx);\nexport const NetworkConsumer = NetworkContext.Consumer;\nexport const NetworkProvider = props => {\n  const _React$useState = React.useState(initialNetworkCtx.networkCtx),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        networkCtx = _React$useState2[0],\n        setNetworkCtx = _React$useState2[1];\n\n  return React.createElement(NetworkContext.Provider, {\n    value: {\n      networkCtx,\n      setNetworkCtx,\n      sendNetworkRequest\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["/home/manikandan/Downloads/Archive/src/context/NetworkContext.js"],"names":["React","productCategory","API_URL","isString","TOKEN","initialNetworkCtx","networkCtx","mapper","status","called","data","loading","error","parsedData","notRequested","setNetworkCtx","sendNetworkRequest","url","params","auth","NetworkContext","createContext","NetworkConsumer","Consumer","NetworkProvider","props","useState","children"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,QAAT,QAAyB,MAAzB;AAEA,MAAMC,KAAK,GAAG,OAAd;AAEA,MAAMC,iBAAiB,GAAG;AACtBC,EAAAA,UAAU,EAAE;AACRC,IAAAA,MAAM,EAAEN,eADA;AAERO,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,IAAI,EAAE,EAAvB;AAA2BC,MAAAA,OAAO,EAAE,IAApC;AAA0CC,MAAAA,KAAK,EAAE,KAAjD;AAAwDC,MAAAA,UAAU,EAAE;AAApE,KAFA;AAGRC,IAAAA,YAAY,EAAE;AAHN,GADU;AAMtBC,EAAAA,aAAa,EAAE,MAAM,IANC;AAOtBC,EAAAA,kBAAkB,EAAE,MAAM;AAPJ,CAA1B;;AAUA,MAAMA,kBAAkB,GAAG,OAAOC,GAAP,EAAYC,MAAZ,EAAoBR,IAApB,EAA0BS,IAAI,GAAG,IAAjC,KAA0C,CACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACH,CAvBD;;AAyBA,OAAO,MAAMC,cAAc,GAAGpB,KAAK,CAACqB,aAAN,CAAoBhB,iBAApB,CAAvB;AAEP,OAAO,MAAMiB,eAAe,GAAGF,cAAc,CAACG,QAAvC;AAEP,OAAO,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA,0BAEAzB,KAAK,CAAC0B,QAAN,CAAerB,iBAAiB,CAACC,UAAjC,CAFA;AAAA;AAAA,QAE9BA,UAF8B;AAAA,QAElBS,aAFkB;;AAItC,SACI,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAET,MAAAA,UAAF;AAAcS,MAAAA,aAAd;AAA6BC,MAAAA;AAA7B,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKS,KAAK,CAACE,QADX,CADJ;AAKH,CATM","sourcesContent":["import React from 'react';\nimport { productCategory } from '../services/mapper';\nimport { API_URL } from '../config';\nimport { isString } from 'util';\n\nconst TOKEN = 'token'\n\nconst initialNetworkCtx = {\n    networkCtx: {\n        mapper: productCategory,\n        status: { called: false, data: [], loading: true, error: false, parsedData: [] },\n        notRequested: true\n    },\n    setNetworkCtx: () => null,\n    sendNetworkRequest: () => null\n}\n\nconst sendNetworkRequest = async (url, params, data, auth = true) => {\n    // url = API_URL+url;\n    // console.info('URL', url, data)\n    // const method = data ? 'POST' : 'GET', \n    //     headers = {\n    //         'Content-Type': 'application/json'\n    //     };\n    // let resdata = null;\n    // if(auth){\n    //     const token = localStorage.getItem(TOKEN)\n    //     if(token) headers[\"auth\"] = token\n    //     else window.location = '/'\n    // }\n    // const response = await fetch(url, {\n    //     method, body: isString(data) ? data : JSON.stringify(data), headers\n    // })\n\n    // if(response.status < 400){\n    //     resdata = await response.json();\n    // } else {\n    //     alert(`${response.status}:${response.statusText} - Unable to complete your request to \\n${url}`)\n    // }\n    // return resdata;\n}\n\nexport const NetworkContext = React.createContext(initialNetworkCtx);\n\nexport const NetworkConsumer = NetworkContext.Consumer;\n\nexport const NetworkProvider = (props) => {\n\n    const [ networkCtx, setNetworkCtx ] = React.useState(initialNetworkCtx.networkCtx);\n\n    return(\n        <NetworkContext.Provider value={{ networkCtx, setNetworkCtx, sendNetworkRequest }} >\n            {props.children}\n        </NetworkContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}