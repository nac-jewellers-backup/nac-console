{"ast":null,"code":"/*!\n * FilePondPluginFileRename 1.1.4\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.FilePondPluginFileRename = factory());\n})(this, function () {\n  'use strict';\n\n  var plugin = function plugin(_ref) {\n    var addFilter = _ref.addFilter,\n        utils = _ref.utils; // get quick reference to Type utils\n\n    var Type = utils.Type,\n        renameFile = utils.renameFile,\n        isFile = utils.isFile,\n        getExtensionFromFilename = utils.getExtensionFromFilename,\n        getFilenameWithoutExtension = utils.getFilenameWithoutExtension; // called for each file that is loaded\n    // right before it is set to the item state\n    // should return a promise\n\n    addFilter('LOAD_FILE', function (file, _ref2) {\n      var query = _ref2.query;\n      return new Promise(function (resolve, reject) {\n        // reject\n        var allowFileRename = query('GET_ALLOW_FILE_RENAME');\n        var renameFunction = query('GET_FILE_RENAME_FUNCTION');\n\n        if (!isFile(file) || !allowFileRename || !renameFunction) {\n          resolve(file);\n          return;\n        } // can either return a name or a promise\n\n\n        var newFilename = renameFunction({\n          name: file.name,\n          basename: getFilenameWithoutExtension(file.name),\n          extension: '.'.concat(getExtensionFromFilename(file.name))\n        }); // renames the file and resolves\n\n        var rename = function rename(name) {\n          resolve(renameFile(file, name));\n        }; // has returned new filename immidiately\n\n\n        if (typeof newFilename === 'string') {\n          rename(newFilename);\n          return;\n        } // is promise\n\n\n        newFilename.then(rename);\n      });\n    });\n    return {\n      options: {\n        // Enable or disable file renaming\n        allowFileRename: [true, Type.BOOLEAN],\n        // Rename function to run for this\n        fileRenameFunction: [null, Type.FUNCTION]\n      }\n    };\n  }; // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n\n\n  var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n\n  if (isBrowser) {\n    document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', {\n      detail: plugin\n    }));\n  }\n\n  return plugin;\n});","map":null,"metadata":{},"sourceType":"script"}