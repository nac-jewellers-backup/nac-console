{"ast":null,"code":"import _objectSpread from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/manikandan/Downloads/Archive/src/screens/ProductEdit/CreateVariant.js\";\nimport React, { useState } from 'react';\nimport { Grid, FormGroup, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { withRouter } from \"react-router-dom\";\nimport { ProductContext, ProductProvider } from '../../context';\nimport axios from 'axios';\nimport CardMedia from '@material-ui/core/CardMedia'; // Import React FilePond\n\nimport { FilePond, registerPlugin } from 'react-filepond';\nimport 'filepond/dist/filepond.min.css';\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport FilePondPluginImageValidateSize from 'filepond-plugin-image-validate-size';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename';\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginImageValidateSize, FilePondPluginFileRename);\nexport function CreateVariant(props) {\n  let prod_id = localStorage.getItem('productEditId');\n\n  const _React$useContext = React.useContext(ProductContext),\n        productCtx = _React$useContext.productCtx,\n        setProductCtx = _React$useContext.setProductCtx;\n\n  const _useState = useState({\n    metal_color: [],\n    metal_purity: [],\n    diamond_color: [],\n    diamond_clarity: [],\n    product_images: {}\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        variant = _useState2[0],\n        setVariant = _useState2[1];\n\n  console.log(productCtx, 'createvariants');\n\n  function handleMetalColor(status_data) {\n    let color = variant.metal_color;\n    color.some(color_data => color_data.id === status_data.id) ? color = color.filter(color_fil => color_fil.id !== status_data.id) : color.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_color: color\n    }));\n  }\n\n  function handleMetalPurity(status_data) {\n    let purity = variant.metal_purity;\n    purity.some(purity_data => purity_data.id === status_data.id) ? purity = purity.filter(purity_fil => purity_fil.id !== status_data.id) : purity.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: purity\n    }));\n  }\n\n  function diamondColorChange(status_data) {\n    let diamondColor = variant.diamond_color;\n    diamondColor.some(diamond_color_data => diamond_color_data.id === status_data.id) ? diamondColor = diamondColor.filter(diamond_color_fil => diamond_color_fil.id !== status_data.id) : diamondColor.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: diamondColor\n    }));\n  }\n\n  function diamondClarityChange(status_data) {\n    let diamondClarity = variant.diamond_clarity;\n    diamondClarity.some(diamond_clarity_data => diamond_clarity_data.id === status_data.id) ? diamondClarity = diamondClarity.filter(diamond_clarity_fil => diamond_clarity_fil.id !== status_data.id) : diamondClarity.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: diamondClarity\n    }));\n  }\n\n  async function uploadimagetoserver(bodaydata, imageposition, imagecolor, uploadtype) {\n    let prodimages = variant.product_images;\n\n    if (prodimages) {\n      var prodid = prod_id;\n      let imagecolourobj = variant.product_images[imagecolor];\n      var imagecount = 1;\n\n      if (imagecolourobj) {\n        imagecount = imagecolourobj.length + 1;\n      }\n\n      let imagename = prodid + \"_\" + imagecount + imagecolor.charAt(0);\n      let responsedata = await sendNetworkRequest('/uploadimage', {}, {\n        image: bodaydata.fileExtension,\n        filename: imagename,\n        product_id: prodid\n      }, false);\n      var returnData = responsedata.data.returnData;\n      var signedRequest = returnData.signedRequest;\n      var url = returnData.url;\n      console.log(\"responseurl\" + url);\n      var filepathname = returnData.filepath;\n      var options = {\n        headers: {\n          'Content-Type': bodaydata.fileExtension,\n          'Access-Control-Allow-Origin': '*'\n        }\n      };\n\n      if (imagecolourobj) {\n        const imageobj = {\n          \"name\": prodid + \"_\" + (imagecolourobj.length + 1) + imagecolor.charAt(0),\n          \"position\": imageposition,\n          \"color\": imagecolor,\n          \"image_url\": filepathname,\n          \"url\": 'https://s3.ap-south-1.amazonaws.com/styloribaseimages/' + filepathname\n        };\n\n        if (uploadtype === 'edit') {\n          imagecolourobj[imageposition] = imageobj;\n        } else {\n          imagecolourobj.push(imageobj);\n        }\n\n        prodimages[imagecolor] = imagecolourobj;\n      } else {\n        const imageobj = {\n          \"name\": prodid + \"_1\" + imagecolor.charAt(0),\n          \"position\": imageposition,\n          \"color\": imagecolor,\n          \"image_url\": filepathname,\n          \"url\": 'https://s3.ap-south-1.amazonaws.com/styloribaseimages/' + filepathname\n        };\n        imagecolourobj = [];\n        imagecolourobj.push(imageobj);\n      }\n\n      prodimages[imagecolor] = imagecolourobj;\n      setVariant(_objectSpread({}, variant, {\n        product_images: prodimages\n      })); // setFiles([])\n    }\n\n    await axios.put(signedRequest, bodaydata.file, options);\n  }\n\n  return React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Metal Color\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.metalcolour.map((data, index) => productCtx.productMetalColor && productCtx.productMetalColor.some(prod_metal_color => prod_metal_color.productColor === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.metal_color && variant.metal_color.some(met_colr => met_colr.id == data.id) ? true : false,\n      onChange: () => handleMetalColor(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"Metal Purity\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.metalpurity.map((data, index) => productCtx.productMetalColor && productCtx.productMetalPurity.some(prod_metal_purity => prod_metal_purity.purity === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.metal_purity && variant.metal_purity.some(met_purity => met_purity.id == data.id) ? true : false,\n      onChange: () => handleMetalPurity(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \"Diamond Color\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.diamondcolors.map((data, index) => productCtx.productDiamondColor && productCtx.productDiamondColor.some(prod_diamon_color => prod_diamon_color.diamondColour === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.diamond_color && variant.diamond_color.some(diamond_color => diamond_color.id == data.id) ? true : false,\n      onChange: () => diamondColorChange(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, \"Diamond Clarity\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.diamondclarities.map((data, index) => productCtx.productDiamondClarity && productCtx.productDiamondClarity.some(prod_diamond_clarity => prod_diamond_clarity.diamondClarity === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.diamond_clarity && variant.diamond_clarity.some(prod_diamond_clarity => prod_diamond_clarity.id == data.id) ? true : false,\n      onChange: () => diamondClarityChange(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }))))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, variant.metal_color === undefined ? null : variant.metal_color.map((value, index) => React.createElement(Grid, {\n    xs: 12,\n    container: true,\n    spacing: 1,\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    xs: 12,\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    component: \"h6\",\n    variant: \"h6\",\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }, value.name)), React.createElement(Grid, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }, React.createElement(FilePond, {\n    allowImageValidateSize: true,\n    imageValidateSizeMinWidth: \"2400\",\n    imageValidateSizeMinHeight: \"2400\",\n    imageValidateSizeMeasure: file => new Promise((resolve, reject) => {\n      console.log(file);\n      console.log('filepond property');\n      debugger;\n    }),\n    labelIdle: \"Upload Image\",\n    allowMultiple: true //files = {files}\n    ,\n    onupdatefiles: fileItem => {// Set currently active file objectsfiles to this.state\n    },\n    onaddfile: (error, fileItem) => {\n      uploadimagetoserver(fileItem, index, value.name, \"add\");\n    },\n    onremovefile: (error, fileItem) => {},\n    fileRenameFunction: file => new Promise(resolve => {\n      var prodid = \"S\" + productCtx.product_type.shortCode + (productCtx.masterData.productseries[0].value + 1);\n      let imagecolourobj = productCtx.product_images[value.name];\n      var imagecount = 1;\n\n      if (imagecolourobj) {\n        imagecount = imagecolourobj.length + 1;\n      }\n\n      let imagename = prodid + \"_\" + imagecount + value.name.charAt(0) + file.extension;\n      resolve(imagename);\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }))))));\n} // export const ProductAttributes = withRouter(props => {\n//     const { productCtx, setProductCtx } = React.useContext(ProductContext);\n//     const _content = <ProductProvider value={productCtx,setProductCtx}  >\n//       <CreateVariant {...props} />\n//     </ProductProvider>\n//     return _content\n//   });\n\nexport default CreateVariant;","map":{"version":3,"sources":["/home/manikandan/Downloads/Archive/src/screens/ProductEdit/CreateVariant.js"],"names":["React","useState","Grid","FormGroup","FormControlLabel","Checkbox","withRouter","ProductContext","ProductProvider","axios","CardMedia","FilePond","registerPlugin","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","FilePondPluginImageValidateSize","FilePondPluginFileRename","CreateVariant","props","prod_id","localStorage","getItem","useContext","productCtx","setProductCtx","metal_color","metal_purity","diamond_color","diamond_clarity","product_images","variant","setVariant","console","log","handleMetalColor","status_data","color","some","color_data","id","filter","color_fil","push","handleMetalPurity","purity","purity_data","purity_fil","diamondColorChange","diamondColor","diamond_color_data","diamond_color_fil","diamondClarityChange","diamondClarity","diamond_clarity_data","diamond_clarity_fil","uploadimagetoserver","bodaydata","imageposition","imagecolor","uploadtype","prodimages","prodid","imagecolourobj","imagecount","length","imagename","charAt","responsedata","sendNetworkRequest","image","fileExtension","filename","product_id","returnData","data","signedRequest","url","filepathname","filepath","options","headers","imageobj","put","file","masterData","metalcolour","map","index","productMetalColor","prod_metal_color","productColor","name","met_colr","metalpurity","productMetalPurity","prod_metal_purity","met_purity","diamondcolors","productDiamondColor","prod_diamon_color","diamondColour","diamondclarities","productDiamondClarity","prod_diamond_clarity","undefined","value","Promise","resolve","reject","fileItem","error","product_type","shortCode","productseries","extension"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport { Grid, FormGroup, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { withRouter } from \"react-router-dom\";\nimport { ProductContext,ProductProvider } from '../../context';\nimport axios from 'axios';\nimport CardMedia from '@material-ui/core/CardMedia';\n\n // Import React FilePond\n import { FilePond, registerPlugin } from 'react-filepond';\n import 'filepond/dist/filepond.min.css';\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport FilePondPluginImageValidateSize from 'filepond-plugin-image-validate-size';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename';\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview,FilePondPluginImageValidateSize,FilePondPluginFileRename);\n\nexport function CreateVariant(props) {\n    let prod_id = localStorage.getItem('productEditId');\n    const { productCtx, setProductCtx } = React.useContext(ProductContext);\n    const [variant,setVariant] = useState({\n        metal_color:[],\n        metal_purity:[],\n        diamond_color:[],\n        diamond_clarity:[],\n        product_images:{}\n        \n    })\n    console.log(productCtx,'createvariants')\n    function handleMetalColor(status_data) {\n        let color = variant.metal_color;\n        color.some(color_data=>color_data.id===status_data.id)? color=color.filter(color_fil=>color_fil.id!==status_data.id):color.push(status_data)\n        setVariant({\n            ...variant,\n            metal_color:color\n        })\n    }\n    function handleMetalPurity(status_data){\n        let purity = variant.metal_purity;\n        purity.some(purity_data=>purity_data.id===status_data.id)? purity=purity.filter(purity_fil=>purity_fil.id!==status_data.id):purity.push(status_data)\n        setVariant({\n            ...variant,\n            metal_purity:purity\n        })\n    }\n    function diamondColorChange(status_data){\n        let diamondColor = variant.diamond_color;\n        diamondColor.some(diamond_color_data=>diamond_color_data.id===status_data.id)? diamondColor=diamondColor.filter(diamond_color_fil=>diamond_color_fil.id!==status_data.id):diamondColor.push(status_data)\n        setVariant({\n            ...variant,\n            metal_purity:diamondColor\n        })\n    }\n    function diamondClarityChange(status_data){\n        let diamondClarity = variant.diamond_clarity;\n        diamondClarity.some(diamond_clarity_data=>diamond_clarity_data.id===status_data.id)? diamondClarity=diamondClarity.filter(diamond_clarity_fil=>diamond_clarity_fil.id!==status_data.id):diamondClarity.push(status_data)\n        setVariant({\n            ...variant,\n            metal_purity:diamondClarity\n        })\n        \n    }\n    async function uploadimagetoserver(bodaydata, imageposition, imagecolor, uploadtype)\n    {\n    let prodimages = variant.product_images;\n    if(prodimages)\n    {\n      var prodid = prod_id;\n      let imagecolourobj = variant.product_images[imagecolor];\n      var imagecount  = 1;\n      if(imagecolourobj)\n      {\n        imagecount = imagecolourobj.length + 1;\n      }\n  \n      let imagename = (prodid+\"_\"+(imagecount)+imagecolor.charAt(0));\n      let responsedata = await sendNetworkRequest('/uploadimage', {}, {image:bodaydata.fileExtension, filename :imagename, product_id: prodid },false)\n      var returnData = responsedata.data.returnData;\n      var signedRequest = returnData.signedRequest;\n      var url = returnData.url;\n      console.log(\"responseurl\"+url);\n      var filepathname = returnData.filepath\n      var options = {\n          headers: {\n              'Content-Type': bodaydata.fileExtension,\n              'Access-Control-Allow-Origin':'*'\n          }\n      };\n      \n      if(imagecolourobj)\n      {\n        const imageobj = {\n          \"name\": (prodid+\"_\"+(imagecolourobj.length+1)+imagecolor.charAt(0)),\n          \"position\":imageposition,\n          \"color\":imagecolor,\n          \"image_url\":filepathname,\n          \"url\":'https://s3.ap-south-1.amazonaws.com/styloribaseimages/'+filepathname\n        }\n        if(uploadtype === 'edit')\n        {\n          imagecolourobj[imageposition] = imageobj;\n  \n        }else\n        {\n          imagecolourobj.push(imageobj)\n  \n        }\n        prodimages[imagecolor] = imagecolourobj;\n  \n      }else\n      {\n        const imageobj = {\n          \"name\": (prodid+\"_1\"+imagecolor.charAt(0)),\n          \"position\":imageposition,\n          \"color\":imagecolor,\n          \"image_url\":filepathname,\n          \"url\":'https://s3.ap-south-1.amazonaws.com/styloribaseimages/'+filepathname\n        }\n        imagecolourobj = [];\n        imagecolourobj.push(imageobj)\n      }\n      prodimages[imagecolor] = imagecolourobj;\n      setVariant({ ...variant, product_images: prodimages })\n      // setFiles([])\n    }\n    await axios.put(signedRequest, bodaydata.file, options)\n    }\n    return (\n        <Grid container>\n            <Grid item>\n                <Grid container>\n                    <Grid>Metal Color</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.metalcolour.map((data,index)=>(\n                                \n                                productCtx.productMetalColor&&productCtx.productMetalColor.some((prod_metal_color)=>prod_metal_color.productColor===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.metal_color&&variant.metal_color.some(met_colr=>met_colr.id==data.id)?true:false} onChange={()=>handleMetalColor(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid>\n                <Grid container>\n                    <Grid>Metal Purity</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.metalpurity.map((data,index)=>(\n                                \n                                productCtx.productMetalColor&&productCtx.productMetalPurity.some((prod_metal_purity)=>prod_metal_purity.purity===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.metal_purity&&variant.metal_purity.some(met_purity=>met_purity.id==data.id)?true:false} onChange={()=>handleMetalPurity(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid>\n                <Grid container>\n                    <Grid>Diamond Color</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.diamondcolors.map((data,index)=>(\n                                \n                                productCtx.productDiamondColor&&productCtx.productDiamondColor.some((prod_diamon_color)=>prod_diamon_color.diamondColour===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.diamond_color&&variant.diamond_color.some(diamond_color=>diamond_color.id==data.id)?true:false} onChange={()=>diamondColorChange(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid>\n                <Grid container>\n                    <Grid>Diamond Clarity</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.diamondclarities.map((data,index)=>(\n                                \n                                productCtx.productDiamondClarity&&productCtx.productDiamondClarity.some((prod_diamond_clarity)=>prod_diamond_clarity.diamondClarity===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.diamond_clarity&&variant.diamond_clarity.some(prod_diamond_clarity=>prod_diamond_clarity.id==data.id)?true:false} onChange={()=>diamondClarityChange(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid>\n                {/* <Grid container>\n                    <Grid>Size</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.metalcolour.map((data,index)=>(\n                                \n                                productCtx.productMetalColor&&productCtx.productMetalColor.some((prod_metal_color)=>prod_metal_color.productColor===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.metal_color&&variant.metal_color.some(met_colr=>met_colr.id==data.id)?true:false} onChange={()=>handleChange(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid> */}\n            </Grid>\n            <Grid container>\n                    {variant.metal_color === undefined ? null : variant.metal_color.map((value,index) => ( \n                    <Grid xs={12} container spacing={1} item>\n                    <Grid  xs={12}  item>\n\n                    <Typography component=\"h6\" variant=\"h6\" align=\"left\">\n                    {value.name}\n                    </Typography> \n                    </Grid>\n                    <Grid xs={12} sm={12} md={12} item>\n                    <FilePond  \n                                allowImageValidateSize\n                                imageValidateSizeMinWidth=\"2400\"\n                                imageValidateSizeMinHeight=\"2400\"\n                                imageValidateSizeMeasure={(file)=>new Promise((resolve,reject)=>{\n                                    console.log(file);\n                                    console.log('filepond property');\n                                    debugger;\n                                })}\n                                labelIdle=\"Upload Image\" \n                                allowMultiple={true}  \n                                //files = {files}\n                                onupdatefiles={fileItem => {\n                                    // Set currently active file objectsfiles to this.state\n                                    \n                                }}\n                                onaddfile={(error, fileItem)=> {\n                                    uploadimagetoserver(fileItem, index, value.name, \"add\")\n                                }}\n                                onremovefile={(error, fileItem)=>{\n\n                                }}\n                                fileRenameFunction={\n                                    (file) => new Promise(resolve => {\n                                    var prodid = \"S\"+productCtx.product_type.shortCode+(productCtx.masterData.productseries[0].value+1)\n                                    let imagecolourobj = productCtx.product_images[value.name];\n                                    var imagecount  = 1;\n                                    if(imagecolourobj)\n                                    {\n                                        imagecount = imagecolourobj.length + 1;\n                                    }\n                                    let imagename = (prodid+\"_\"+(imagecount)+value.name.charAt(0))+file.extension;\n                                    resolve(imagename)\n                                    \n                                })\n                                } \n                                >\n                        </FilePond>\n                    </Grid>\n                    \n                    </Grid>\n                ))} \n            </Grid>\n        </Grid>\n    )\n\n}\n// export const ProductAttributes = withRouter(props => {\n\n//     const { productCtx, setProductCtx } = React.useContext(ProductContext);\n   \n//     const _content = <ProductProvider value={productCtx,setProductCtx}  >\n//       <CreateVariant {...props} />\n//     </ProductProvider>\n//     return _content\n\n//   });\nexport default CreateVariant;"]},"metadata":{},"sourceType":"module"}