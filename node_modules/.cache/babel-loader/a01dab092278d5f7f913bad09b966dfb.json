{"ast":null,"code":"import _objectSpread from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/manikandan/Downloads/Archive/src/screens/ProductEdit/CreateVariant.js\";\nimport React, { useState } from 'react';\nimport { Grid, FormGroup, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { withRouter } from \"react-router-dom\";\nimport { ProductContext, ProductProvider } from '../../context';\nexport function CreateVariant(props) {\n  const _React$useContext = React.useContext(ProductContext),\n        productCtx = _React$useContext.productCtx,\n        setProductCtx = _React$useContext.setProductCtx;\n\n  const _useState = useState({\n    metal_color: [],\n    metal_purity: [],\n    diamond_color: [],\n    diamond_clarity: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        variant = _useState2[0],\n        setVariant = _useState2[1];\n\n  console.log(productCtx, 'createvariants');\n\n  function handleMetalColor(status_data) {\n    let color = variant.metal_color;\n    color.some(color_data => color_data.id === status_data.id) ? color = color.filter(color_fil => color_fil.id !== status_data.id) : color.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_color: color\n    }));\n  }\n\n  function handleMetalPurity(status_data) {\n    let purity = variant.metal_purity;\n    purity.some(purity_data => purity_data.id === status_data.id) ? purity = purity.filter(purity_fil => purity_fil.id !== status_data.id) : purity.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: purity\n    }));\n  }\n\n  function diamondColorChange(status_data) {\n    let diamondColor = variant.diamond_color;\n    diamondColor.some(diamond_color_data => diamond_color_data.id === status_data.id) ? diamondColor = diamondColor.filter(diamond_color_fil => diamond_color_fil.id !== status_data.id) : diamondColor.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: diamondColor\n    }));\n  }\n\n  function diamondClarityChange(status_data) {\n    let diamondClarity = variant.diamond_clarity;\n    diamondClarity.some(diamond_clarity_data => diamond_clarity_data.id === status_data.id) ? diamondClarity = diamondClarity.filter(diamond_clarity_fil => diamond_clarity_fil.id !== status_data.id) : diamondClarity.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: diamondClarity\n    }));\n  }\n\n  return React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Metal Color\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.metalcolour.map((data, index) => productCtx.productMetalColor && productCtx.productMetalColor.some(prod_metal_color => prod_metal_color.productColor === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.metal_color && variant.metal_color.some(met_colr => met_colr.id == data.id) ? true : false,\n      onChange: () => handleMetalColor(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Metal Purity\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.metalpurity.map((data, index) => productCtx.productMetalColor && productCtx.productMetalPurity.some(prod_metal_purity => prod_metal_purity.purity === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.metal_purity && variant.metal_purity.some(met_purity => met_purity.id == data.id) ? true : false,\n      onChange: () => handleMetalPurity(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Diamond Color\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.diamondcolors.map((data, index) => productCtx.productDiamondColor && productCtx.productDiamondColor.some(prod_diamon_color => prod_diamon_color.diamondColour === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.diamond_color && variant.diamond_color.some(diamond_color => diamond_color.id == data.id) ? true : false,\n      onChange: () => diamondColorChange(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Diamond Clarity\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.diamondclarities.map((data, index) => productCtx.productDiamondClarity && productCtx.productDiamondClarity.some(prod_diamond_clarity => prod_diamond_clarity.diamondClarity === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.diamond_clarity && variant.diamond_clarity.some(prod_diamond_clarity => prod_diamond_clarity.id == data.id) ? true : false,\n      onChange: () => diamondClarityChange(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"Size\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.metalcolour.map((data, index) => productCtx.productMetalColor && productCtx.productMetalColor.some(prod_metal_color => prod_metal_color.productColor === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.metal_color && variant.metal_color.some(met_colr => met_colr.id == data.id) ? true : false,\n      onChange: () => handleChange(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }))))));\n} // export const ProductAttributes = withRouter(props => {\n//     const { productCtx, setProductCtx } = React.useContext(ProductContext);\n//     const _content = <ProductProvider value={productCtx,setProductCtx}  >\n//       <CreateVariant {...props} />\n//     </ProductProvider>\n//     return _content\n//   });\n\nexport default CreateVariant;","map":{"version":3,"sources":["/home/manikandan/Downloads/Archive/src/screens/ProductEdit/CreateVariant.js"],"names":["React","useState","Grid","FormGroup","FormControlLabel","Checkbox","withRouter","ProductContext","ProductProvider","CreateVariant","props","useContext","productCtx","setProductCtx","metal_color","metal_purity","diamond_color","diamond_clarity","variant","setVariant","console","log","handleMetalColor","status_data","color","some","color_data","id","filter","color_fil","push","handleMetalPurity","purity","purity_data","purity_fil","diamondColorChange","diamondColor","diamond_color_data","diamond_color_fil","diamondClarityChange","diamondClarity","diamond_clarity_data","diamond_clarity_fil","masterData","metalcolour","map","data","index","productMetalColor","prod_metal_color","productColor","name","met_colr","metalpurity","productMetalPurity","prod_metal_purity","met_purity","diamondcolors","productDiamondColor","prod_diamon_color","diamondColour","diamondclarities","productDiamondClarity","prod_diamond_clarity","handleChange"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport { Grid, FormGroup, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { withRouter } from \"react-router-dom\";\nimport { ProductContext,ProductProvider } from '../../context';\nexport function CreateVariant(props) {\n\n    const { productCtx, setProductCtx } = React.useContext(ProductContext);\n    const [variant,setVariant] = useState({\n        metal_color:[],\n        metal_purity:[],\n        diamond_color:[],\n        diamond_clarity:[]\n    })\n    console.log(productCtx,'createvariants')\n    function handleMetalColor(status_data) {\n        let color = variant.metal_color;\n        color.some(color_data=>color_data.id===status_data.id)? color=color.filter(color_fil=>color_fil.id!==status_data.id):color.push(status_data)\n        setVariant({\n            ...variant,\n            metal_color:color\n        })\n    }\n    function handleMetalPurity(status_data){\n        let purity = variant.metal_purity;\n        purity.some(purity_data=>purity_data.id===status_data.id)? purity=purity.filter(purity_fil=>purity_fil.id!==status_data.id):purity.push(status_data)\n        setVariant({\n            ...variant,\n            metal_purity:purity\n        })\n    }\n    function diamondColorChange(status_data){\n        let diamondColor = variant.diamond_color;\n        diamondColor.some(diamond_color_data=>diamond_color_data.id===status_data.id)? diamondColor=diamondColor.filter(diamond_color_fil=>diamond_color_fil.id!==status_data.id):diamondColor.push(status_data)\n        setVariant({\n            ...variant,\n            metal_purity:diamondColor\n        })\n    }\n    function diamondClarityChange(status_data){\n        let diamondClarity = variant.diamond_clarity;\n        diamondClarity.some(diamond_clarity_data=>diamond_clarity_data.id===status_data.id)? diamondClarity=diamondClarity.filter(diamond_clarity_fil=>diamond_clarity_fil.id!==status_data.id):diamondClarity.push(status_data)\n        setVariant({\n            ...variant,\n            metal_purity:diamondClarity\n        })\n    }\n    return (\n        <Grid container>\n            <Grid item>\n                <Grid container>\n                    <Grid>Metal Color</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.metalcolour.map((data,index)=>(\n                                \n                                productCtx.productMetalColor&&productCtx.productMetalColor.some((prod_metal_color)=>prod_metal_color.productColor===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.metal_color&&variant.metal_color.some(met_colr=>met_colr.id==data.id)?true:false} onChange={()=>handleMetalColor(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid>\n                <Grid container>\n                    <Grid>Metal Purity</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.metalpurity.map((data,index)=>(\n                                \n                                productCtx.productMetalColor&&productCtx.productMetalPurity.some((prod_metal_purity)=>prod_metal_purity.purity===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.metal_purity&&variant.metal_purity.some(met_purity=>met_purity.id==data.id)?true:false} onChange={()=>handleMetalPurity(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid>\n                <Grid container>\n                    <Grid>Diamond Color</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.diamondcolors.map((data,index)=>(\n                                \n                                productCtx.productDiamondColor&&productCtx.productDiamondColor.some((prod_diamon_color)=>prod_diamon_color.diamondColour===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.diamond_color&&variant.diamond_color.some(diamond_color=>diamond_color.id==data.id)?true:false} onChange={()=>diamondColorChange(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid>\n                <Grid container>\n                    <Grid>Diamond Clarity</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.diamondclarities.map((data,index)=>(\n                                \n                                productCtx.productDiamondClarity&&productCtx.productDiamondClarity.some((prod_diamond_clarity)=>prod_diamond_clarity.diamondClarity===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.diamond_clarity&&variant.diamond_clarity.some(prod_diamond_clarity=>prod_diamond_clarity.id==data.id)?true:false} onChange={()=>diamondClarityChange(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid>\n                <Grid container>\n                    <Grid>Size</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.metalcolour.map((data,index)=>(\n                                \n                                productCtx.productMetalColor&&productCtx.productMetalColor.some((prod_metal_color)=>prod_metal_color.productColor===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.metal_color&&variant.metal_color.some(met_colr=>met_colr.id==data.id)?true:false} onChange={()=>handleChange(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n\n}\n// export const ProductAttributes = withRouter(props => {\n\n//     const { productCtx, setProductCtx } = React.useContext(ProductContext);\n   \n//     const _content = <ProductProvider value={productCtx,setProductCtx}  >\n//       <CreateVariant {...props} />\n//     </ProductProvider>\n//     return _content\n\n//   });\nexport default CreateVariant;"]},"metadata":{},"sourceType":"module"}