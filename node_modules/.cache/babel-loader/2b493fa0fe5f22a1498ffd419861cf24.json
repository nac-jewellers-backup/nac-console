{"ast":null,"code":"import _objectSpread from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/manikandan/Downloads/Archive/src/screens/ProductEdit/CreateVariant.js\";\nimport React, { useState } from 'react';\nimport { Grid, FormGroup, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { withRouter } from \"react-router-dom\";\nimport { ProductContext, ProductProvider } from '../../context';\nimport axios from 'axios';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { API_URL } from '../../config'; // Import React FilePond\n\nimport Typography from '@material-ui/core/Typography';\nimport { FilePond, registerPlugin } from 'react-filepond';\nimport 'filepond/dist/filepond.min.css';\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport FilePondPluginImageValidateSize from 'filepond-plugin-image-validate-size';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename'; // import { NetworkContext } from '../../context/NetworkContext';\n\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginImageValidateSize, FilePondPluginFileRename);\nexport function CreateVariant(props) {\n  // const { sendNetworkRequest } = React.useContext(NetworkContext);\n  let prod_id = localStorage.getItem('productEditId');\n\n  const _React$useContext = React.useContext(ProductContext),\n        productCtx = _React$useContext.productCtx,\n        setProductCtx = _React$useContext.setProductCtx;\n\n  const _useState = useState({\n    metal_color: [],\n    metal_purity: [],\n    diamond_color: [],\n    diamond_clarity: [],\n    product_images: {}\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        variant = _useState2[0],\n        setVariant = _useState2[1];\n\n  console.log(productCtx, 'createvariants');\n\n  function handleMetalColor(status_data) {\n    let color = variant.metal_color;\n    color.some(color_data => color_data.id === status_data.id) ? color = color.filter(color_fil => color_fil.id !== status_data.id) : color.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_color: color\n    }));\n  }\n\n  const sendNetworkRequest = async (url, params, data, auth = true) => {\n    url = API_URL + url;\n    console.info('URL', url, data);\n    const method = data ? 'POST' : 'GET',\n          headers = {\n      'Content-Type': 'application/json'\n    };\n    let resdata = null;\n\n    if (auth) {\n      const token = localStorage.getItem(TOKEN);\n      if (token) headers[\"auth\"] = token;else window.location = '/';\n    }\n\n    const response = await fetch(url, {\n      method,\n      body: isString(data) ? data : JSON.stringify(data),\n      headers\n    });\n\n    if (response.status < 400) {\n      resdata = await response.json();\n    } else {\n      alert(\"\".concat(response.status, \":\").concat(response.statusText, \" - Unable to complete your request to \\n\").concat(url));\n    }\n\n    return resdata;\n  };\n\n  function handleMetalPurity(status_data) {\n    let purity = variant.metal_purity;\n    purity.some(purity_data => purity_data.id === status_data.id) ? purity = purity.filter(purity_fil => purity_fil.id !== status_data.id) : purity.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: purity\n    }));\n  }\n\n  function diamondColorChange(status_data) {\n    let diamondColor = variant.diamond_color;\n    diamondColor.some(diamond_color_data => diamond_color_data.id === status_data.id) ? diamondColor = diamondColor.filter(diamond_color_fil => diamond_color_fil.id !== status_data.id) : diamondColor.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: diamondColor\n    }));\n  }\n\n  function diamondClarityChange(status_data) {\n    let diamondClarity = variant.diamond_clarity;\n    diamondClarity.some(diamond_clarity_data => diamond_clarity_data.id === status_data.id) ? diamondClarity = diamondClarity.filter(diamond_clarity_fil => diamond_clarity_fil.id !== status_data.id) : diamondClarity.push(status_data);\n    setVariant(_objectSpread({}, variant, {\n      metal_purity: diamondClarity\n    }));\n  }\n\n  async function uploadimagetoserver(bodaydata, imageposition, imagecolor, uploadtype) {\n    let prodimages = variant.product_images; // if(true)\n    // {\n\n    var prodid = prod_id;\n    let imagecolourobj = variant.product_images[imagecolor];\n    var imagecount = 1;\n\n    if (imagecolourobj) {\n      imagecount = imagecolourobj.length + 1;\n    }\n\n    let imagename = prodid + \"_\" + imagecount + imagecolor.charAt(0);\n    let responsedata = await sendNetworkRequest('/uploadimage', {}, {\n      image: bodaydata.fileExtension,\n      filename: imagename,\n      product_id: prodid\n    }, false);\n    var returnData = responsedata && responsedata.data && responsedata.data.returnData;\n    var signedRequest = returnData && returnData.signedRequest;\n    var url = returnData && returnData.url;\n    console.log(\"responseurl\" + url);\n    var filepathname = returnData && returnData.filepath;\n    var options = {\n      headers: {\n        'Content-Type': bodaydata.fileExtension,\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n\n    if (imagecolourobj) {\n      const imageobj = {\n        \"name\": prodid + \"_\" + (imagecolourobj.length + 1) + imagecolor.charAt(0),\n        \"position\": imageposition,\n        \"color\": imagecolor,\n        \"image_url\": filepathname,\n        \"url\": 'https://s3.ap-south-1.amazonaws.com/styloribaseimages/' + filepathname\n      };\n\n      if (uploadtype === 'edit') {\n        imagecolourobj[imageposition] = imageobj;\n      } else {\n        imagecolourobj.push(imageobj);\n      }\n\n      prodimages[imagecolor] = imagecolourobj;\n    } else {\n      const imageobj = {\n        \"name\": prodid + \"_1\" + imagecolor.charAt(0),\n        \"position\": imageposition,\n        \"color\": imagecolor,\n        \"image_url\": filepathname,\n        \"url\": 'https://s3.ap-south-1.amazonaws.com/styloribaseimages/' + filepathname\n      };\n      imagecolourobj = [];\n      imagecolourobj.push(imageobj);\n    }\n\n    prodimages[imagecolor] = imagecolourobj;\n    setVariant(_objectSpread({}, variant, {\n      product_images: prodimages\n    })); // setFiles([])\n    // }\n    // await axios.put(signedRequest, bodaydata.file, options)\n  }\n\n  return React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \"Metal Color\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.metalcolour.map((data, index) => productCtx.productMetalColor && productCtx.productMetalColor.some(prod_metal_color => prod_metal_color.productColor === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.metal_color && variant.metal_color.some(met_colr => met_colr.id == data.id) ? true : false,\n      onChange: () => handleMetalColor(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, \"Metal Purity\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.metalpurity.map((data, index) => productCtx.productMetalColor && productCtx.productMetalPurity.some(prod_metal_purity => prod_metal_purity.purity === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.metal_purity && variant.metal_purity.some(met_purity => met_purity.id == data.id) ? true : false,\n      onChange: () => handleMetalPurity(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, \"Diamond Color\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.diamondcolors.map((data, index) => productCtx.productDiamondColor && productCtx.productDiamondColor.some(prod_diamon_color => prod_diamon_color.diamondColour === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.diamond_color && variant.diamond_color.some(diamond_color => diamond_color.id == data.id) ? true : false,\n      onChange: () => diamondColorChange(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, \"Diamond Clarity\"), React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, productCtx.masterData && productCtx.masterData.diamondclarities.map((data, index) => productCtx.productDiamondClarity && productCtx.productDiamondClarity.some(prod_diamond_clarity => prod_diamond_clarity.diamondClarity === data.name) ? React.createElement(FormControlLabel, {\n    disabled: true,\n    control: React.createElement(Checkbox, {\n      checked: true,\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }) : React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: variant.diamond_clarity && variant.diamond_clarity.some(prod_diamond_clarity => prod_diamond_clarity.id == data.id) ? true : false,\n      onChange: () => diamondClarityChange(data),\n      value: \"checkedA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }),\n    label: data.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }))))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, variant.metal_color === undefined ? null : variant.metal_color.map((value, index) => React.createElement(Grid, {\n    xs: 12,\n    container: true,\n    spacing: 1,\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    xs: 12,\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    component: \"h6\",\n    variant: \"h6\",\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  }, value.name)), React.createElement(Grid, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }, React.createElement(FilePond, {\n    allowImageValidateSize: true,\n    imageValidateSizeMinWidth: \"2400\",\n    imageValidateSizeMinHeight: \"2400\",\n    imageValidateSizeMeasure: file => new Promise((resolve, reject) => {\n      console.log(file);\n      console.log('filepond property');\n      debugger;\n    }),\n    labelIdle: \"Upload Image\",\n    allowMultiple: true //files = {files}\n    ,\n    onupdatefiles: fileItem => {// Set currently active file objectsfiles to this.state\n    },\n    onaddfile: (error, fileItem) => {\n      uploadimagetoserver(fileItem, index, value.name, \"add\");\n    },\n    onremovefile: (error, fileItem) => {},\n    fileRenameFunction: file => new Promise(resolve => {\n      var prodid = prod_id;\n      let imagecolourobj = variant.product_images[value.name];\n      var imagecount = 1;\n\n      if (imagecolourobj) {\n        imagecount = imagecolourobj.length + 1;\n      }\n\n      let imagename = prodid + \"_\" + imagecount + value.name.charAt(0) + file.extension;\n      resolve(imagename);\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  }))))));\n} // export const ProductAttributes = withRouter(props => {\n//     const { productCtx, setProductCtx } = React.useContext(ProductContext);\n//     const _content = <ProductProvider value={productCtx,setProductCtx}  >\n//       <CreateVariant {...props} />\n//     </ProductProvider>\n//     return _content\n//   });\n\nexport default CreateVariant;","map":{"version":3,"sources":["/home/manikandan/Downloads/Archive/src/screens/ProductEdit/CreateVariant.js"],"names":["React","useState","Grid","FormGroup","FormControlLabel","Checkbox","withRouter","ProductContext","ProductProvider","axios","CardMedia","API_URL","Typography","FilePond","registerPlugin","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","FilePondPluginImageValidateSize","FilePondPluginFileRename","CreateVariant","props","prod_id","localStorage","getItem","useContext","productCtx","setProductCtx","metal_color","metal_purity","diamond_color","diamond_clarity","product_images","variant","setVariant","console","log","handleMetalColor","status_data","color","some","color_data","id","filter","color_fil","push","sendNetworkRequest","url","params","data","auth","info","method","headers","resdata","token","TOKEN","window","location","response","fetch","body","isString","JSON","stringify","status","json","alert","statusText","handleMetalPurity","purity","purity_data","purity_fil","diamondColorChange","diamondColor","diamond_color_data","diamond_color_fil","diamondClarityChange","diamondClarity","diamond_clarity_data","diamond_clarity_fil","uploadimagetoserver","bodaydata","imageposition","imagecolor","uploadtype","prodimages","prodid","imagecolourobj","imagecount","length","imagename","charAt","responsedata","image","fileExtension","filename","product_id","returnData","signedRequest","filepathname","filepath","options","imageobj","masterData","metalcolour","map","index","productMetalColor","prod_metal_color","productColor","name","met_colr","metalpurity","productMetalPurity","prod_metal_purity","met_purity","diamondcolors","productDiamondColor","prod_diamon_color","diamondColour","diamondclarities","productDiamondClarity","prod_diamond_clarity","undefined","value","file","Promise","resolve","reject","fileItem","error","extension"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport { Grid, FormGroup, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { withRouter } from \"react-router-dom\";\nimport { ProductContext,ProductProvider } from '../../context';\nimport axios from 'axios';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { API_URL } from '../../config';\n // Import React FilePond\n import Typography from '@material-ui/core/Typography';\n import { FilePond, registerPlugin } from 'react-filepond';\n import 'filepond/dist/filepond.min.css';\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport FilePondPluginImageValidateSize from 'filepond-plugin-image-validate-size';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename';\n// import { NetworkContext } from '../../context/NetworkContext';\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview,FilePondPluginImageValidateSize,FilePondPluginFileRename);\n\nexport function CreateVariant(props) {\n    // const { sendNetworkRequest } = React.useContext(NetworkContext);\n\n    let prod_id = localStorage.getItem('productEditId');\n    const { productCtx, setProductCtx } = React.useContext(ProductContext);\n    const [variant,setVariant] = useState({\n        metal_color:[],\n        metal_purity:[],\n        diamond_color:[],\n        diamond_clarity:[],\n        product_images:{}\n        \n    })\n    console.log(productCtx,'createvariants')\n    function handleMetalColor(status_data) {\n        let color = variant.metal_color;\n        color.some(color_data=>color_data.id===status_data.id)? color=color.filter(color_fil=>color_fil.id!==status_data.id):color.push(status_data)\n        setVariant({\n            ...variant,\n            metal_color:color\n        })\n    }\n    const sendNetworkRequest = async (url, params, data, auth = true) => {\n        url = API_URL+url;\n        console.info('URL', url, data)\n        const method = data ? 'POST' : 'GET', \n            headers = {\n                'Content-Type': 'application/json'\n            };\n        let resdata = null;\n        if(auth){\n            const token = localStorage.getItem(TOKEN)\n            if(token) headers[\"auth\"] = token\n            else window.location = '/'\n        }\n        const response = await fetch(url, {\n            method, body: isString(data) ? data : JSON.stringify(data), headers\n        })\n    \n        if(response.status < 400){\n            resdata = await response.json();\n        } else {\n            alert(`${response.status}:${response.statusText} - Unable to complete your request to \\n${url}`)\n        }\n        return resdata;\n    }\n    function handleMetalPurity(status_data){\n        let purity = variant.metal_purity;\n        purity.some(purity_data=>purity_data.id===status_data.id)? purity=purity.filter(purity_fil=>purity_fil.id!==status_data.id):purity.push(status_data)\n        setVariant({\n            ...variant,\n            metal_purity:purity\n        })\n    }\n    function diamondColorChange(status_data){\n        let diamondColor = variant.diamond_color;\n        diamondColor.some(diamond_color_data=>diamond_color_data.id===status_data.id)? diamondColor=diamondColor.filter(diamond_color_fil=>diamond_color_fil.id!==status_data.id):diamondColor.push(status_data)\n        setVariant({\n            ...variant,\n            metal_purity:diamondColor\n        })\n    }\n    function diamondClarityChange(status_data){\n        let diamondClarity = variant.diamond_clarity;\n        diamondClarity.some(diamond_clarity_data=>diamond_clarity_data.id===status_data.id)? diamondClarity=diamondClarity.filter(diamond_clarity_fil=>diamond_clarity_fil.id!==status_data.id):diamondClarity.push(status_data)\n        setVariant({\n            ...variant,\n            metal_purity:diamondClarity\n        })\n        \n    }\n    async function uploadimagetoserver(bodaydata, imageposition, imagecolor, uploadtype)\n    {\n    let prodimages = variant.product_images;\n    // if(true)\n    // {\n      var prodid = prod_id;\n      let imagecolourobj = variant.product_images[imagecolor];\n      var imagecount  = 1;\n      if(imagecolourobj)\n      {\n        imagecount = imagecolourobj.length + 1;\n      }\n  \n      let imagename = (prodid+\"_\"+(imagecount)+imagecolor.charAt(0));\n      let responsedata = await sendNetworkRequest('/uploadimage', {}, {image:bodaydata.fileExtension, filename :imagename, product_id: prodid },false)\n      var returnData =responsedata&&responsedata.data&& responsedata.data.returnData;\n      var signedRequest = returnData&&returnData.signedRequest;\n      var url = returnData&&returnData.url;\n      console.log(\"responseurl\"+url);\n      var filepathname = returnData&&returnData.filepath;\n      var options = {\n          headers: {\n              'Content-Type': bodaydata.fileExtension,\n              'Access-Control-Allow-Origin':'*'\n          }\n      };\n      \n      if(imagecolourobj)\n      {\n        const imageobj = {\n          \"name\": (prodid+\"_\"+(imagecolourobj.length+1)+imagecolor.charAt(0)),\n          \"position\":imageposition,\n          \"color\":imagecolor,\n          \"image_url\":filepathname,\n          \"url\":'https://s3.ap-south-1.amazonaws.com/styloribaseimages/'+filepathname\n        }\n        if(uploadtype === 'edit')\n        {\n          imagecolourobj[imageposition] = imageobj;\n  \n        }else\n        {\n          imagecolourobj.push(imageobj)\n  \n        }\n        prodimages[imagecolor] = imagecolourobj;\n  \n      }else\n      {\n        const imageobj = {\n          \"name\": (prodid+\"_1\"+imagecolor.charAt(0)),\n          \"position\":imageposition,\n          \"color\":imagecolor,\n          \"image_url\":filepathname,\n          \"url\":'https://s3.ap-south-1.amazonaws.com/styloribaseimages/'+filepathname\n        }\n        imagecolourobj = [];\n        imagecolourobj.push(imageobj)\n      }\n      prodimages[imagecolor] = imagecolourobj;\n      setVariant({ ...variant, product_images: prodimages })\n      // setFiles([])\n    // }\n  \n    // await axios.put(signedRequest, bodaydata.file, options)\n    }\n    return (\n        <Grid container>\n            <Grid item>\n                <Grid container>\n                    <Grid>Metal Color</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.metalcolour.map((data,index)=>(\n                                \n                                productCtx.productMetalColor&&productCtx.productMetalColor.some((prod_metal_color)=>prod_metal_color.productColor===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.metal_color&&variant.metal_color.some(met_colr=>met_colr.id==data.id)?true:false} onChange={()=>handleMetalColor(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid>\n                <Grid container>\n                    <Grid>Metal Purity</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.metalpurity.map((data,index)=>(\n                                \n                                productCtx.productMetalColor&&productCtx.productMetalPurity.some((prod_metal_purity)=>prod_metal_purity.purity===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.metal_purity&&variant.metal_purity.some(met_purity=>met_purity.id==data.id)?true:false} onChange={()=>handleMetalPurity(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid>\n                <Grid container>\n                    <Grid>Diamond Color</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.diamondcolors.map((data,index)=>(\n                                \n                                productCtx.productDiamondColor&&productCtx.productDiamondColor.some((prod_diamon_color)=>prod_diamon_color.diamondColour===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.diamond_color&&variant.diamond_color.some(diamond_color=>diamond_color.id==data.id)?true:false} onChange={()=>diamondColorChange(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid>\n                <Grid container>\n                    <Grid>Diamond Clarity</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.diamondclarities.map((data,index)=>(\n                                \n                                productCtx.productDiamondClarity&&productCtx.productDiamondClarity.some((prod_diamond_clarity)=>prod_diamond_clarity.diamondClarity===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.diamond_clarity&&variant.diamond_clarity.some(prod_diamond_clarity=>prod_diamond_clarity.id==data.id)?true:false} onChange={()=>diamondClarityChange(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid>\n                {/* <Grid container>\n                    <Grid>Size</Grid>\n                    <FormGroup row>\n                        {\n                            productCtx.masterData&&productCtx.masterData.metalcolour.map((data,index)=>(\n                                \n                                productCtx.productMetalColor&&productCtx.productMetalColor.some((prod_metal_color)=>prod_metal_color.productColor===data.name) ?     \n                                     <FormControlLabel\n                                    disabled\n                                    control={\n                                        <Checkbox checked={true} value=\"checkedA\" />\n                                    }\n                                    label={data.name}\n                                />:     \n                                <FormControlLabel\n                                control={\n                                    <Checkbox checked={variant.metal_color&&variant.metal_color.some(met_colr=>met_colr.id==data.id)?true:false} onChange={()=>handleChange(data)} value=\"checkedA\" />\n                                }\n                                label={data.name}\n                            />\n                           \n                            ))\n                        }\n                    </FormGroup>\n                </Grid> */}\n            </Grid>\n            <Grid container>\n                    {variant.metal_color === undefined ? null : variant.metal_color.map((value,index) => ( \n                    <Grid xs={12} container spacing={1} item>\n                    <Grid  xs={12}  item>\n\n                    <Typography component=\"h6\" variant=\"h6\" align=\"left\">\n                    {value.name}\n                    </Typography> \n                    </Grid>\n                    <Grid xs={12} sm={12} md={12} item>\n                    <FilePond  \n                                allowImageValidateSize\n                                imageValidateSizeMinWidth=\"2400\"\n                                imageValidateSizeMinHeight=\"2400\"\n                                imageValidateSizeMeasure={(file)=>new Promise((resolve,reject)=>{\n                                    console.log(file);\n                                    console.log('filepond property');\n                                    debugger;\n                                })}\n                                labelIdle=\"Upload Image\" \n                                allowMultiple={true}  \n                                //files = {files}\n                                onupdatefiles={fileItem => {\n                                    // Set currently active file objectsfiles to this.state\n                                    \n                                }}\n                                onaddfile={(error, fileItem)=> {\n                                    uploadimagetoserver(fileItem, index, value.name, \"add\")\n                                }}\n                                onremovefile={(error, fileItem)=>{\n\n                                }}\n                                fileRenameFunction={\n                                    (file) => new Promise(resolve => {\n                                    var prodid = prod_id;\n                                    let imagecolourobj = variant.product_images[value.name];\n                                    var imagecount  = 1;\n                                    if(imagecolourobj)\n                                    {\n                                        imagecount = imagecolourobj.length + 1;\n                                    }\n                                    let imagename = (prodid+\"_\"+(imagecount)+value.name.charAt(0))+file.extension;\n                                    resolve(imagename)\n                                    \n                                })\n                                } \n                                >\n                        </FilePond>\n                    </Grid>\n                    \n                    </Grid>\n                ))} \n            </Grid>\n        </Grid>\n    )\n\n}\n// export const ProductAttributes = withRouter(props => {\n\n//     const { productCtx, setProductCtx } = React.useContext(ProductContext);\n   \n//     const _content = <ProductProvider value={productCtx,setProductCtx}  >\n//       <CreateVariant {...props} />\n//     </ProductProvider>\n//     return _content\n\n//   });\nexport default CreateVariant;"]},"metadata":{},"sourceType":"module"}