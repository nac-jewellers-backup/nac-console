{"ast":null,"code":"import _objectSpread from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/manikandan/Downloads/Archive/src/screens/Productupload/AddressForm.js\";\nimport React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport clsx from 'clsx'; // import SelectPlaceholder from '../../components/SelectPlaceholder.js'\n\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { Input } from '../../components/Input.js';\nimport { ProductContext } from '../../context';\nimport \"./Productupload.css\";\nimport Select from 'react-select';\nimport \"./floating_dropdown.css\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { Card, CardHeader, Chip, CardContent, Divider, RadioGroup, Radio, FormLabel, FormControlLabel, Checkbox } from '@material-ui/core';\nimport { red } from '@material-ui/core/colors';\nconst top100Films = [{\n  title: 'The Shawshank Redemption',\n  year: 1994\n}, {\n  title: 'The Godfather',\n  year: 1972\n}, {\n  title: 'The Godfather: Part II',\n  year: 1974\n}, {\n  title: 'The Dark Knight',\n  year: 2008\n}, {\n  title: '12 Angry Men',\n  year: 1957\n}, {\n  title: \"Schindler's List\",\n  year: 1993\n}];\nconst useStyles = makeStyles(theme => ({\n  fixedTag: {\n    padding: 0,\n    '& .MuiOutlinedInput-root': {\n      padding: 0\n    }\n  },\n  dropdownlayout: {\n    '& .menu': {\n      position: \"Relative !important\"\n    }\n  },\n  helperinput: {\n    '& .MuiFormHelperText-root': {\n      color: \"#e53935\"\n    }\n  },\n  root: {\n    marginTop: theme.spacing(2)\n  },\n  alert: {\n    marginBottom: theme.spacing(3)\n  },\n  formGroup: {\n    marginBottom: theme.spacing(3)\n  },\n  fieldGroup: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  fieldHint: {\n    margin: theme.spacing(1, 0)\n  },\n  tags: {\n    marginTop: theme.spacing(1),\n    '& > * + *': {\n      marginLeft: theme.spacing(1)\n    }\n  },\n  flexGrow: {\n    flexGrow: 1\n  },\n  dateField: {\n    '& + &': {\n      marginLeft: theme.spacing(2)\n    }\n  }\n}));\nexport default function AddressForm(props) {\n  const _React$useContext = React.useContext(ProductContext),\n        productCtx = _React$useContext.productCtx,\n        setProductCtx = _React$useContext.setProductCtx;\n\n  const classes = useStyles();\n\n  const className = props.className,\n        rest = _objectWithoutProperties(props, [\"className\"]);\n\n  React.useEffect(() => {}, [productCtx]); // const handleChange = selectedOption => {\n  // };\n\n  const handlesizeChange = selectedOption => {\n    setProductCtx(_objectSpread({}, productCtx, {\n      selected_sizes: selectedOption\n    }));\n  };\n\n  const handlevendorChange = selectedOption => {\n    setProductCtx(_objectSpread({}, productCtx, {\n      vendorcode: selectedOption\n    }));\n  };\n\n  const changeproducttype = type => (event, newvalue) => {\n    setProductCtx(_objectSpread({}, productCtx, {\n      product_type: newvalue\n    }));\n  };\n\n  const handlechange = type => selectedOption => {\n    if (type === 'product_type') {\n      if (selectedOption) {\n        var size = \"\";\n        var minvalue = 0;\n        var maxvalue = 0;\n        var selected_sizes = [];\n        var default_size = 0;\n\n        if (selectedOption.shortCode === 'R' && productCtx.selectedgender.name === 'Male') {\n          minvalue = 13;\n          maxvalue = 25;\n          default_size = 15;\n        }\n\n        if (selectedOption.shortCode === 'R' && productCtx.selectedgender.name === 'Female') {\n          minvalue = 8;\n          maxvalue = 23;\n          default_size = 12;\n        }\n\n        for (var i = minvalue; i < maxvalue; i++) {\n          selected_sizes.push({\n            value: i,\n            label: \"\" + i\n          });\n        }\n\n        setProductCtx(_objectSpread({}, productCtx, {\n          product_type_shortcode: selectedOption.shortCode,\n          product_type: selectedOption,\n          size,\n          default_size,\n          selected_sizes\n        }));\n      } else {\n        setProductCtx(_objectSpread({}, productCtx, {\n          product_type_shortcode: \"\",\n          product_type: \"\",\n          size,\n          selected_sizes: \"\"\n        }));\n      }\n    } else {\n      setProductCtx(_objectSpread({}, productCtx, {\n        [type]: selectedOption\n      }));\n    }\n  };\n\n  const handleTextChange = type => e => {\n    setProductCtx(_objectSpread({}, productCtx, {\n      [type]: e.target.value\n    }));\n  };\n\n  const handleoptionChange = type => (event, value) => {\n    if (type === 'vendorcode') {\n      setProductCtx(_objectSpread({}, productCtx, {\n        [type]: value,\n        'vendorleadtime': value.vendorDelivaryDays\n      }));\n    } else {\n      setProductCtx(_objectSpread({}, productCtx, {\n        [type]: value\n      }));\n    }\n  };\n\n  const handleChange = event => {\n    setProductCtx(_objectSpread({}, productCtx, {\n      ['isreorderable']: event.target.value\n    }));\n  };\n\n  const purityChange = type => selectedOption => {\n    setProductCtx(_objectSpread({}, productCtx, {\n      [type]: selectedOption\n    }));\n  };\n\n  const handleGenderChange = type => (event, value) => {\n    var minvalue = 0;\n    var maxvalue = 0;\n    var selected_sizes = [];\n    var sizes = [];\n    var default_size = 0;\n\n    if (productCtx.product_type.shortCode === 'R' && value === 'Male') {\n      minvalue = 13;\n      maxvalue = 25;\n      default_size = '' + 15;\n    }\n\n    if (productCtx.product_type.shortCode === 'R' && value === 'Female') {\n      minvalue = 8;\n      maxvalue = 23;\n      default_size = '' + 12;\n    }\n\n    for (var i = minvalue; i < maxvalue; i++) {\n      selected_sizes.push('' + i);\n      sizes.push('' + i);\n    }\n\n    setProductCtx(_objectSpread({}, productCtx, {\n      [type]: value,\n      sizes,\n      selected_sizes,\n      default_size\n    }));\n  };\n\n  const handleMaterialChange = type => (event, value) => {\n    var steps = ['Step1', 'Step2', 'Step4', 'Step5', 'Step6'];\n\n    if (value) {\n      if (value.indexOf('Diamond') > -1 || value.indexOf('Gemstone') > -1) {\n        if (steps.indexOf('Step3') === -1) {\n          steps = ['Step1', 'Step2', 'Step3', 'Step6'];\n        }\n      }\n    }\n\n    setProductCtx(_objectSpread({}, productCtx, {\n      [type]: value,\n      steps\n    }));\n  };\n\n  const handleInputChange = type => e => {\n    var size = productCtx.size;\n    var materials = productCtx.materials;\n    var selected_sizes = productCtx.selected_sizes;\n\n    if (type === 'selectedgender') {\n      var minvalue = 0;\n      var maxvalue = 0;\n      selected_sizes = [];\n\n      if (productCtx.product_type_shortcode === 'R' && e.name === 'Male') {\n        size = \"13-25\";\n        minvalue = 13;\n        maxvalue = 26;\n      }\n\n      if (productCtx.product_type_shortcode === 'R' && e.name === 'Female') {\n        size = \"8-18\";\n        minvalue = 8;\n        maxvalue = 19;\n      }\n\n      for (var i = minvalue; i < maxvalue; i++) {\n        selected_sizes.push({\n          value: i,\n          label: \"\" + i\n        });\n      }\n    }\n\n    if (type === 'product_categoy') {\n      if (e.target.value === 'Platinum Jewellery') {\n        materials.push('Platinum Jewellery');\n        var index = materials.indexOf('Silver Jewellery');\n\n        if (index >= 0) {\n          materials.splice(index, 1);\n        }\n      } else if (e.target.value === 'Silver Jewellery') {\n        materials.push('Silver Jewellery');\n        var index1 = materials.indexOf('Platinum Jewellery');\n\n        if (index1 >= 0) {\n          materials.splice(index1, 1);\n        }\n      } else {\n        var indexval = materials.indexOf('Silver Jewellery');\n\n        if (indexval >= 0) {\n          materials.splice(indexval, 1);\n        }\n\n        indexval = materials.indexOf('Platinum Jewellery');\n\n        if (indexval >= 0) {\n          materials.splice(indexval, 1);\n        }\n      }\n    }\n\n    setProductCtx(_objectSpread({}, productCtx, {\n      size,\n      [type]: e,\n      materials,\n      selected_sizes\n    }));\n  };\n\n  const materialChange = type => selectedOption => {\n    //   let material = { ...productCtx.material, [type]: selectedOption }\n    var steps = ['Step1', 'Step2', 'Step4', 'Step5', 'Step6']; //   if(material.material)\n    //   {\n    //   material.material.forEach(element => {\n\n    let material_names = [];\n\n    if (selectedOption) {\n      selectedOption.forEach(element => {\n        material_names.push(element.name);\n\n        if (element.name === 'Diamond' || element.name === 'Gemstone') {\n          if (steps.indexOf('Step3') === -1) {\n            steps = ['Step1', 'Step2', 'Step3', 'Step6'];\n          }\n        }\n      });\n    } //   });\n    // }\n\n\n    setProductCtx(_objectSpread({}, productCtx, {\n      [type]: selectedOption,\n      steps,\n      material_names\n    }));\n  };\n\n  const keyPress = type => e => {\n    const re = /^[a-zA-Z\\b]+$/;\n\n    if (e.target.value === '' || re.test(e.target.value)) {\n      setProductCtx(_objectSpread({}, productCtx, {\n        [type]: e.target.value\n      }));\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363\n    },\n    __self: this\n  }, React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365\n    },\n    __self: this\n  }), React.createElement(CardHeader, {\n    title: \"Product Information 1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.cardcontent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373\n    },\n    __self: this\n  }, React.createElement(Input, {\n    className: classes.helperinput,\n    variant: \"outlined\",\n    margin: \"dense\",\n    fullWidth: true,\n    value: productCtx.productname,\n    id: \"productname\",\n    error: productCtx.error_message.productname // helperText={productCtx.error_message.productname ? productCtx.error_message.productname : \"\" }\n    ,\n    name: \"productname\",\n    label: \"Product Name\",\n    onChange: keyPress('productname'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    className: 'dropdownlayout',\n    xs: 12,\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"product_category\",\n    className: classes.fixedTag,\n    defaultValue: productCtx.product_categoy,\n    onChange: handleoptionChange('product_categoy'),\n    options: productCtx.masterData.category.map(option => option.label),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      label: option.label\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Select Product Category\",\n      margin: \"dense\",\n      error: productCtx.error_message.product_categoy,\n      variant: \"outlined\",\n      fullWidth: true,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"product_type\",\n    className: classes.fixedTag,\n    getOptionLabel: option => option.label,\n    defaultValue: productCtx.product_type,\n    options: productCtx.masterData.product_type,\n    onChange: handleoptionChange('product_type'),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      label: option.label\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Select Product Type\",\n      margin: \"dense\",\n      variant: \"outlined\",\n      error: productCtx.error_message.product_type,\n      fullWidth: true,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418\n    },\n    __self: this\n  })))))), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452\n    },\n    __self: this\n  }, productCtx.product_type ? React.createElement(React.Fragment, null, React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455\n    },\n    __self: this\n  }), React.createElement(CardHeader, {\n    title: \"Product Information 2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.cardcontent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462\n    },\n    __self: this\n  }, productCtx.product_type ? React.createElement(React.Fragment, null, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"free-solo-2-demo\",\n    multiple: true,\n    className: classes.fixedTag,\n    defaultValue: productCtx.material_names,\n    options: productCtx.masterData.material.map(option => option.label),\n    onChange: handleMaterialChange('material_names'),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      size: \"small\",\n      label: option\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Select Product Materials\",\n      margin: \"dense\",\n      variant: \"outlined\",\n      error: productCtx.error_message.material_names,\n      fullWidth: true,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466\n    },\n    __self: this\n  }))) : null, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"free-solo-2-demo\",\n    className: classes.fixedTag,\n    defaultValue: productCtx.selectedgender,\n    options: productCtx.masterData.gender.map(option => option.label),\n    onChange: handleGenderChange('selectedgender'),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      size: \"small\",\n      label: option\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Select Gender\",\n      margin: \"dense\",\n      error: productCtx.error_message.selectedgender,\n      variant: \"outlined\",\n      fullWidth: true,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    multiple: true,\n    id: \"free-solo-2-demo\",\n    className: classes.fixedTag,\n    getOptionLabel: option => option.label,\n    defaultValue: productCtx.metalpurity,\n    options: productCtx.masterData.metalpurity,\n    onChange: handleoptionChange('metalpurity'),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      size: \"small\",\n      label: option.label\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Metal Purity\",\n      margin: \"dense\",\n      variant: \"outlined\",\n      fullWidth: true,\n      error: productCtx.error_message.metalpurity,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    multiple: true,\n    id: \"free-solo-2-demo\",\n    className: classes.fixedTag,\n    getOptionLabel: option => option.label,\n    defaultValue: productCtx.metalcolour,\n    options: productCtx.masterData.metalcolour,\n    onChange: handleoptionChange('metalcolour'),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      size: \"small\",\n      label: option.label\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Metal Colour\",\n      margin: \"dense\",\n      variant: \"outlined\",\n      error: productCtx.error_message.metalcolour,\n      fullWidth: true,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560\n    },\n    __self: this\n  })))))) : null)), React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 594\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 596\n    },\n    __self: this\n  }, productCtx.product_type ? React.createElement(React.Fragment, null, React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 598\n    },\n    __self: this\n  }), React.createElement(CardHeader, {\n    title: \"Vendor Information\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 603\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.cardcontent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 604\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 605\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 606\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"free-solo-2-demo\",\n    className: classes.fixedTag,\n    defaultValue: productCtx.vendorcode,\n    getOptionLabel: option => option.label,\n    options: productCtx.masterData.vendorcode,\n    onChange: handleoptionChange('vendorcode'),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      label: option.label\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Select Vendor Code\",\n      margin: \"dense\",\n      variant: \"outlined\",\n      error: productCtx.error_message.vendorcode,\n      fullWidth: true,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 607\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632\n    },\n    __self: this\n  }, React.createElement(Input, {\n    variant: \"outlined\",\n    margin: \"dense\",\n    label: \"Vendor Product Code\",\n    fullWidth: true,\n    className: classes.helperinput,\n    value: productCtx.productvendorcode,\n    error: productCtx.error_message.productvendorcode,\n    id: \"productvendorcode\",\n    name: \"productvendorcode\",\n    onChange: handleTextChange('productvendorcode'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 647\n    },\n    __self: this\n  }, React.createElement(Input, {\n    variant: \"outlined\",\n    margin: \"dense\",\n    label: \"Vendor Lead Time\",\n    fullWidth: true,\n    className: classes.helperinput,\n    error: productCtx.error_message.vendorleadtime,\n    value: productCtx.vendorleadtime,\n    InputLabelProps: {\n      shrink: productCtx.vendorleadtime\n    },\n    id: \"vendorleadtime\",\n    name: \"vendorleadtime\",\n    onChange: handleTextChange('vendorleadtime'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 648\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 663\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    component: \"fieldset\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    component: \"legend\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 666\n    },\n    __self: this\n  }, \"IsReorderable\"), React.createElement(RadioGroup, {\n    \"aria-label\": \"position\",\n    name: \"position\",\n    value: productCtx.isreorderable,\n    onChange: handleChange,\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 667\n    },\n    __self: this\n  }, React.createElement(FormControlLabel, {\n    value: \"Yes\",\n    control: React.createElement(Radio, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }),\n    label: \"Yes\",\n    labelPlacement: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 668\n    },\n    __self: this\n  }), React.createElement(FormControlLabel, {\n    value: \"No\",\n    control: React.createElement(Radio, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }),\n    label: \"No\",\n    labelPlacement: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 676\n    },\n    __self: this\n  }))))))), \" \") : null), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 692\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 693\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 694\n    },\n    __self: this\n  }, productCtx.product_type ? React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 698\n    },\n    __self: this\n  }), React.createElement(CardHeader, {\n    title: \"Default SKU For Display \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 702\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 704\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.cardcontent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 705\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    xs: 12,\n    alignItems: \"center\",\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 706\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 711\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"product_category\",\n    className: classes.fixedTag,\n    defaultValue: productCtx.default_metal_colour,\n    onChange: handleoptionChange('default_metal_colour'),\n    options: productCtx.metalcolour.map(option => option.label),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      size: \"small\",\n      label: option.label\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Metal Colour\",\n      margin: \"dense\",\n      variant: \"outlined\",\n      fullWidth: true,\n      error: productCtx.error_message.default_metal_colour,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 713\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 738\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"product_category\",\n    className: classes.fixedTag,\n    defaultValue: productCtx.default_metal_purity,\n    onChange: handleoptionChange('default_metal_purity'),\n    options: productCtx.metalpurity.map(option => option.label),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      size: \"small\",\n      label: option.label\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Metal Purity\",\n      margin: \"dense\",\n      error: productCtx.error_message.default_metal_purity,\n      variant: \"outlined\",\n      fullWidth: true,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 741\n    },\n    __self: this\n  }))))) : null)), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 773\n    },\n    __self: this\n  }, productCtx.product_type && productCtx.product_type.shortCode === 'R' && productCtx.sizes.length > 0 ? React.createElement(React.Fragment, null, React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 776\n    },\n    __self: this\n  }), React.createElement(CardHeader, {\n    title: \"Size Information\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 780\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 781\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.cardcontent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 782\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 783\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 784\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"free-solo-2-demo\",\n    multiple: true,\n    freeSolo: true,\n    className: classes.fixedTag,\n    defaultValue: productCtx.selected_sizes,\n    options: productCtx.sizes,\n    onChange: handleoptionChange('selected_sizes'),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      size: \"small\",\n      label: option\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Ring Sizes\",\n      margin: \"dense\",\n      variant: \"outlined\",\n      fullWidth: true,\n      error: productCtx.error_message.selected_sizes,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 786\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 815\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"product_type\",\n    className: classes.fixedTag,\n    freeSolo: true,\n    defaultValue: productCtx.default_size,\n    options: productCtx.selected_sizes,\n    onChange: handleoptionChange('default_size'),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      size: \"small\",\n      label: option\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Select Default Size\",\n      margin: \"dense\",\n      variant: \"outlined\",\n      fullWidth: true,\n      error: productCtx.error_message.default_size,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 817\n    },\n    __self: this\n  }))))), \" \") : null), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 849\n    },\n    __self: this\n  }, productCtx.product_type && productCtx.product_type.alias === 'Earrings' ? React.createElement(React.Fragment, null, React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 851\n    },\n    __self: this\n  }), React.createElement(CardHeader, {\n    title: \"Type of Fit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 855\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 856\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.cardcontent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 857\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 858\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 860\n    },\n    __self: this\n  }, React.createElement(Autocomplete, {\n    id: \"free-solo-2-demo\",\n    className: classes.fixedTag,\n    defaultValue: productCtx.earringbacking,\n    options: productCtx.masterData.earringbacking.map(option => option.label),\n    onChange: handleoptionChange('earringbacking'),\n    renderTags: (value, getTagProps) => value.map((option, index) => React.createElement(Chip, Object.assign({\n      variant: \"outlined\",\n      label: option.label\n    }, getTagProps({\n      index\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870\n      },\n      __self: this\n    }))),\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      label: \"Earring Backing\",\n      margin: \"dense\",\n      variant: \"outlined\",\n      fullWidth: true,\n      error: productCtx.error_message.earringbacking,\n      InputProps: _objectSpread({}, params.InputProps, {\n        type: 'search'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 874\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 862\n    },\n    __self: this\n  }))))), \" \") : null))), React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 894\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/home/manikandan/Downloads/Archive/src/screens/Productupload/AddressForm.js"],"names":["React","useState","Grid","Box","clsx","TextField","makeStyles","FormControl","FormHelperText","Input","ProductContext","Select","Autocomplete","Card","CardHeader","Chip","CardContent","Divider","RadioGroup","Radio","FormLabel","FormControlLabel","Checkbox","red","top100Films","title","year","useStyles","theme","fixedTag","padding","dropdownlayout","position","helperinput","color","root","marginTop","spacing","alert","marginBottom","formGroup","fieldGroup","display","alignItems","fieldHint","margin","tags","marginLeft","flexGrow","dateField","AddressForm","props","useContext","productCtx","setProductCtx","classes","className","rest","useEffect","handlesizeChange","selectedOption","selected_sizes","handlevendorChange","vendorcode","changeproducttype","type","event","newvalue","product_type","handlechange","size","minvalue","maxvalue","default_size","shortCode","selectedgender","name","i","push","value","label","product_type_shortcode","handleTextChange","e","target","handleoptionChange","vendorDelivaryDays","handleChange","purityChange","handleGenderChange","sizes","handleMaterialChange","steps","indexOf","handleInputChange","materials","index","splice","index1","indexval","materialChange","material_names","forEach","element","keyPress","re","test","cardcontent","productname","error_message","product_categoy","masterData","category","map","option","getTagProps","params","InputProps","material","gender","metalpurity","metalcolour","productvendorcode","vendorleadtime","shrink","isreorderable","default_metal_colour","default_metal_purity","length","alias","earringbacking"],"mappings":"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","sourcesContent":["import React,{ useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport clsx from 'clsx';\n\n// import SelectPlaceholder from '../../components/SelectPlaceholder.js'\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport {Input} from '../../components/Input.js'\nimport { ProductContext } from '../../context';\nimport \"./Productupload.css\"\nimport Select from 'react-select';\nimport \"./floating_dropdown.css\"\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n  Card,\n  CardHeader,\n  Chip,\n  CardContent,\n  Divider,\n  RadioGroup,\n  Radio,\n  FormLabel,\n  FormControlLabel,\n  Checkbox\n} from '@material-ui/core';\nimport { red } from '@material-ui/core/colors';\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 }\n]\nconst useStyles = makeStyles(theme => ({\n  fixedTag: {\n    padding: 0,\n    '& .MuiOutlinedInput-root':{\n      padding: 0,\n    }\n  },\n  dropdownlayout: {\n    '& .menu':{\n      position: \"Relative !important\",\n    }\n  },\n  helperinput: {\n    '& .MuiFormHelperText-root':{\n      color: \"#e53935\",\n    }\n  },\n  \n  root: {\n    marginTop: theme.spacing(2)\n  },\n  alert: {\n    marginBottom: theme.spacing(3)\n  },\n  formGroup: {\n    marginBottom: theme.spacing(3)\n  },\n  fieldGroup: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  fieldHint: {\n    margin: theme.spacing(1, 0)\n  },\n  tags: {\n    marginTop: theme.spacing(1),\n    '& > * + *': {\n      marginLeft: theme.spacing(1)\n    }\n  },\n  flexGrow: {\n    flexGrow: 1\n  },\n  dateField: {\n    '& + &': {\n      marginLeft: theme.spacing(2)\n    }\n  }\n}));\n\n  \nexport default function AddressForm(props) {\n    const { productCtx, setProductCtx } = React.useContext(ProductContext);\n    const classes = useStyles();\n    const { className, ...rest } = props;\n\n    React.useEffect(() => {\n    },[productCtx])\n    // const handleChange = selectedOption => {\n    \n    // };\n    const handlesizeChange  = selectedOption => {\n      setProductCtx({ ...productCtx, selected_sizes: selectedOption })\n    };\n    const handlevendorChange  = selectedOption => {\n      setProductCtx({ ...productCtx, vendorcode: selectedOption})\n    };\n   \n    const changeproducttype = type => (event, newvalue) => {\n      setProductCtx({ ...productCtx, product_type: newvalue})\n\n    }\n    const handlechange = type =>  selectedOption => {\n      if(type === 'product_type')\n      {\n        if(selectedOption)\n        {\n          var size = \"\";\n      var minvalue = 0;\n      var maxvalue = 0;\n      var selected_sizes = [];\n      var default_size = 0;\n\n      if(selectedOption.shortCode === 'R' && productCtx.selectedgender.name === 'Male')\n      {\n        minvalue = 13\n        maxvalue = 25\n        default_size = 15\n      }\n      if(selectedOption.shortCode === 'R' && productCtx.selectedgender.name === 'Female')\n      {\n        minvalue = 8\n       maxvalue = 23\n       default_size = 12\n      }\n      \n      for(var i=minvalue; i<maxvalue;i++)\n      {\n        selected_sizes.push(\n          {\n            value:i,\n            label:\"\"+i\n          }\n        )\n      }\n      \n      setProductCtx({ ...productCtx, product_type_shortcode: selectedOption.shortCode,product_type:selectedOption, size,default_size,selected_sizes })\n        }else{\n          setProductCtx({ ...productCtx, product_type_shortcode: \"\",product_type:\"\", size,selected_sizes: \"\" })\n\n        }  \n    }else{\n        setProductCtx({ ...productCtx, [type]: selectedOption})\n\n      }\n    };\n    const handleTextChange = type => e => {\n      setProductCtx({ ...productCtx, [type]: e.target.value})\n\n    }\n    const handleoptionChange = type => (event, value) => {\n     \n      if(type === 'vendorcode')\n      {\n        setProductCtx({ ...productCtx, [type]: value,'vendorleadtime':value.vendorDelivaryDays})\n\n      }else\n      {\n        setProductCtx({ ...productCtx, [type]: value})\n\n      }\n\n    }\n\n\n    const handleChange = event => {\n    \n        setProductCtx({ ...productCtx, ['isreorderable']: event.target.value})\n\n     \n\n    };\n\n\n    const purityChange = type => selectedOption => {\n      setProductCtx({ ...productCtx, [type]:selectedOption })\n  \n    }\n \n\n    const handleGenderChange = type => (event, value)  => {\n      var minvalue = 0;\n      var maxvalue = 0;\n      var selected_sizes=[]\n      var sizes = [];\n      var default_size = 0\n    if(productCtx.product_type.shortCode === 'R' && value === 'Male')\n    {\n      minvalue = 13\n      maxvalue = 25\n      default_size = ''+15\n    }\n    if(productCtx.product_type.shortCode === 'R' && value === 'Female')\n    {\n     minvalue = 8\n      maxvalue = 23\n      default_size = ''+12\n\n    }\n\n    for(var i=minvalue; i<maxvalue;i++)\n    {\n      selected_sizes.push(\n        ''+i\n      )\n      sizes.push(\n        ''+i\n      )\n    }\n    setProductCtx({ ...productCtx,  [type]: value,sizes, selected_sizes,default_size })\n\n    }\n\n    \n\n\n\n    const handleMaterialChange = type => (event, value)  => {\n      var steps = ['Step1', 'Step2','Step4','Step5','Step6']\n      if(value)\n      {\n      if(value.indexOf('Diamond' ) > -1 || value.indexOf('Gemstone' ) > -1 )\n            {\n            \n            if(steps.indexOf('Step3') === -1)\n            {\n              steps = ['Step1', 'Step2','Step3','Step6']\n\n            }\n\n          }\n        }\n      setProductCtx({ ...productCtx, [type]:value,steps})\n\n    }\n\n    const handleInputChange = type => e => {\n\n                var size = productCtx.size;\n                var materials = productCtx.materials;\n                var selected_sizes = productCtx.selected_sizes;\n\n            if(type === 'selectedgender')\n                {\n                  var minvalue = 0;\n                  var maxvalue = 0;\n                  selected_sizes=[]\n                if(productCtx.product_type_shortcode === 'R' && e.name === 'Male')\n                {\n                  size = \"13-25\"\n                  minvalue = 13\n                  maxvalue = 26\n                }\n                if(productCtx.product_type_shortcode === 'R' && e.name === 'Female')\n                {\n                 size = \"8-18\"\n                 minvalue = 8\n                  maxvalue = 19\n\n                }\n\n                for(var i=minvalue; i<maxvalue;i++)\n                {\n                  selected_sizes.push(\n                    {\n                      value:i,\n                      label:\"\"+i\n                    }\n                  )\n                }\n              }\n\n              if(type === 'product_categoy')\n              {\n                  if(e.target.value === 'Platinum Jewellery')\n                  {\n                    materials.push('Platinum Jewellery')\n                    var index = materials.indexOf('Silver Jewellery');\n\n                    if(index >= 0)\n                    {\n                        materials.splice(index, 1)\n                    }\n                  }else if(e.target.value === 'Silver Jewellery')\n                  {\n                    materials.push('Silver Jewellery')\n                    var index1 = materials.indexOf('Platinum Jewellery');\n                    if(index1 >= 0)\n                    {\n                      materials.splice(index1, 1)\n                    }\n                  }else{\n                    var indexval = materials.indexOf('Silver Jewellery');\n\n                    if(indexval >= 0)\n                    {\n                        materials.splice(indexval, 1)\n                    }\n                    indexval = materials.indexOf('Platinum Jewellery');\n                    if(indexval >= 0)\n                    {\n                      materials.splice(indexval, 1)\n                    }\n                  }\n              }\n\n               setProductCtx({ ...productCtx, size ,[type]: e, materials, selected_sizes })\n\n              \n      }\n\n\n    const materialChange = type => selectedOption => {\n      //   let material = { ...productCtx.material, [type]: selectedOption }\n        var steps = ['Step1', 'Step2','Step4','Step5','Step6']\n      //   if(material.material)\n      //   {\n      //   material.material.forEach(element => {\n        let material_names = []\n          if(selectedOption)\n          {\n\n            selectedOption.forEach(element => {\n              material_names.push(element.name)\n            if(element.name === 'Diamond' || element.name === 'Gemstone' )\n            {\n            \n            if(steps.indexOf('Step3') === -1)\n            {\n              steps = ['Step1', 'Step2','Step3','Step6']\n\n            }\n\n          }\n            });\n            \n        }\n      //   });\n      // }\n\n        setProductCtx({ ...productCtx, [type]:selectedOption, steps,material_names })\n\n    }\n   const keyPress =type => e => {\n      const re = /^[a-zA-Z\\b]+$/;\n      if (e.target.value === '' || re.test(e.target.value)) {\n        setProductCtx({ ...productCtx, [type]: e.target.value})\n      }\n      \n   }\n    \n  return (\n    <>\n    <div>\n    <Grid container  spacing={1}>  \n    <Grid item xs={12} sm={6} spacing={1}>\n\n      <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Product Information 1\" />\n      <Divider />\n      <CardContent className={classes.cardcontent}>\n      <Grid container  spacing={1}>  \n      <Grid item xs={12} sm={12} spacing={1}>\n                      <Input\n                          className={classes.helperinput}\n                          variant=\"outlined\"\n                          margin=\"dense\"\n                          fullWidth\n                          value={productCtx.productname}\n                          id=\"productname\"\n                          error = {productCtx.error_message.productname}\n                         // helperText={productCtx.error_message.productname ? productCtx.error_message.productname : \"\" }\n                          name=\"productname\"\n                          label=\"Product Name\"\n                          onChange={keyPress('productname')}\n                          />\n          \n      </Grid> \n            <Grid item   className={'dropdownlayout'} xs={12} sm={6}>\n                  <Autocomplete\n                      id=\"product_category\"\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.product_categoy}\n                      onChange={handleoptionChange('product_categoy')}\n                      options={productCtx.masterData.category.map(option => option.label)}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" label={option.label} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Select Product Category\"\n                        margin=\"dense\"\n                        error = {productCtx.error_message.product_categoy}\n                        variant=\"outlined\"\n                        fullWidth\n\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n\n            </Grid>\n      <Grid    item xs={12} sm={6} spacing={1}>\n            \n                  <Autocomplete\n                    id=\"product_type\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    defaultValue={productCtx.product_type}\n                    options={productCtx.masterData.product_type}\n                    onChange={handleoptionChange('product_type')}\n                    \n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Select Product Type\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    error = {productCtx.error_message.product_type}\n                    fullWidth\n\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                  />\n            </Grid>\n\n     \n          \n      </Grid>\n      </CardContent>\n      </Card>\n      </Grid>\n      <Grid item xs={12} sm={6}>\n\n      { productCtx.product_type ? <>\n      <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Product Information 2\" />\n      <Divider />\n      <CardContent className={classes.cardcontent}>\n      <Grid container spacing={1}>   \n      { productCtx.product_type ? <>              \n              <Grid item xs={12} sm={6}>\n  \n                  <Autocomplete\n                      id=\"free-solo-2-demo\"\n                      multiple\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.material_names}\n                      options={productCtx.masterData.material.map(option => option.label)}\n                      onChange={handleMaterialChange('material_names')}\n\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                      }\n                      renderInput={params => (\n                      <TextField\n                      {...params}\n                      label=\"Select Product Materials\"\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      error = {productCtx.error_message.material_names}\n                      fullWidth\n  \n                      InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                      )}\n                      />\n              </Grid>\n           \n          \n  \n          \n  \n                </> : null } \n                <Grid item xs={12} sm={6}>\n                         <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    defaultValue={productCtx.selectedgender}\n                    options={productCtx.masterData.gender.map(option => option.label)}\n                    onChange={handleGenderChange('selectedgender')}\n\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Select Gender\"\n                    margin=\"dense\"\n                    error = {productCtx.error_message.selectedgender}\n\n                    variant=\"outlined\"\n                    fullWidth\n\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n                  {/* <FormHelperText error>{productCtx.error_message.selectedgender ? productCtx.error_message.earringbacking : \"\"}</FormHelperText> */}\n\n            </Grid>  \n      <Grid item xs={6} sm={6}>      \n                  <Autocomplete\n                    multiple\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel = {option => option.label}\n                    defaultValue={productCtx.metalpurity}\n                    options={productCtx.masterData.metalpurity}\n                    onChange={handleoptionChange('metalpurity')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Metal Purity\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    error = {productCtx.error_message.metalpurity}\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n                {/* <FormHelperText error>{productCtx.error_message.material ? productCtx.error_message.material : \"\"}</FormHelperText> */}\n          \n        </Grid>\n        <Grid item xs={6} sm={6}>\n      \n                <Autocomplete\n                    multiple\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    defaultValue={productCtx.metalcolour}\n                    options={productCtx.masterData.metalcolour}\n                    onChange={handleoptionChange('metalcolour')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Metal Colour\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    error = {productCtx.error_message.metalcolour}\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n      \n</Grid>\n      \n        </Grid>\n      </CardContent>\n      </Card>\n      </> : null}\n</Grid>\n</Grid>\n<Grid container  spacing={1}>  \n\n<Grid item xs={12} sm={6}>\n{ productCtx.product_type ? <>\n  <Card\n  {...rest}\n  className={clsx(classes.root, className)}\n>\n  <CardHeader title=\"Vendor Information\" />\n  <Divider />\n  <CardContent className={classes.cardcontent}>\n      <Grid container  spacing={1}>  \n      <Grid item xs={12} sm={6}>\n                  <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    defaultValue={productCtx.vendorcode}\n                    getOptionLabel={option => option.label}\n                    options={productCtx.masterData.vendorcode}\n                    onChange={handleoptionChange('vendorcode')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Select Vendor Code\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    error = {productCtx.error_message.vendorcode}\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n            </Grid> \n            <Grid item xs={12} sm={6} spacing={1}>\n                    <Input\n                      variant=\"outlined\"\n                      margin=\"dense\"\n                      label=\"Vendor Product Code\"\n                      fullWidth\n                      className={classes.helperinput} \n                      value={productCtx.productvendorcode}\n                      error = {productCtx.error_message.productvendorcode}\n                      id=\"productvendorcode\"\n                      name=\"productvendorcode\"\n                      onChange={handleTextChange('productvendorcode')}\n                      />\n\n          </Grid>\n          <Grid item xs={12} sm={6} spacing={1}>\n                    <Input\n                      variant=\"outlined\"\n                      margin=\"dense\"\n                      label=\"Vendor Lead Time\"\n                      fullWidth\n                      className={classes.helperinput} \n                      error = {productCtx.error_message.vendorleadtime}\n                      value={productCtx.vendorleadtime}\n                      InputLabelProps={{ shrink: productCtx.vendorleadtime }}\n                      id=\"vendorleadtime\"\n                      name=\"vendorleadtime\"\n                      onChange={handleTextChange('vendorleadtime')}\n                      />\n\n          </Grid>\n          <Grid item xs={12} sm={6} spacing={1}>\n\n          <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\">IsReorderable</FormLabel>\n          <RadioGroup aria-label=\"position\" name=\"position\" value={productCtx.isreorderable} onChange={handleChange} row>\n            <FormControlLabel\n              value=\"Yes\"\n              \n              control={<Radio color=\"primary\" \n               />}\n              label=\"Yes\"\n              labelPlacement=\"right\"\n            />\n            <FormControlLabel\n              value=\"No\"\n              control={<Radio  color=\"primary\" />}\n              label=\"No\"\n              labelPlacement=\"right\"\n            />\n            </RadioGroup>\n            </FormControl>\n      </Grid>\n      </Grid>\n      </CardContent>\n      </Card> </>: null}\n\n\n\n   </Grid>\n    <Grid item xs={12} sm={6}>\n    <Grid container  spacing={1}> \n    <Grid item xs={12} sm={12}>\n\n{ productCtx.product_type ? \n\n  <Card\n    {...rest}\n    className={clsx(classes.root, className)}\n  >\n    <CardHeader title=\"Default SKU For Display\n  \" />\n    <Divider />\n    <CardContent className={classes.cardcontent}>\n      <Grid container xs={12} alignItems=\"center\" spacing={2}>\n      \n      \n      \n      \n      <Grid item xs={6} >\n  \n                    <Autocomplete\n                        id=\"product_category\"\n                        className={classes.fixedTag}\n                        defaultValue={productCtx.default_metal_colour}\n                        onChange={handleoptionChange('default_metal_colour')}\n                        options={productCtx.metalcolour.map(option => option.label)}\n                        renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                          <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                        ))\n                      }\n                      renderInput={params => (\n                        <TextField\n                          {...params}\n                          label=\"Metal Colour\"\n                          margin=\"dense\"\n                          variant=\"outlined\"\n                          fullWidth\n                          error = {productCtx.error_message.default_metal_colour}\n  \n                          InputProps={{ ...params.InputProps, type: 'search' }}\n                        />\n                      )}\n                    />\n      </Grid>\n      <Grid item xs={6} >\n             \n  \n                  <Autocomplete\n                        id=\"product_category\"\n                        className={classes.fixedTag}\n                        defaultValue={productCtx.default_metal_purity}\n                        onChange={handleoptionChange('default_metal_purity')}\n                        options={productCtx.metalpurity.map(option => option.label)}\n                        renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                          <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                        ))\n                      }\n                      renderInput={params => (\n                        <TextField\n                          {...params}\n                          label=\"Metal Purity\"\n                          margin=\"dense\"\n                          error = {productCtx.error_message.default_metal_purity}\n                          variant=\"outlined\"\n                          fullWidth\n  \n                          InputProps={{ ...params.InputProps, type: 'search' }}\n                        />\n                      )}\n                    />\n     \n      </Grid>\n      </Grid>\n      </CardContent>\n      </Card> : null }\n      \n    </Grid>\n    </Grid> \n    <Grid item xs={12} sm={12}>\n\n    {(productCtx.product_type && productCtx.product_type.shortCode  === 'R' && productCtx.sizes.length > 0 ) ? <>\n  <Card\n  {...rest}\n  className={clsx(classes.root, className)}\n>\n  <CardHeader title=\"Size Information\" />\n  <Divider />\n  <CardContent className={classes.cardcontent}>\n      <Grid container spacing={1}> \n      <Grid item xs={6} >\n               \n               <Autocomplete\n                       id=\"free-solo-2-demo\"\n                       multiple\n                       freeSolo\n                       className={classes.fixedTag}\n                       defaultValue={productCtx.selected_sizes}\n                       options={productCtx.sizes}\n                       onChange={handleoptionChange('selected_sizes')}\n                       renderTags={(value, getTagProps) =>\n                       value.map((option, index) => (\n                       <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                       ))\n                       }\n                       renderInput={params => (\n                       <TextField\n                       {...params}\n                       label=\"Ring Sizes\"\n                       margin=\"dense\"\n                       variant=\"outlined\"\n                       fullWidth\n                       error = {productCtx.error_message.selected_sizes}\n\n                       InputProps={{ ...params.InputProps, type: 'search' }}\n                       />\n                       )}\n                       />\n               </Grid> \n\n\n               <Grid item xs={6} >\n               \n               <Autocomplete\n                    id=\"product_type\"\n                    className={classes.fixedTag}\n                    freeSolo\n                    defaultValue={productCtx.default_size}\n                    options={productCtx.selected_sizes}\n                    onChange={handleoptionChange('default_size')}\n                    renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                      }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Select Default Size\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    error = {productCtx.error_message.default_size}\n\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                  />\n               </Grid> \n     \n      \n      </Grid>\n          </CardContent>\n      </Card> </>: null}\n    </Grid>\n    <Grid item xs={12} sm={12}>\n{ (productCtx.product_type && productCtx.product_type.alias  === 'Earrings') ? <>\n  <Card\n  {...rest}\n  className={clsx(classes.root, className)}\n>\n  <CardHeader title=\"Type of Fit\" />\n  <Divider />\n  <CardContent className={classes.cardcontent}>\n      <Grid container spacing={1}>  \n      \n        <Grid item xs={12} >\n               \n            <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    defaultValue={productCtx.earringbacking}\n                    options={productCtx.masterData.earringbacking.map(option => option.label)}\n                    onChange={handleoptionChange('earringbacking')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Earring Backing\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    error = {productCtx.error_message.earringbacking}\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n            </Grid>\n      </Grid>\n          </CardContent>\n      </Card> </>: null}\n\n      </Grid>\n   \n    </Grid>\n</Grid>\n<Grid container  spacing={1}>  \n    \n</Grid>\n   \n      \n\n            \n\n\n               \n      </div>\n\n     </>\n  );\n}"]},"metadata":{},"sourceType":"module"}