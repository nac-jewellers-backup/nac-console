{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.default = createPlotlyRenderers;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _Utilities = require('./Utilities');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable react/prop-types */\n// eslint can't see inherited propTypes!\n\n\nfunction makeRenderer(PlotlyComponent) {\n  var traceOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var layoutOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var transpose = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  var Renderer = function (_React$PureComponent) {\n    _inherits(Renderer, _React$PureComponent);\n\n    function Renderer() {\n      _classCallCheck(this, Renderer);\n\n      return _possibleConstructorReturn(this, (Renderer.__proto__ || Object.getPrototypeOf(Renderer)).apply(this, arguments));\n    }\n\n    _createClass(Renderer, [{\n      key: 'render',\n      value: function render() {\n        var pivotData = new _Utilities.PivotData(this.props);\n        var rowKeys = pivotData.getRowKeys();\n        var colKeys = pivotData.getColKeys();\n        var traceKeys = transpose ? colKeys : rowKeys;\n\n        if (traceKeys.length === 0) {\n          traceKeys.push([]);\n        }\n\n        var datumKeys = transpose ? rowKeys : colKeys;\n\n        if (datumKeys.length === 0) {\n          datumKeys.push([]);\n        }\n\n        var fullAggName = this.props.aggregatorName;\n        var numInputs = this.props.aggregators[fullAggName]([])().numInputs || 0;\n\n        if (numInputs !== 0) {\n          fullAggName += ' of ' + this.props.vals.slice(0, numInputs).join(', ');\n        }\n\n        var data = traceKeys.map(function (traceKey) {\n          var values = [];\n          var labels = [];\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = datumKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var datumKey = _step.value;\n              var val = parseFloat(pivotData.getAggregator(transpose ? datumKey : traceKey, transpose ? traceKey : datumKey).value());\n              values.push(isFinite(val) ? val : null);\n              labels.push(datumKey.join('-') || ' ');\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          var trace = {\n            name: traceKey.join('-') || fullAggName\n          };\n\n          if (traceOptions.type === 'pie') {\n            trace.values = values;\n            trace.labels = labels.length > 1 ? labels : [fullAggName];\n          } else {\n            trace.x = transpose ? values : labels;\n            trace.y = transpose ? labels : values;\n          }\n\n          return Object.assign(trace, traceOptions);\n        });\n        var titleText = fullAggName;\n        var hAxisTitle = transpose ? this.props.rows.join('-') : this.props.cols.join('-');\n        var groupByTitle = transpose ? this.props.cols.join('-') : this.props.rows.join('-');\n\n        if (hAxisTitle !== '') {\n          titleText += ' vs ' + hAxisTitle;\n        }\n\n        if (groupByTitle !== '') {\n          titleText += ' by ' + groupByTitle;\n        }\n\n        var layout = {\n          title: titleText,\n          hovermode: 'closest',\n\n          /* eslint-disable no-magic-numbers */\n          width: window.innerWidth / 1.5,\n          height: window.innerHeight / 1.4 - 50\n          /* eslint-enable no-magic-numbers */\n\n        };\n\n        if (traceOptions.type === 'pie') {\n          var columns = Math.ceil(Math.sqrt(data.length));\n          var rows = Math.ceil(data.length / columns);\n          layout.grid = {\n            columns: columns,\n            rows: rows\n          };\n          data.forEach(function (d, i) {\n            d.domain = {\n              row: Math.floor(i / columns),\n              column: i - columns * Math.floor(i / columns)\n            };\n\n            if (data.length > 1) {\n              d.title = d.name;\n            }\n          });\n\n          if (data[0].labels.length === 1) {\n            layout.showlegend = false;\n          }\n        } else {\n          layout.xaxis = {\n            title: transpose ? fullAggName : null,\n            automargin: true\n          };\n          layout.yaxis = {\n            title: transpose ? null : fullAggName,\n            automargin: true\n          };\n        }\n\n        return _react2.default.createElement(PlotlyComponent, {\n          data: data,\n          layout: Object.assign(layout, layoutOptions, this.props.plotlyOptions),\n          config: this.props.plotlyConfig,\n          onUpdate: this.props.onRendererUpdate\n        });\n      }\n    }]);\n\n    return Renderer;\n  }(_react2.default.PureComponent);\n\n  Renderer.defaultProps = Object.assign({}, _Utilities.PivotData.defaultProps, {\n    plotlyOptions: {},\n    plotlyConfig: {}\n  });\n  Renderer.propTypes = Object.assign({}, _Utilities.PivotData.propTypes, {\n    plotlyOptions: _propTypes2.default.object,\n    plotlyConfig: _propTypes2.default.object,\n    onRendererUpdate: _propTypes2.default.func\n  });\n  return Renderer;\n}\n\nfunction makeScatterRenderer(PlotlyComponent) {\n  var Renderer = function (_React$PureComponent2) {\n    _inherits(Renderer, _React$PureComponent2);\n\n    function Renderer() {\n      _classCallCheck(this, Renderer);\n\n      return _possibleConstructorReturn(this, (Renderer.__proto__ || Object.getPrototypeOf(Renderer)).apply(this, arguments));\n    }\n\n    _createClass(Renderer, [{\n      key: 'render',\n      value: function render() {\n        var pivotData = new _Utilities.PivotData(this.props);\n        var rowKeys = pivotData.getRowKeys();\n        var colKeys = pivotData.getColKeys();\n\n        if (rowKeys.length === 0) {\n          rowKeys.push([]);\n        }\n\n        if (colKeys.length === 0) {\n          colKeys.push([]);\n        }\n\n        var data = {\n          x: [],\n          y: [],\n          text: [],\n          type: 'scatter',\n          mode: 'markers'\n        };\n        rowKeys.map(function (rowKey) {\n          colKeys.map(function (colKey) {\n            var v = pivotData.getAggregator(rowKey, colKey).value();\n\n            if (v !== null) {\n              data.x.push(colKey.join('-'));\n              data.y.push(rowKey.join('-'));\n              data.text.push(v);\n            }\n          });\n        });\n        var layout = {\n          title: this.props.rows.join('-') + ' vs ' + this.props.cols.join('-'),\n          hovermode: 'closest',\n\n          /* eslint-disable no-magic-numbers */\n          xaxis: {\n            title: this.props.cols.join('-'),\n            automargin: true\n          },\n          yaxis: {\n            title: this.props.rows.join('-'),\n            automargin: true\n          },\n          width: window.innerWidth / 1.5,\n          height: window.innerHeight / 1.4 - 50\n          /* eslint-enable no-magic-numbers */\n\n        };\n        return _react2.default.createElement(PlotlyComponent, {\n          data: [data],\n          layout: Object.assign(layout, this.props.plotlyOptions),\n          config: this.props.plotlyConfig,\n          onUpdate: this.props.onRendererUpdate\n        });\n      }\n    }]);\n\n    return Renderer;\n  }(_react2.default.PureComponent);\n\n  Renderer.defaultProps = Object.assign({}, _Utilities.PivotData.defaultProps, {\n    plotlyOptions: {},\n    plotlyConfig: {}\n  });\n  Renderer.propTypes = Object.assign({}, _Utilities.PivotData.propTypes, {\n    plotlyOptions: _propTypes2.default.object,\n    plotlyConfig: _propTypes2.default.object,\n    onRendererUpdate: _propTypes2.default.func\n  });\n  return Renderer;\n}\n\nfunction createPlotlyRenderers(PlotlyComponent) {\n  return {\n    'Grouped Column Chart': makeRenderer(PlotlyComponent, {\n      type: 'bar'\n    }, {\n      barmode: 'group'\n    }),\n    'Stacked Column Chart': makeRenderer(PlotlyComponent, {\n      type: 'bar'\n    }, {\n      barmode: 'relative'\n    }),\n    'Grouped Bar Chart': makeRenderer(PlotlyComponent, {\n      type: 'bar',\n      orientation: 'h'\n    }, {\n      barmode: 'group'\n    }, true),\n    'Stacked Bar Chart': makeRenderer(PlotlyComponent, {\n      type: 'bar',\n      orientation: 'h'\n    }, {\n      barmode: 'relative'\n    }, true),\n    'Line Chart': makeRenderer(PlotlyComponent),\n    'Dot Chart': makeRenderer(PlotlyComponent, {\n      mode: 'markers'\n    }, {}, true),\n    'Area Chart': makeRenderer(PlotlyComponent, {\n      stackgroup: 1\n    }),\n    'Scatter Chart': makeScatterRenderer(PlotlyComponent),\n    'Multiple Pie Chart': makeRenderer(PlotlyComponent, {\n      type: 'pie',\n      scalegroup: 1,\n      hoverinfo: 'label+value',\n      textinfo: 'none'\n    }, {}, true)\n  };\n}\n\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}