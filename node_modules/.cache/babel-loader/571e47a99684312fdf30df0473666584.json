{"ast":null,"code":"import _objectSpread from \"/home/manikandan/Downloads/Archive/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { PRODUCTCATEGORY } from \"../graphql/query\";\nimport { MATERIALMASTER } from \"../services/queries\";\nimport apidata from '../screens/Productupload/data.json';\nexport const productCategory = {\n  query: PRODUCTCATEGORY,\n  mapper: response => {\n    const category = response.allMasterProductCategories.nodes.map(_ => _objectSpread({}, _, {\n      value: _.id,\n      label: _.name\n    }));\n    const product_type = response.allMasterProductTypes.nodes.map(_ => _objectSpread({}, _, {\n      value: _.shortCode,\n      label: _.name,\n      title: _.name\n    }));\n    const material = response.allMasterMaterials.nodes.map(_ => _objectSpread({}, _, {\n      value: _.id,\n      label: _.name\n    }));\n    const gender = response.allMasterGenders.nodes.map(_ => _objectSpread({}, _, {\n      value: _.id,\n      label: _.name\n    }));\n    const vendorcode = response.allMasterVendors.nodes.map(_ => _objectSpread({}, _, {\n      value: _.id,\n      label: _.name\n    }));\n    const diamondsettings = response.allMasterDiamondsSettings.nodes.map(_ => _objectSpread({}, _, {\n      value: _.id,\n      label: _.name\n    }));\n    const diamondshapes = response.allMasterDiamondsShapes.nodes.map(_ => _objectSpread({}, _, {\n      value: _.id,\n      label: _.name\n    }));\n    const themes = response.allMasterThemes.nodes.map(_ => _objectSpread({}, _, {\n      value: _.id,\n      label: _.name\n    }));\n    const styles = response.allMasterStyles.nodes.map(_ => _objectSpread({}, _, {\n      value: _.id,\n      label: _.name\n    }));\n    const occasions = response.allMasterOccasions.nodes.map(_ => _objectSpread({}, _, {\n      value: _.id,\n      label: _.name\n    }));\n    const collections = response.allMasterCollections.nodes.map(_ => _objectSpread({}, _, {\n      value: _.id,\n      label: _.name\n    }));\n    const gemstonecolor = response.allMasterStonesColors.nodes.map(_ => _objectSpread({}, _, {\n      value: _.id,\n      label: _.name\n    }));\n    const stones = response.allMasterStones.nodes.map(_ => _objectSpread({}, _, {\n      value: _.id,\n      label: _.name\n    }));\n    const metalcolour = response.allMasterMetalsColors.nodes.map(_ => _objectSpread({}, _, {\n      value: _.id,\n      label: _.name\n    }));\n    const metalpurity = response.allMasterMetalsPurities.nodes.map(_ => _objectSpread({}, _, {\n      value: _.id,\n      label: _.name\n    }));\n    const diamondcolors = response.allMasterDiamondsColors.nodes.map(_ => _objectSpread({}, _, {\n      value: _.id,\n      label: _.name\n    }));\n    const diamondclarities = response.allMasterDiamondClarities.nodes.map(_ => _objectSpread({}, _, {\n      value: _.id,\n      label: _.name\n    }));\n    const productseries = response.allProductLists.nodes.map(_ => _objectSpread({}, _, {\n      value: _.productSeries\n    }));\n    const gemstontypes = response.allMasterGemstonesTypes.nodes.map(_ => _objectSpread({}, _, {\n      value: _.shortCode,\n      label: _.name\n    }));\n    const gemstonshapes = response.allMasterGemstonesShapes.nodes.map(_ => _objectSpread({}, _, {\n      value: _.alias,\n      label: _.name\n    }));\n    const gemstonesettings = response.allMasterGemstonesSettings.nodes.map(_ => _objectSpread({}, _, {\n      value: _.alias,\n      label: _.name\n    }));\n    const earringbacking = response.allMasterEarringBackings.nodes.map(_ => _objectSpread({}, _, {\n      value: _.alias,\n      label: _.name\n    }));\n    const diamondtypes = response.allMasterDiamondTypes.nodes.map(_ => _objectSpread({}, _, {\n      value: _.diamondColor + _.diamondClarity,\n      label: _.diamondColor + _.diamondClarity\n    }));\n    const metals = apidata.metals;\n    return {\n      category,\n      product_type,\n      material,\n      gender,\n      vendorcode,\n      metalcolour,\n      metals,\n      diamondsettings,\n      diamondshapes,\n      themes,\n      styles,\n      occasions,\n      collections,\n      gemstonecolor,\n      stones,\n      metalpurity,\n      diamondcolors,\n      diamondtypes,\n      diamondclarities,\n      productseries,\n      gemstontypes,\n      gemstonshapes,\n      gemstonesettings,\n      earringbacking\n    };\n  }\n};\nexport const materialMaster = {\n  query: MATERIALMASTER,\n  mapper: response => {\n    const materials = response.allMasterMaterials.nodes.map(_ => _objectSpread({}, _));\n    const vendors = response.allMasterVendors.nodes.map(_ => _objectSpread({}, _));\n    const product_categories = response.allMasterProductCategories.nodes.map(_ => _objectSpread({}, _));\n    const product_types = response.allMasterProductTypes.nodes.map(_ => _objectSpread({}, _));\n    return {\n      vendors,\n      product_categories,\n      product_types,\n      materials\n    };\n  }\n};","map":{"version":3,"sources":["/home/manikandan/Downloads/Archive/src/services/mapper.js"],"names":["PRODUCTCATEGORY","MATERIALMASTER","apidata","productCategory","query","mapper","response","category","allMasterProductCategories","nodes","map","_","value","id","label","name","product_type","allMasterProductTypes","shortCode","title","material","allMasterMaterials","gender","allMasterGenders","vendorcode","allMasterVendors","diamondsettings","allMasterDiamondsSettings","diamondshapes","allMasterDiamondsShapes","themes","allMasterThemes","styles","allMasterStyles","occasions","allMasterOccasions","collections","allMasterCollections","gemstonecolor","allMasterStonesColors","stones","allMasterStones","metalcolour","allMasterMetalsColors","metalpurity","allMasterMetalsPurities","diamondcolors","allMasterDiamondsColors","diamondclarities","allMasterDiamondClarities","productseries","allProductLists","productSeries","gemstontypes","allMasterGemstonesTypes","gemstonshapes","allMasterGemstonesShapes","alias","gemstonesettings","allMasterGemstonesSettings","earringbacking","allMasterEarringBackings","diamondtypes","allMasterDiamondTypes","diamondColor","diamondClarity","metals","materialMaster","materials","vendors","product_categories","product_types"],"mappings":"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","sourcesContent":["import { PRODUCTCATEGORY } from \"../graphql/query\";\nimport { MATERIALMASTER } from \"../services/queries\";\nimport apidata from '../screens/Productupload/data.json';\n\nexport const productCategory = {\n    query: PRODUCTCATEGORY,\n    mapper: (response) => {\n        const category = response.allMasterProductCategories.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const product_type = response.allMasterProductTypes.nodes.map(_ => ({\n            ..._,\n            value: _.shortCode,\n            label: _.name,\n            title: _.name\n        }))\n        const material = response.allMasterMaterials.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label:_.name\n        }))\n        const gender = response.allMasterGenders.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const vendorcode  = response.allMasterVendors.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        \n        const diamondsettings = response.allMasterDiamondsSettings.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const diamondshapes = response.allMasterDiamondsShapes.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const themes = response.allMasterThemes.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const styles = response.allMasterStyles.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        \n        const occasions = response.allMasterOccasions.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const collections = response.allMasterCollections.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const gemstonecolor = response.allMasterStonesColors.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const stones = response.allMasterStones.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const metalcolour = response.allMasterMetalsColors.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const metalpurity = response.allMasterMetalsPurities.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const diamondcolors = response.allMasterDiamondsColors.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n\n        const diamondclarities = response.allMasterDiamondClarities.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const productseries = response.allProductLists.nodes.map(_ => ({\n            ..._,\n            value: _.productSeries,\n        }))\n        const gemstontypes = response.allMasterGemstonesTypes.nodes.map(_ => ({\n            ..._,\n            value: _.shortCode,\n            label:_.name\n        }))\n        \n        const gemstonshapes = response.allMasterGemstonesShapes.nodes.map(_ => ({\n            ..._,\n            value: _.alias,\n            label:_.name\n        }))\n        const gemstonesettings = response.allMasterGemstonesSettings.nodes.map(_ => ({\n            ..._,\n            value: _.alias,\n            label:_.name\n        }))\n        const earringbacking = response.allMasterEarringBackings.nodes.map(_ => ({\n            ..._,\n            value: _.alias,\n            label:_.name\n        }))\n\n        const diamondtypes = response.allMasterDiamondTypes.nodes.map(_ => ({\n            ..._,\n            value: _.diamondColor+_.diamondClarity,\n            label:_.diamondColor+_.diamondClarity\n        }))\n\n        \n        \n        const metals = apidata.metals\n        \n        return { category,\n             product_type, \n             material, \n             gender,\n             vendorcode, \n             metalcolour, \n             metals, \n             diamondsettings,\n             diamondshapes,\n            themes,\n            styles,\n            occasions,\n            collections,\n            gemstonecolor,\n            stones,\n            metalpurity,\n            diamondcolors,\n            diamondtypes,\n            diamondclarities,\n            productseries,\n            gemstontypes,\n            gemstonshapes,\n            gemstonesettings,\n            earringbacking\n        }\n    }\n}\n\n\nexport const materialMaster = {\n    query: MATERIALMASTER,\n    mapper: (response) => {\n        const materials = response.allMasterMaterials.nodes.map(_ => ({\n            ..._\n                }))\n        const vendors = response.allMasterVendors.nodes.map(_ => ({\n                    ..._\n        }))\n\n        const product_categories = response.allMasterProductCategories.nodes.map(_ => ({\n            ..._\n        }))\n        const product_types = response.allMasterProductTypes.nodes.map(_ => ({\n            ..._\n        }))\n        \n        return {\n            vendors,\n            product_categories,\n            product_types,\n            materials\n        }\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}