{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _Utilities = require('./Utilities');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // helper function for setting row/col-span in pivotTableRenderer\n\n\nvar spanSize = function spanSize(arr, i, j) {\n  var x = void 0;\n\n  if (i !== 0) {\n    var asc = void 0,\n        end = void 0;\n    var noDraw = true;\n\n    for (x = 0, end = j, asc = end >= 0; asc ? x <= end : x >= end; asc ? x++ : x--) {\n      if (arr[i - 1][x] !== arr[i][x]) {\n        noDraw = false;\n      }\n    }\n\n    if (noDraw) {\n      return -1;\n    }\n  }\n\n  var len = 0;\n\n  while (i + len < arr.length) {\n    var asc1 = void 0,\n        end1 = void 0;\n    var stop = false;\n\n    for (x = 0, end1 = j, asc1 = end1 >= 0; asc1 ? x <= end1 : x >= end1; asc1 ? x++ : x--) {\n      if (arr[i][x] !== arr[i + len][x]) {\n        stop = true;\n      }\n    }\n\n    if (stop) {\n      break;\n    }\n\n    len++;\n  }\n\n  return len;\n};\n\nfunction redColorScaleGenerator(values) {\n  var min = Math.min.apply(Math, values);\n  var max = Math.max.apply(Math, values);\n  return function (x) {\n    // eslint-disable-next-line no-magic-numbers\n    var nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n    return {\n      backgroundColor: 'rgb(255,' + nonRed + ',' + nonRed + ')'\n    };\n  };\n}\n\nfunction makeRenderer() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var TableRenderer = function (_React$PureComponent) {\n    _inherits(TableRenderer, _React$PureComponent);\n\n    function TableRenderer() {\n      _classCallCheck(this, TableRenderer);\n\n      return _possibleConstructorReturn(this, (TableRenderer.__proto__ || Object.getPrototypeOf(TableRenderer)).apply(this, arguments));\n    }\n\n    _createClass(TableRenderer, [{\n      key: 'render',\n      value: function render() {\n        var _this2 = this;\n\n        var pivotData = new _Utilities.PivotData(this.props);\n        var colAttrs = pivotData.props.cols;\n        var rowAttrs = pivotData.props.rows;\n        var rowKeys = pivotData.getRowKeys();\n        var colKeys = pivotData.getColKeys();\n        var grandTotalAggregator = pivotData.getAggregator([], []);\n\n        var valueCellColors = function valueCellColors() {};\n\n        var rowTotalColors = function rowTotalColors() {};\n\n        var colTotalColors = function colTotalColors() {};\n\n        if (opts.heatmapMode) {\n          var colorScaleGenerator = this.props.tableColorScaleGenerator;\n          var rowTotalValues = colKeys.map(function (x) {\n            return pivotData.getAggregator([], x).value();\n          });\n          rowTotalColors = colorScaleGenerator(rowTotalValues);\n          var colTotalValues = rowKeys.map(function (x) {\n            return pivotData.getAggregator(x, []).value();\n          });\n          colTotalColors = colorScaleGenerator(colTotalValues);\n\n          if (opts.heatmapMode === 'full') {\n            var allValues = [];\n            rowKeys.map(function (r) {\n              return colKeys.map(function (c) {\n                return allValues.push(pivotData.getAggregator(r, c).value());\n              });\n            });\n            var colorScale = colorScaleGenerator(allValues);\n\n            valueCellColors = function valueCellColors(r, c, v) {\n              return colorScale(v);\n            };\n          } else if (opts.heatmapMode === 'row') {\n            var rowColorScales = {};\n            rowKeys.map(function (r) {\n              var rowValues = colKeys.map(function (x) {\n                return pivotData.getAggregator(r, x).value();\n              });\n              rowColorScales[r] = colorScaleGenerator(rowValues);\n            });\n\n            valueCellColors = function valueCellColors(r, c, v) {\n              return rowColorScales[r](v);\n            };\n          } else if (opts.heatmapMode === 'col') {\n            var colColorScales = {};\n            colKeys.map(function (c) {\n              var colValues = rowKeys.map(function (x) {\n                return pivotData.getAggregator(x, c).value();\n              });\n              colColorScales[c] = colorScaleGenerator(colValues);\n            });\n\n            valueCellColors = function valueCellColors(r, c, v) {\n              return colColorScales[c](v);\n            };\n          }\n        }\n\n        var getClickHandler = this.props.tableOptions && this.props.tableOptions.clickCallback ? function (value, rowValues, colValues) {\n          var filters = {};\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = Object.keys(colAttrs || {})[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var i = _step.value;\n              var attr = colAttrs[i];\n\n              if (colValues[i] !== null) {\n                filters[attr] = colValues[i];\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = Object.keys(rowAttrs || {})[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var _i = _step2.value;\n              var attr = rowAttrs[_i];\n\n              if (rowValues[_i] !== null) {\n                filters[attr] = rowValues[_i];\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          return function (e) {\n            return _this2.props.tableOptions.clickCallback(e, value, filters, pivotData);\n          };\n        } : null;\n        return _react2.default.createElement('table', {\n          className: 'pvtTable'\n        }, _react2.default.createElement('thead', null, colAttrs.map(function (c, j) {\n          return _react2.default.createElement('tr', {\n            key: 'colAttr' + j\n          }, j === 0 && rowAttrs.length !== 0 && _react2.default.createElement('th', {\n            colSpan: rowAttrs.length,\n            rowSpan: colAttrs.length\n          }), _react2.default.createElement('th', {\n            className: 'pvtAxisLabel'\n          }, c), colKeys.map(function (colKey, i) {\n            var x = spanSize(colKeys, i, j);\n\n            if (x === -1) {\n              return null;\n            }\n\n            return _react2.default.createElement('th', {\n              className: 'pvtColLabel',\n              key: 'colKey' + i,\n              colSpan: x,\n              rowSpan: j === colAttrs.length - 1 && rowAttrs.length !== 0 ? 2 : 1\n            }, colKey[j]);\n          }), j === 0 && _react2.default.createElement('th', {\n            className: 'pvtTotalLabel',\n            rowSpan: colAttrs.length + (rowAttrs.length === 0 ? 0 : 1)\n          }, 'Totals'));\n        }), rowAttrs.length !== 0 && _react2.default.createElement('tr', null, rowAttrs.map(function (r, i) {\n          return _react2.default.createElement('th', {\n            className: 'pvtAxisLabel',\n            key: 'rowAttr' + i\n          }, r);\n        }), _react2.default.createElement('th', {\n          className: 'pvtTotalLabel'\n        }, colAttrs.length === 0 ? 'Totals' : null))), _react2.default.createElement('tbody', null, rowKeys.map(function (rowKey, i) {\n          var totalAggregator = pivotData.getAggregator(rowKey, []);\n          return _react2.default.createElement('tr', {\n            key: 'rowKeyRow' + i\n          }, rowKey.map(function (txt, j) {\n            var x = spanSize(rowKeys, i, j);\n\n            if (x === -1) {\n              return null;\n            }\n\n            return _react2.default.createElement('th', {\n              key: 'rowKeyLabel' + i + '-' + j,\n              className: 'pvtRowLabel',\n              rowSpan: x,\n              colSpan: j === rowAttrs.length - 1 && colAttrs.length !== 0 ? 2 : 1\n            }, txt);\n          }), colKeys.map(function (colKey, j) {\n            var aggregator = pivotData.getAggregator(rowKey, colKey);\n            return _react2.default.createElement('td', {\n              className: 'pvtVal',\n              key: 'pvtVal' + i + '-' + j,\n              onClick: getClickHandler && getClickHandler(aggregator.value(), rowKey, colKey),\n              style: valueCellColors(rowKey, colKey, aggregator.value())\n            }, aggregator.format(aggregator.value()));\n          }), _react2.default.createElement('td', {\n            className: 'pvtTotal',\n            onClick: getClickHandler && getClickHandler(totalAggregator.value(), rowKey, [null]),\n            style: colTotalColors(totalAggregator.value())\n          }, totalAggregator.format(totalAggregator.value())));\n        }), _react2.default.createElement('tr', null, _react2.default.createElement('th', {\n          className: 'pvtTotalLabel',\n          colSpan: rowAttrs.length + (colAttrs.length === 0 ? 0 : 1)\n        }, 'Totals'), colKeys.map(function (colKey, i) {\n          var totalAggregator = pivotData.getAggregator([], colKey);\n          return _react2.default.createElement('td', {\n            className: 'pvtTotal',\n            key: 'total' + i,\n            onClick: getClickHandler && getClickHandler(totalAggregator.value(), [null], colKey),\n            style: rowTotalColors(totalAggregator.value())\n          }, totalAggregator.format(totalAggregator.value()));\n        }), _react2.default.createElement('td', {\n          onClick: getClickHandler && getClickHandler(grandTotalAggregator.value(), [null], [null]),\n          className: 'pvtGrandTotal'\n        }, grandTotalAggregator.format(grandTotalAggregator.value())))));\n      }\n    }]);\n\n    return TableRenderer;\n  }(_react2.default.PureComponent);\n\n  TableRenderer.defaultProps = _Utilities.PivotData.defaultProps;\n  TableRenderer.propTypes = _Utilities.PivotData.propTypes;\n  TableRenderer.defaultProps.tableColorScaleGenerator = redColorScaleGenerator;\n  TableRenderer.defaultProps.tableOptions = {};\n  TableRenderer.propTypes.tableColorScaleGenerator = _propTypes2.default.func;\n  TableRenderer.propTypes.tableOptions = _propTypes2.default.object;\n  return TableRenderer;\n}\n\nvar TSVExportRenderer = function (_React$PureComponent2) {\n  _inherits(TSVExportRenderer, _React$PureComponent2);\n\n  function TSVExportRenderer() {\n    _classCallCheck(this, TSVExportRenderer);\n\n    return _possibleConstructorReturn(this, (TSVExportRenderer.__proto__ || Object.getPrototypeOf(TSVExportRenderer)).apply(this, arguments));\n  }\n\n  _createClass(TSVExportRenderer, [{\n    key: 'render',\n    value: function render() {\n      var pivotData = new _Utilities.PivotData(this.props);\n      var rowKeys = pivotData.getRowKeys();\n      var colKeys = pivotData.getColKeys();\n\n      if (rowKeys.length === 0) {\n        rowKeys.push([]);\n      }\n\n      if (colKeys.length === 0) {\n        colKeys.push([]);\n      }\n\n      var headerRow = pivotData.props.rows.map(function (r) {\n        return r;\n      });\n\n      if (colKeys.length === 1 && colKeys[0].length === 0) {\n        headerRow.push(this.props.aggregatorName);\n      } else {\n        colKeys.map(function (c) {\n          return headerRow.push(c.join('-'));\n        });\n      }\n\n      var result = rowKeys.map(function (r) {\n        var row = r.map(function (x) {\n          return x;\n        });\n        colKeys.map(function (c) {\n          var v = pivotData.getAggregator(r, c).value();\n          row.push(v ? v : '');\n        });\n        return row;\n      });\n      result.unshift(headerRow);\n      return _react2.default.createElement('textarea', {\n        value: result.map(function (r) {\n          return r.join('\\t');\n        }).join('\\n'),\n        style: {\n          width: window.innerWidth / 2,\n          height: window.innerHeight / 2\n        },\n        readOnly: true\n      });\n    }\n  }]);\n\n  return TSVExportRenderer;\n}(_react2.default.PureComponent);\n\nTSVExportRenderer.defaultProps = _Utilities.PivotData.defaultProps;\nTSVExportRenderer.propTypes = _Utilities.PivotData.propTypes;\nexports.default = {\n  Table: makeRenderer(),\n  'Table Heatmap': makeRenderer({\n    heatmapMode: 'full'\n  }),\n  'Table Col Heatmap': makeRenderer({\n    heatmapMode: 'col'\n  }),\n  'Table Row Heatmap': makeRenderer({\n    heatmapMode: 'row'\n  }),\n  'Exportable TSV': TSVExportRenderer\n};\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}