{"version":3,"sources":["routes/route.js","components/Input.js","components/Page/Page.js","utils/gradients.js","screens/Login/components/LoginForm/LoginForm.js","screens/Login/Login.js","screens/Dashboard/Dashboard.js","config.js","context/GlobalContext.js","context/ProductuploadContext.js","context/MaterialContext.js","context/VoucherContext.js","context/OrderContext.js","components/Loader/Fullloader.js","screens/Productupload/AddressForm.js","components/SelectPlaceholder.js","screens/Productupload/PaymentForm.js","screens/Productupload/Review.js","components/Select/MultiSelect.js","components/Select/Select.js","screens/Productupload/Step4.js","screens/Productupload/Step5.js","graphql/query.js","services/queries.js","services/mapper.js","context/NetworkContext.js","screens/Productupload/Step6.js","screens/Productupload/Step7.js","screens/Productupload/Step8.js","screens/Productupload/Component.js","screens/Productupload/ProductUpload.js","screens/Configuration/Configuration.js","components/Vendors/Vendors.js","screens/Vendorlist/Vendorlist.js","screens/Productlist/filterandsearch.js","components/Products/Product.js","screens/Productlist/Productlist.js","screens/CategoryList/components/Header/Header.js","components/Categoryrow/Categoryrow.js","components/Label/Label.js","screens/CategoryList/components/Results/Results.js","screens/CategoryList/Categorycontent.js","screens/CategoryList/CategoryList.js","screens/ProducttypeList/components/Header/Header.js","screens/ProducttypeList/components/Results/Results.js","screens/ProducttypeList/Producttypecontent.js","screens/ProducttypeList/ProducttypeList.js","screens/Voucherdiscount/components/Results/Results.js","screens/Voucherdiscount/components/Header/Header.js","utils/commonmethod.js","screens/Voucherdiscount/components/AboutVoucher/AboutVoucher.js","screens/Voucherdiscount/components/VoucherComponent/VoucherComponent.js","screens/Voucherdiscount/components/CategoryComponents/CategoryComponents.js","screens/Voucherdiscount/VoucherdiscountContent.js","screens/Voucherdiscount/Voucherdiscount.js","screens/Priceupdate/components/Results/Results.js","screens/Priceupdate/components/Header/Header.js","screens/Priceupdate/components/AboutVoucher/AboutVoucher.js","screens/Priceupdate/PriceupdateContent.js","screens/Priceupdate/components/CategoryComponents/CategoryComponents.js","screens/Priceupdate/Priceupdate.js","screens/OrderList/components/Header/columns.js","screens/OrderList/components/Header/SortHeader.js","screens/OrderList/components/Header/Header.js","screens/OrderList/components/Results/Results.js","screens/OrderList/Orderlistcontent.js","screens/OrderList/OrderList.js","screens/Vendorpricesetup/components/Product.js","screens/Vendorpricesetup/components/Diamonds.js","screens/Vendorpricesetup/components/Gemstones.js","screens/Vendorpricesetup/components/Makingcharge.js","screens/Vendorpricesetup/Vendorprice.js","screens/Markuppricesetup/components/Product.js","screens/Markuppricesetup/components/Diamonds.js","screens/Markuppricesetup/components/Gemstones.js","screens/Markuppricesetup/components/Makingcharge.js","screens/Markuppricesetup/Markupprice.js","components/PrimaryAppBar/styles.js","components/SideBar/styles.js","components/SideBar/index.js","components/PrimaryAppBar/index.js","routes/PrivateRoute.js","screens/ProductEdit/DiamondDetails.js","screens/ProductEdit/GemstoneDetails.js","screens/ProductEdit/Variants.js","screens/ProductEdit/Skupricing.js","screens/ProductEdit/CreateVariant.js","screens/ProductEdit/Components/columns.js","screens/ProductEdit/Components/SortHeader.js","screens/ProductEdit/ProductAttributes.js","screens/CategoryList/components/newmaterial/columns.js","screens/CategoryList/components/newmaterial/filterandsearch.js","screens/CategoryList/components/newmaterial/SortHeader.js","screens/CategoryList/components/newmaterial/ProductTable.js","screens/CategoryList/components/newmaterial/newmaterial.js","screens/CategoryList/components/editpage/editcategory.js","routes/index.js","theme/palette.js","theme/typography.js","theme/overrides/index.js","theme/overrides/MuiButton.js","theme/overrides/MuiIconButton.js","theme/overrides/MuiPaper.js","theme/overrides/MuiTableCell.js","theme/overrides/MuiTableHead.js","theme/overrides/MuiTypography.js","theme/index.js","App.js","serviceWorker.js","index.js"],"names":["route","login","dashboard","profile","productupload","configuration","vendor","productlist","orderlist","materiallist","producttypes","voucherdiscount","priceupdate","productAttributes","diamondDetails","gemstoneDetails","variants","images","createVariant","materiallistpage","editCategory","vendorPrice","markupPrice","Input","props","_props$isNumber","isNumber","pattern","maxLength","minLength","helperText","rest","Object","objectWithoutProperties","react_default","a","createElement","Grid","item","xs","TextField","assign","inputProps","style","width","onKeyPress","e","which","preventDefault","margin","variant","input-label","textOverflow","whiteSpace","overflow","color","input","&::placeholder","useStyles","process","REACT_APP_GA_MEASUREMENT_ID","makeStyles","media","height","Page","title","children","buildGradient","start","end","concat","gradients","grey","colors","blue","indigo","green","orange","red","validate","require","schema","email","presence","allowEmpty","message","password","theme","root","card","breakpoints","values","md","maxWidth","display","position","& > *","flexGrow","flexBasis","content","padding","spacing","defineProperty","borderTopRightRadius","borderBottomRightRadius","palette","white","flexDirection","justifyContent","down","icon","backgroundImage","borderRadius","shape","top","left","fontSize","loginForm","divider","person","avatar","marginRight","fields","flexWrap","submitButton","marginTop","LoginForm","className","classes","_useState","useState","isValid","touched","errors","_useState2","slicedToArray","formState","setFormState","useEffect","objectSpread2","handleChange","event","persist","target","name","type","checked","value","handleSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","alert","stop","_x","apply","this","arguments","hasError","field","Card","CardContent","Typography","gutterBottom","clsx","onSubmit","error","fullWidth","label","onChange","Button","size","CardMedia","Login","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","key","components_LoginForm_LoginForm","React","Component","withRouter","Dashboard_","Container","component","Input_Input","Dashboard","API_URL","GRAPHQL_DEV_CLIENT","globalCtxInitial","globalCtx","auth","loggedIn","userData","sideBarOpen","isExpand","selectedIndex","gqlClient","setGlobalCtx","GlobalContext","createContext","GlobalProvider","Consumer","_React$useState","_React$useState2","Provider","productuploadCtxInitial","productCtx","product_categoy","steps","product_type","productname","material","product_type_shortcode","category","metalColour","metalpurities","selectedgender","selected_metal_colour","gender","product_gender","vendorcode","productseries","sizes","selected_sizes","metal","materials","gemstontypes","gemstonshapes","product_code","isactive","gemstonelist","diamondlist","oldproductMetalColor","oldproductMetalPurity","productMetalColor","productMetalPurity","productDiamondColor","productDiamondClarity","productDiamondTypes","productImages","productDiamondTypesArray","oldproductDiamondTypesArray","productmaterials","createVariantList","editVariants","editDiamondLists","editGemstoneLists","productVariantSize","variant_size","gemstonetype","gemstoneshape","gemstonesettings","gemstonesize","gemstonecount","gemstoneweight","stonetype","editleadtime","editreadytoship","editisdefault","editisactive","editcostprice","editsellingprice","editmarkupprice","editdiscountprice","editcostpricetax","editsellingpricetax","editmarkuppricetax","editdiscountpricetax","diamondclarity","diamondcolor","diamondsettings","diamondshape","diamondcount","diamondweight","metalindex","themes","prod_styles","occassions","collections","stonecount","stonecolour","product_images","metalcolour","metal_purity","metalpurity","metal_color","metal_weight","diamond_colour","diamond_clarity","metal_height","metal_width","metal_length","metal_object","diamondtype","metals","error_message","masterData","setProductCtx","ProductContext","mapDataToCtx","apiData","mapper","mappertype","keys","length","ProductProvider","console","info","data","materialCtxInitial","materialCtx","materialMaster","setMaterialCtx","MaterialContext","log","JSON","stringify","MaterialProvider","setmaterialCtx","voucherCtxInitial","voucherCtx","voucher","voucherMaster","setVoucherCtx","VoucherContext","VoucherProvider","orderCtxInitial","orderCtx","orderMaster","orders","setOrderCtx","OrderContext","OrderProvider","setorderCtx","order","& > * + *","FullLoader","fixedTag","& .MuiOutlinedInput-root","dropdownlayout","& .menu","helperinput","& .MuiFormHelperText-root","marginBottom","formGroup","fieldGroup","alignItems","fieldHint","tags","marginLeft","dateField","& + &","AddressForm","_React$useContext","useContext","handleTextChange","handleoptionChange","_objectSpread4","vendorDelivaryDays","Fragment","container","sm","CardHeader","Divider","cardcontent","id","test","Autocomplete","defaultValue","options","map","option","renderTags","getTagProps","index","Chip","renderInput","params","InputProps","getOptionLabel","multiple","material_names","_objectSpread9","indexOf","handleMaterialChange","_objectSpread8","minvalue","maxvalue","default_size","shortCode","push","i","handleGenderChange","productvendorcode","vendorleadtime","InputLabelProps","shrink","FormControl","FormLabel","RadioGroup","aria-label","isreorderable","row","FormControlLabel","control","Radio","labelPlacement","default_metal_colour","default_metal_purity","freeSolo","alias","earringbacking","PlaceholderText","styled","Text","placeholderUp","transition","pointerEvents","zIndex","placeholderzindex","paddingLeft","paddingRight","backgroundColor","isDisabled","SelectContainer","View","_ref2","selectzindex","SelectView","placeholder","react_select_browser_esm","isClearable","PaymentForm","handleInputChange","disabled","includes","autoComplete","styles","occasions","stones","gemstonecolor","table","button","paper","gempapper","leftIcon","rightIcon","iconSmall","Review","useTheme","useRef","editmaterial","metalobj","indexval","clearmetalvalue","metalname","settings","clarity","count","weight","handleClick","metalsarr","stonedetails","isvalid","diamondclarities","diamondcolors","diamondshapes","justify","onClick","Table","TableHead","TableRow","TableCell","align","TableBody","scope","Edit_default","Delete_default","splice","deletematerial","valueContainer","flex","chip","chipFocused","emphasize","noOptionsMessage","singleValue","bottom","right","borderColor","borderBottom","formControl","minWidth","selectEmpty","createData","calories","fat","carbs","protein","selectedOption","default_metal_size","PRODUCTCATEGORY","gql","_templateObject","PRODUCTFILTERMASTER","_templateObject2","ALLPRODUCTLIST","_templateObject3","GOLDPRICELIST","_templateObject5","DIAMONDMARKUP","_templateObject6","DIAMONDPRICELIST","_templateObject7","VENDORLIST","MAKINGCHARGEPRICELIST","_templateObject8","GEMPRICELIST","_templateObject9","PRODUCTDIAMONDTYPES","_templateObject10","PRODUCTEDIT","queries_templateObject","ORDERS","queries_templateObject2","MATERIALMASTER","queries_templateObject3","productCategory","query","response","allMasterProductCategories","nodes","_","allMasterProductTypes","allMasterMaterials","allMasterGenders","allMasterVendors","allMasterDiamondsSettings","allMasterDiamondsShapes","allMasterThemes","themeName","allMasterStyles","styleName","allMasterOccasions","occassionName","allMasterCollections","collectionName","allMasterStonesColors","stonecolor","allMasterStones","allMasterMetalsColors","productColor","allMasterMetalsPurities","purity","allMasterDiamondsColors","allMasterDiamondClarities","allProductLists","productSeries","allMasterGemstonesTypes","allMasterGemstonesShapes","allMasterGemstonesSettings","allMasterEarringBackings","diamondtypes","allMasterDiamondTypes","diamondColor","diamondClarity","apidata","orderList","allOrders","vendors","product_categories","product_types","initialNetworkCtx","networkCtx","status","called","loading","parsedData","notRequested","setNetworkCtx","sendNetworkRequest","url","method","headers","resdata","token","_args","undefined","Content-Type","localStorage","getItem","fetch","body","isString","sent","json","statusText","abrupt","_x2","_x3","NetworkContext","NetworkProvider","registerPlugin","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","FilePondPluginImageValidateSize","FilePondPluginFileRename","img","objectFit","setMetalcolour","_React$useState3","_React$useState4","_React$useState5","_React$useState6","_uploadimagetoserver","bodaydata","imageposition","imagecolor","uploadtype","prodimages","prodid","imagecolourobj","imagecount","imagename","responsedata","returnData","signedRequest","filepathname","imageobj","_imageobj","charAt","image","fileExtension","filename","product_id","filepath","replace","Access-Control-Allow-Origin","image_url","axios","put","file","forEach","element","unshift","direction","react_filepond","allowImageValidateSize","imageValidateSizeMinWidth","imageValidateSizeMinHeight","imageValidateSizeMeasure","Promise","resolve","reject","labelIdle","allowMultiple","onupdatefiles","fileItem","onaddfile","_x4","uploadimagetoserver","onremovefile","fileRenameFunction","extension","Plot","createPlotlyComponent","window","Plotly","createPlotlyRenderers","_paper","appBar","layout","up","stepper","background","buttons","nested","Productupload","activeStep","setActiveStep","failure","success","setSuccess","_React$useState7","_React$useState8","setLoading","handleClose","reason","handleNext","error_content","formdata","keyvalue","sleep","location","_sleep","_callee2","millis","_context2","setTimeout","Snackbar","open","autoHideDuration","onClose","Alert","severity","Paper","Stepper","Step","StepLabel","step","Step5_Review","Step4_Review","Step6_Review","Step7_Review","Error","getStepContent","progress","_useQuery","useQuery","CircularProgress","ProductuploadContext_ProductProvider","Component_Productupload","Configuration","master_options_url","text","lg","Link","underline","RouterLink","to","fullwidth","textAlign","columns","format","toFixed","useStyles1","flexShrink","secondary","TablePaginationActions","page","rowsPerPage","onChangePage","IconButton","LastPage_default","FirstPage_default","KeyboardArrowRight_default","KeyboardArrowLeft_default","Math","ceil","max","useStyles2","tableWrapper","overflowX","AddContact","setPage","setRowsPerPage","emptyRows","min","contactlist","stickyHeader","column","slice","colSpan","TableFooter","TablePagination","rowsPerPageOptions","SelectProps","native","newPage","onChangeRowsPerPage","parseInt","ActionsComponent","Vendorlist","Vendors_AddContact","useStyless","border","&:hover","typography","FormPropsTextFields","_React$createElement","anchorEl","searchtext","setSearchtext","setCategory","producttype","setProducttype","handleinputChange","Boolean","borderTop","mastercategory","readOnly","masterproducttype","applyfilter","descendingComparator","b","orderBy","EnhancedTableHead","onSelectAllClick","onRequestSort","numSelected","rowCount","headCell","numeric","disablePadding","sortDirection","TableSortLabel","active","property","visuallyHidden","highlight","main","lighten","light","primary","dark","clip","withApollo","history","useHistory","pageCount","offsetValue","setOffsetValue","_React$useState9","_React$useState10","productlists","setProductlists","_React$useState11","_React$useState12","allproductlists","_React$useState13","_React$useState14","mastercategories","setMastercategories","_React$useState15","_React$useState16","masterproducttypes","setMasterproducttypes","_React$useState17","_React$useState18","_React$useState19","_React$useState20","setOrder","_React$useState21","_React$useState22","setOrderBy","getproductlist","client","fetchPolicy","then","catch","_getproductlist","productcategory","bodydata","offset","products","categoryname","typename","searchproduct","filter","l","productId","toLowerCase","match","productName","array","comparator","stabilizedThis","el","sort","stableSort","getComparator","product_name","product_category","dist_default","updatedAt","Productlist","text-align","Product","Header","buttonPadding","paddingTop","expand","transform","transitions","create","duration","shortest","expandOpen","contrastText","pendingchip","lineHeight","rounded","Label","_clsx","rootClassName","finalStyle","defaultProps","filterButton","inner","actions","Results","_useState3","_useState4","_useState5","_useState6","Create_default","CardActions","results","Categorycontent","setOrders","uuid","created_at","customer","payment","ref","total","currency","components_Header_Header","components_Results_Results","CategoryList","MaterialContext_MaterialProvider","action","Producttypecontent","ProducttypeList_components_Header_Header","ProducttypeList_components_Results_Results","ProducttypeList","makeid","prefix","couponcount","codes","codelength","result","characters","charactersLength","generatecode","generatedcount","floor","random","toUpperCase","cursor","metaloption","selectedOptiondefault","common","optionRadio","optionDetails","optionmaterialDetails","selectedtext","AboutVoucher","vouchercode","setVouchercode","vouchername","vouchercount","setVouchercount","_useState7","_useState8","voucherprefix","setVoucherprefix","_useState9","_useState10","discounttype","setDiscounttype","_useState11","_useState12","minreq","setMinreq","_useState13","_useState14","_useState15","_useState16","isonce","setIsonce","_useState17","_useState18","_useState19","Date","_useState20","selectedDate","handleDateChange","handleonceperorder","multiline","rows","categories","CardActionArea","DateTimePicker","inputVariant","minDate","strictCompareDates","handleminreq","tabs","VoucherComponent","selectedtab","setSelectedtab","Tabs","scrollButtons","tab","Tab","selected","components_CategoryComponents_CategoryComponents","tabname","CategoryComponents","setSelected","aboutvoucher","Voucherdiscountcontent","useUtils_cfb96ac9","utils","DateFnsUtils","components_AboutVoucher_AboutVoucher","components_VoucherComponent_VoucherComponent","Voucherdiscount","VoucherContext_VoucherProvider","pricingrows","update","handleAdd","productids","formData","setFormData","_useState21","_useState22","_useState23","_useState24","_useState25","_useState26","vendorlist","vendorsarray","vendorid","categorylist","producttypelist","PriceupdateContent","masters","setMasters","setProducts","setCategories","setVendors","_updateprices","pricingcomponent","req_product_id","_filterapllied","filterdata","Priceupdate_components_AboutVoucher_AboutVoucher","Priceupdate_components_Results_Results","Priceupdate","conatainerRow","maxHeight","overflowY","gridColumnGap","gridTemplateColumns","Columns","checkboxrow","listOfValue","setColumns","paddingBottom","conatiner","head","Checkbox","isActive","stateChange","fontWeight","resetButton","columnclose","columnnames","getColumnnames","saveaction","SortHeader","setAnchorEl","xl","currentTarget","ArrowDownward_default","Popover","anchorOrigin","vertical","horizontal","transformOrigin","displytype","Header_SortHeader","columnobjs","showcolumns","createdAt","shoppingCartByCartId","userProfileByUserprofileId","firstName","mobile","cartAddressesByCartId","addressline1","giftwrapsByCartId","paymentMode","paymentStatus","waybill","comments","pgresponse","skus","defaultcolumns","displaycolumnnames","setDisplaycolumnnames","defaultcolumnnames","displaycolumns","setDisplaycolumns","OrderList_components_Header_Header","displycolumns","OrderList_components_Results_Results","OrderList","OrderContext_OrderProvider","Orderlistcontent_Producttypecontent","setPageCount","editdiamond","setEditdiamond","setGoldpricelist","btnEdit","setBtnEdit","_handleSave","refetch","priceid","costprice","costPrice","sellingprice","sellingPrice","pricetype","sellingPriceType","cardroot","react_components_esm","onCompleted","allGoldPriceSettings","totalCount","variables","vendorCode","esm_Input_Input","heading","disableClearable","handleSave","generatedSku","Save_default","CancelOutlined_default","diamondData","allDiamondPriceSettings","diamondColour","editgem","setEditgem","gemlist","setgemlist","getgemlist","_getgemlist","ratetype","viewtype","gems","gemstoneType","gemstone_type","weight_start","weight_end","cost_price","price","selling_price","sellprice","selling_price_type","cost_price_id","selling_price_id","editmc","setEditmc","setMchargelist","add","handleEdit","getmclist","_getmclist","allMakingChargeSettings","weightStart","weightEnd","useStyle","Vendorprice","setVendorcode","setVendorlist","opts","res","fatchvalue","components_Product","Diamonds","Gemstones","Makingcharge","editmarkup","setEditmarkup","allPricingMarkups","sellingPriceMin","sellingPriceMax","markupType","markupValue","markupid","allGemstonePriceSettings","Markupprice","Markuppricesetup_components_Product","grow","menuButton","search","fade","searchIcon","inputRoot","inputInput","sectionDesktop","sectionMobile","drawer","easing","sharp","leavingScreen","appBarShift","enteringScreen","hide","drawerOpen","drawerClose","toolbar","mixins","outline","minHeight","_clsx2","_React$useContext2","optionname","handleListItemClick","Drawer","ChevronRight_default","ChevronLeft_default","List","ListItem","ListItemIcon","MoveToInbox_default","ListItemText","ExpandLess_default","ExpandMore_default","Collapse","in","timeout","unmountOnExit","StarBorder_default","PrimaryAppBar","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","isMobileMenuOpen","handleProfileMenuOpen","handleMobileMenuClose","handleMenuClose","menuId","renderMenu","Menu_Menu","keepMounted","MenuItem","renderMobileMenu","Badge","badgeContent","Mail_default","Notifications_default","aria-controls","aria-haspopup","AccountCircle_default","AppBar","Toolbar","edge","Menu_default","noWrap","MoreVert_default","MainWrapper","PrivateRoute","CssBaseline","components_SideBar","PrimaryAppBar_MainWrapper","withAppBar","elevation","DiamondDetails","setOpen","snackMessage","setSnackMessage","edit","diamondEditObject","setDiamondEditObject","diamond","DiamondDetails_Alert","diamondType","stoneWeight","stoneCount","diamondSettings","diamondShape","diamondListData","DiamondSave","parse","settingData","shapeData","GemstoneDetails","gemstoneEditObject","setGemstoneEditObject","gemstone","_GemstoneSave","list_data","gemstoneChangeData","editGemstoneList","gemstoneListData","gemstoneSetting","gemstoneShape","gemstoneSize","edit_data","some","check_edit","gemstone_list","GemstoneDetails_Alert","GemstoneSave","gemstoneData","Variants","checkedA","checkedB","handleChangeswitch","metalColor","skuWeight","skuSize","vendorDeliveryTime","Switch","isReadyToShip","isdefault","skulistdata","pricerun","Skupricesync","_Skupricesync","costPriceTax","sellingPriceTax","markupPriceTax","discountPrice","discountPriceTax","marginOnSalePercentage","discount","parseFloat","variantFontSize","variantMarginTop","CreateVariant","prod_id","purities","oldpurity","colorobj","diamondobj","diamond_color","variant_diamond_type","setVariant","getOptionDisabled","color_arr","color_obj","purity_arr","handleMetalPurity","metalPurityId","metalWeight","setMetalWeightInput","diamondtype_arr","diamondTypeChange","size_arr","_x5","_x6","_x7","productMetalcoloursByProductId","productPuritiesByProductId","productSize","metal_color_image_length","entries","metal_purity_weight","metal_weight_check","createVariants","toConsumableArray","saveCreateVariant","selectcolumnfilter","columns_Columns","pxToRem","secondaryHeading","verticalAlign","details","helper","borderLeft","link","textDecoration","setExpand","defaultvarients","varientcolumns","setVarientcolumns","defaultvarientnames","setDisplycolumns","defaultpricing","pricingcolumns","setPricingcolumns","defaultpricingnames","displypricingcolumns","setDisplypricingcolumns","_useContext","create_variant","duplicate_productName","state","setstate","pathname","split","changeVariant","_saveProductEditItem","productEditItem","genders","productListByProductId","size_obj","sizeVarient","sizes_arr","gender_arr","gender_obj","productType","productGemstonesByProductSku","productDiamondsByProductSku","transSkuListsByProductId","productImagesByProductId","productMaterialsByProductSku","productThemesByProductId","productStylesByProductId","productOccassionsByProductId","productCollectionsByProductId","productStonecountsByProductId","productStonecolorsByProductId","ProductEdit_CreateVariant","ProductAttributes_Alert","materialName","bodycontent","productid","saveProductEditItem","ExpansionPanel","expanded","isExpanded","diamondTypesArray","diamond_type","diamond_data","store_dia","diamondtypesData","ExpansionPanelSummary","expandIcon","Close_default","Add_default","ExpansionPanelDetails","Components_SortHeader","varients","Skupricing_Variants","ProductAttributes","ProductAttributes_Component","FontWeight","Select","notchedOutline","labelId","noValidate","lassName","newmaterial_columns_Columns","protein1","protein2","headCells","indeterminate","useToolbarStyles","EnhancedTableToolbar","Tooltip","EnhancedTable","dense","newmaterial_SortHeader","ProductTable_EnhancedTableToolbar","TableContainer","filterandsearch_FormPropsTextFields","aria-labelledby","ProductTable_EnhancedTableHead","newSelecteds","n","isItemSelected","hover","newSelected","role","aria-checked","tabIndex","newmaterial1","IOSSwitch","withStyles","switchBase","&$checked","& + $track","opacity","&$focusVisible $thumb","thumb","track","focusVisible","focusVisibleClassName","disableRipple","Editcategory","checkedC","setState","spaceing","MainApp","ApolloClient","uri","react_common_esm","NetworkContext_NetworkProvider","react_router","exact","path","routes_PrivateRoute","newmaterial","black","warning","blueGrey","default","h1","letterSpacing","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","caption","overline","textTransform","overrides","MuiButton","contained","boxShadow","MuiIconButton","MuiPaper","elevation1","MuiTableCell","MuiTableHead","MuiTypography","createMuiTheme","App","GlobalContext_GlobalProvider","ThemeProvider","react_router_dom","routes","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3882ea1.chunk.js","sourcesContent":["const route = {\n    login: '/login',\n    dashboard: '/dashboard',\n    profile: '/profile',\n    productupload: '/productupload',\n    configuration: '/Configuration',\n    vendor: '/vendorlist',\n    productlist: '/productlist',\n    orderlist: '/orderlist',\n    materiallist: '/material',\n    producttypes: '/producttypes',\n    voucherdiscount: '/voucherdiscount',\n    priceupdate: '/priceupdate',\n    productAttributes: '/product_attributes',\n    diamondDetails: '/diamond_details',\n    gemstoneDetails:'/gemstone-details',\n    variants:'/variants',\n    images:'/images',\n    createVariant:'/create_variant',\n    materiallistpage:'/newmaterial',\n    editCategory:'/editcategory',\n    vendorPrice:'/vendorpricesetup',\n    markupPrice: '/markuppricesetup'\n}\n\nexport default route;","import React from \"react\";\nimport { TextField, Grid } from \"@material-ui/core\";\nimport propTypes from \"prop-types\";\n\n// NOTABLE POINTS\n//  Min and Max\n// Email ID\n// Confirm Email ID\n// Mobile Number\n// Number\n// Password\n// Repeat Password\n// On Button Submit\n// On Moving Out\n// Live\n\nexport const Input = props => {\n  let {\n    isNumber = false,\n    pattern,\n    maxLength,\n    minLength,\n    helperText,\n    ...rest\n  } = props;\n  const defaultStyle = {\n    margin: \"dense\",\n    variant: \"outlined\",\n    'input-label': {\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      width: '100%',\n      color: 'red'\n    },\n  \n    'input': {\n      '&::placeholder': {\n        textOverflow: 'ellipsis !important',\n        color: 'red'\n      }\n    }\n  };\n\n  // INTEGRATE THEME HERE\n\n  const handleKeyPress = e => {\n    if (isNumber) {\n      if (!(e.which >= 48 && e.which <= 57)) e.preventDefault();\n    }\n  };\n\n  return (\n    <Grid item xs={12}>\n      <TextField\n                inputProps={{ pattern, maxLength, minLength  }}\n\n        style={{ width: \"100%\" }}\n        helperText={helperText}\n        onKeyPress={handleKeyPress}\n        {...defaultStyle}\n        {...rest}\n      />\n    </Grid>\n  );\n};\n\nInput.propTypes = {\n  isNumber: propTypes.bool\n};\n","import React,{ useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n// import { Helmet } from 'react-helmet';\nimport PropTypes from 'prop-types';\n\n\n\n\n\nconst NODE_ENV = process.env.NODE_ENV;\nconst GA_MEASUREMENT_ID = process.env.REACT_APP_GA_MEASUREMENT_ID;\n\nconst useStyles = makeStyles({\n  \n  media: {\n    height: 140,\n  },\n});\n\nexport default function Page(props) {\n  const classes = useStyles();\n  const { title, children, ...rest } = props;\n\n  // useEffect(() => {\n  //   if (NODE_ENV !== 'production') {\n  //     return;\n  //   }\n  \n  //   if (window.gtag) {\n  //     window.gtag('config', GA_MEASUREMENT_ID, {\n  //       page_path: router.location.pathname,\n  //       page_name: title\n  //     });\n  //   }\n  // }, [title, router]);\n  return (\n    <div {...rest}>\n      {/* <Helmet>\n        <title>{title}</title>\n      </Helmet> */}\n      {children}\n    </div>\n  );\n}","import { colors } from '@material-ui/core';\n\nconst buildGradient = (start, end) =>\n  `linear-gradient(180deg, ${start} 0%, ${end} 100%)`;\n\nconst grey = buildGradient(colors.grey[400], colors.grey[600]);\nconst blue = buildGradient(colors.blue[700], colors.blue[900]);\nconst indigo = buildGradient(colors.indigo[400], colors.indigo[600]);\nconst green = buildGradient(colors.green[400], colors.green[600]);\nconst orange = buildGradient(colors.orange[400], colors.orange[700]);\nconst red = buildGradient(colors.red[500], colors.red[700]);\n\nexport default {\n  grey,\n  blue,\n  indigo,\n  green,\n  orange,\n  red\n};\n","/* eslint-disable no-unused-vars */\n\nimport React, { useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport { Button, TextField } from '@material-ui/core';\nimport gradients from '../../../../utils/gradients';\nimport LockIcon from '@material-ui/icons/Lock';\n\nimport {\n  Card,\n  CardContent,\n  CardMedia,\n  Typography,\n  Divider,\n  Link,\n  Avatar\n} from '@material-ui/core';\nvar validate = require(\"validate.js\");\n\nconst schema = {\n  email: {\n    presence: { allowEmpty: false, message: 'is required' },\n    email: true\n  },\n  password: {\n    presence: { allowEmpty: false, message: 'is required' }\n  }\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n   \n  },\n  card: {\n    width: theme.breakpoints.values.md,\n    maxWidth: '100%',\n    overflow: 'unset',\n    display: 'flex',\n    position: 'relative',\n    '& > *': {\n      flexGrow: 1,\n      flexBasis: '50%',\n      width: '50%'\n    }\n  },\n  content: {\n    padding: theme.spacing(8, 4, 8, 4)\n  },\n  media: {\n    borderTopRightRadius: 4,\n    borderBottomRightRadius: 4,\n    color: theme.palette.white,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-end',\n    [theme.breakpoints.down('md')]: {\n      display: 'none'\n    }\n  },\n  icon: {\n    backgroundImage: gradients.green,\n    color: theme.palette.white,\n    borderRadius: theme.shape.borderRadius,\n    padding: theme.spacing(1),\n    position: 'absolute',\n    top: -32,\n    left: theme.spacing(3),\n    height: 64,\n    width: 64,\n    fontSize: 32\n  },\n  loginForm: {\n\n  },\n  divider: {\n    margin: theme.spacing(2, 0)\n  },\n  person: {\n    display: 'flex'\n  },\n  avatar: {\n    marginRight: theme.spacing(2)\n  },\n  fields: {\n    margin: theme.spacing(-1),\n    display: 'flex',\n    flexWrap: 'wrap',\n    '& > *': {\n      flexGrow: 1,\n      margin: theme.spacing(1)\n    }\n  },\n  submitButton: {\n    marginTop: theme.spacing(2),\n    width: '100%'\n  }\n}));\n\nconst LoginForm = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n  \n\n  const [formState, setFormState] = useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n\n  useEffect(() => {\n   const errors = validate(formState.values, schema);\n\n    setFormState(formState => ({\n      ...formState,\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n\n  const handleChange = event => {\n    event.persist();\n\n    setFormState(formState => ({\n      ...formState,\n      values: {\n        ...formState.values,\n        [event.target.name]:\n          event.target.type === 'checkbox'\n            ? event.target.checked\n            : event.target.value\n      },\n      touched: {\n        ...formState.touched,\n        [event.target.name]: true\n      }\n    }));\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if(formState.isValid)\n    {\n      alert(\"all ok\")\n    }else{\n      alert(\"has some error\")\n    }\n    //alert(JSON.stringify(formState))\n    // dispatch(login());\n    //alert(\"i am here\")\n  };\n\n  const hasError = field =>\n    formState.touched[field] && formState.errors[field] ? true : false;\n\n  return (\n    <Card className={classes.card}>\n      <CardContent className={classes.content}>\n        <Typography\n          gutterBottom\n          variant=\"h3\"\n        >\n        Sign in\n        </Typography>\n        <Typography variant=\"subtitle2\">\n        Sign in on the internal platform\n        </Typography>\n        <form\n          {...rest}\n          className={clsx(classes.root, className)}\n          onSubmit={handleSubmit}\n        >\n          <div className={classes.fields}>\n            <TextField\n              error={hasError('email')}\n              fullWidth\n              helperText={hasError('email') ? formState.errors.email[0] : null}\n              label=\"Email address\"\n              name=\"email\"\n              onChange={handleChange}\n              value={formState.values.email || ''}\n              variant=\"outlined\"\n            />\n            <TextField\n              error={hasError('password')}\n              fullWidth\n              helperText={\n                hasError('password') ? formState.errors.password[0] : null\n              }\n              label=\"Password\"\n              name=\"password\"\n              onChange={handleChange}\n              type=\"password\"\n              value={formState.values.password || ''}\n              variant=\"outlined\"\n            />\n          </div>\n          <Button\n            className={classes.submitButton}\n            color=\"primary\"\n            size=\"large\"\n            type=\"submit\"\n            variant=\"contained\"\n          >\n        Sign in\n          </Button>\n        </form>\n       \n      </CardContent>\n      <CardMedia\n        className={classes.media}\n        title=\"Cover\"\n\n      >\n             <div className={classes.person}>\n              \n              </div> \n        {/* <Typography\n          color=\"inherit\"\n          variant=\"subtitle1\"\n        >\n            Hella narvwhal Cosby sweater McSweeney's, salvia kitsch before they\n            sold out High Life.\n        </Typography>\n        <div className={classes.person}>\n        \n          <Avatar\n            alt=\"Person\"\n            className={classes.avatar}\n            src=\"/images/avatar_2.png\"\n            backgroundImage=\"/images/blob-shape.svg\"\n          />\n          <div>\n            <Typography\n              color=\"inherit\"\n              variant=\"body1\"\n            >\n                Ekaterina Tankova\n            </Typography>\n            <Typography\n              color=\"inherit\"\n              variant=\"body2\"\n            >\n                Manager at inVision\n            </Typography>\n          </div>\n        </div> */}\n      </CardMedia>\n    </Card>\n  );\n};\n\nLoginForm.propTypes = {\n  className: PropTypes.string\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport {Input} from '../../components/Input.js'\nimport Page from '../../components/Page'\n\nimport \"./Login.css\"\nimport { LoginForm } from './components';\nimport {\n  Card,\n  CardContent,\n  CardMedia,\n  Divider,\n  Link,\n  Avatar\n} from '@material-ui/core';\n\n\nexport class Login extends React.Component {\n\n   \n  render() {\n  return (\n    <Page\n    className='root'\n      title=\"Login\"\n    >\n    <LoginForm />\n        </Page>\n         \n  );\n}\n}\n\n\n  \n  export default (withRouter(Login));","import React from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport Container from '@material-ui/core/Container';\nimport {Input} from '../../components/Input.js'\n\nimport \"./Dashboard.css\"\n\nclass Dashboard_ extends React.Component {\n  \n   \n  render() {\n  return (\n    <Container className=\"root\" component=\"main\">\n    <Input />\n  </Container>\n         \n  );\n}\n}\n\nexport const Dashboard = withRouter(Dashboard_);\n  export default Dashboard;","// export const GRAPHQL_DEV_CLIENT = \"http://auth-dev.ap-south-1.elasticbeanstalk.com/graphql\"\n// export const API_URL = \"http://auth-dev.ap-south-1.elasticbeanstalk.com\"\n\nexport const BASE_URL = \"https://staging.stylori.com/\"\nexport const API_URL = \"https://api-staging.stylori.com\"\nexport const GRAPHQL_DEV_CLIENT = \"https://api-staging.stylori.com/graphql\"\n// export const GRAPHQL_DEV_CLIENT = \"http://192.168.1.105:8000/graphql\"\n// export const API_URL = \"http://192.168.1.105:8000\"","import React from 'react';\nimport { GRAPHQL_DEV_CLIENT } from '../config';\n\nconst globalCtxInitial = {\n    globalCtx: {\n        auth:{\n            loggedIn: false,\n            userData: {}\n        },\n        sideBarOpen: false,\n        isExpand: false,\n        selectedIndex: 0,\n        gqlClient: GRAPHQL_DEV_CLIENT\n    },\n    setGlobalCtx: () => null\n}\n\nexport const GlobalContext = React.createContext(globalCtxInitial);\n\nexport const GlobalConsumer = GlobalContext.Consumer;\n\nexport const GlobalProvider = props => {\n    const [ globalCtx, setGlobalCtx  ] = React.useState(globalCtxInitial.globalCtx);\n    // on Mount get Data from storage\n    // on Unmount store data to storage\n    return(\n        <GlobalContext.Provider value={{ globalCtx, setGlobalCtx }} >\n            {props.children}\n        </GlobalContext.Provider>      \n    )\n}","import React from 'react';\n\nconst productuploadCtxInitial = {\n    productCtx: {  \n        product_categoy: \"\",\n        steps: ['Step1', 'Step2','Step6'],\n        product_type:\"\",\n        productname:\"\",\n        material:\"\",\n        product_type_shortcode: \"\",\n        category:[],\n        metalColour:\"\",\n        metalpurities:\"\",\n        isExpand:false,\n        selectedgender:\"\",\n        selected_metal_colour:{},\n        gender: {},\n        product_gender:\"\",\n        vendorcode: \"\",\n        productseries:[],\n        size:0,\n        sizes:[],\n        selected_sizes:[],\n        metal:{\n            value : 1,\n            label:'Diamond'\n        },\n        materials:[\n                \"Diamond\",\n                \"Gold\",\n                \"Gemstone\",\n                \"Solitaire\",\n                \"Silver\",\n                \"Platinum\"\n        ],\n        gemstontypes:\"\",\n        gemstonshapes:\"\",\n        product_code: \"\",\n        isactive: false,\n        gemstonelist:[],\n        diamondlist:[],\n        variants:[],\n        oldproductMetalColor:[],\n        oldproductMetalPurity:[],\n        productMetalColor:[],\n        productMetalPurity:[],\n        productDiamondColor:[],\n        productDiamondClarity:[],\n        productDiamondTypes:[],\n        productImages:[],\n        productDiamondTypesArray:[],\n        oldproductDiamondTypesArray:[],\n        productmaterials:[],\n        createVariantList:[],\n        editVariants:[],\n        editDiamondLists:[],\n        editGemstoneLists:[],\n        productVariantSize:[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25   \n        ],\n        variant_size:[],\n        gemstonetype:\"\",\n        gemstoneshape:\"\",\n        gemstonesettings:\"\",\n        gemstonesize:\"\",\n        gemstonecount:\"\",\n        gemstoneweight:\"\",\n        stonetype:\"\",   \n\n         editleadtime: \"\",\n         editreadytoship:false,\n         editisdefault: false,\n         editisactive: false,\n\n\n         editcostprice: 0,\n         editsellingprice:0,\n         editmarkupprice: 0,\n         editdiscountprice: 0,\n         editcostpricetax: 0,\n         editsellingpricetax:0,\n         editmarkuppricetax: 0,\n         editdiscountpricetax: 0,\n\n        diamondclarity:\"\",\n        diamondcolor:\"\",\n        diamondsettings:\"\",\n        diamondshape:\"\",\n        diamondcount:\"\",\n        diamondweight:\"\",\n        metalindex: -1,\n        themes:\"\",\n        prod_styles:\"\",\n        occassions:\"\",\n        collections:\"\",\n        stonecount:\"\",\n        stonecolour:\"\",\n        product_images:{},\n        metalcolour:[],\n        metal_purity:[],\n        metalpurity:[],\n        metal_color:0,\n        metal_weight:0,\n        diamond_colour:0,\n        diamond_clarity:0,\n        metal_height:0,\n        metal_width:0,\n        metal_length:0,\n        metal_object:0,\n        diamondtype:0,\n        metals:[],\n        error_message:{ }\n    },\n    masterData: {},\n    setProductCtx: () => null\n}\n\nexport const ProductContext = React.createContext(productuploadCtxInitial);\n\nexport const ProductConsumer = ProductContext.Consumer;\n\nconst mapDataToCtx = (apiData, mapper, mappertype) => {\n    if(Object.keys(apiData).length === 0) return {};\n    productuploadCtxInitial.productCtx[mappertype] = mapper(apiData);\n\n    return productuploadCtxInitial.productCtx;\n}\n\nexport const ProductProvider = props => {\n    console.info('PROPS',props,props.value.mappertype)\n    const [ productCtx, setProductCtx  ] = React.useState(mapDataToCtx(props.value.data, props.value.mapper,props.value.mappertype));\n    // on Mount get Data from storage\n    // on Unmount store data to storage\n\n    React.useEffect(() => {\n        console.info('productCtx s',productCtx);\n    },[productCtx.material])\n\n    return(\n        <ProductContext.Provider value={{ productCtx, setProductCtx, masterData: mapDataToCtx(props.value.data, props.value.mapper, props.value.mappertype) }} >\n            {props.children}\n        </ProductContext.Provider>      \n    )\n}","import React from 'react';\n\nconst materialCtxInitial = {\n    materialCtx: {\n        \n    },\n    materialMaster: {\n        materials: []\n    },\n    setMaterialCtx: () => null\n}\n\nexport const MaterialContext = React.createContext(materialCtxInitial);\n\nexport const MaterialConsumer = MaterialContext.Consumer;\n\nconst mapDataToCtx = (apiData, mapper, mappertype) => {\n    if(Object.keys(apiData).length === 0) return {};\n    console.log(\"resposeobjvalue1\"+JSON.stringify(apiData))\n    materialCtxInitial.materialCtx[mappertype] = mapper(apiData);\n\n    console.log(\"resposeobjvalue1\"+JSON.stringify(materialCtxInitial.materialCtx))\n\n    return materialCtxInitial.materialCtx;\n}\n\nexport const MaterialProvider = props => {\n    console.info('PROPS',props,props.value.mappertype)\n    const [ materialCtx, setmaterialCtx  ] = React.useState(mapDataToCtx(props.value.data, props.value.mapper,props.value.mappertype));\n    // on Mount get Data from storage\n    // on Unmount store data to storage\n\n    React.useEffect(() => {\n        console.info('materialCtx s',materialCtx);\n    },[materialCtx.material])\n\n    return(\n        <MaterialContext.Provider value={{ materialCtx, setmaterialCtx, masterData: mapDataToCtx(props.value.data, props.value.mapper, props.value.mappertype) }} >\n            {props.children}\n        </MaterialContext.Provider>      \n    )\n}","import React from 'react';\n\nconst voucherCtxInitial = {\n    voucherCtx: {\n        voucher:\"\"\n    },\n    voucherMaster: {\n        materials: []\n    },\n    setVoucherCtx: () => null\n}\n\nexport const VoucherContext = React.createContext(voucherCtxInitial);\n\nexport const VoucherConsumer = VoucherContext.Consumer;\n\nconst mapDataToCtx = (apiData, mapper, mappertype) => {\n    if(Object.keys(apiData).length === 0) return {};\n    console.log(\"resposeobjvalue1\"+JSON.stringify(apiData))\n    voucherCtxInitial.voucherCtx[mappertype] = mapper(apiData);\n\n\n    return voucherCtxInitial.voucherCtx;\n}\n\nexport const VoucherProvider = props => {\n    const [ voucherCtx, setVoucherCtx  ] = React.useState(mapDataToCtx(props.value.data, props.value.mapper,props.value.mappertype));\n    // on Mount get Data from storage\n    // on Unmount store data to storage\n\n    React.useEffect(() => {\n        console.info('materialCtx s',voucherCtx);\n    },[voucherCtx.voucher])\n\n    return(\n        <VoucherContext.Provider value={{ voucherCtx, setVoucherCtx, masterData: mapDataToCtx(props.value.data, props.value.mapper, props.value.mappertype) }} >\n            {props.children}\n        </VoucherContext.Provider>      \n    )\n}","import React from 'react';\n\nconst orderCtxInitial = {\n    orderCtx: {\n        \n    },\n    orderMaster: {\n        orders: []\n    },\n    setOrderCtx: () => null\n}\n\nexport const OrderContext = React.createContext(orderCtxInitial);\n\nexport const OrderConsumer = OrderContext.Consumer;\n\nconst mapDataToCtx = (apiData, mapper, mappertype) => {\n    if(Object.keys(apiData).length === 0) return {};\n    console.log(\"resposeobjvalue1\"+JSON.stringify(apiData))\n    orderCtxInitial.orderCtx[mappertype] = mapper(apiData);\n\n    console.log(\"resposeobjvalue1\"+JSON.stringify(orderCtxInitial.orderCtx))\n\n    return orderCtxInitial.orderCtx;\n}\n\nexport const OrderProvider = props => {\n    console.info('PROPS',props,props.value.mappertype)\n    const [ orderCtx, setorderCtx  ] = React.useState(mapDataToCtx(props.value.data, props.value.mapper,props.value.mappertype));\n    // on Mount get Data from storage\n    // on Unmount store data to storage\n\n    React.useEffect(() => {\n        console.info('orderCtx s',orderCtx);\n    },[orderCtx.order])\n\n    return(\n        <OrderContext.Provider value={{ orderCtx, setorderCtx, masterData: mapDataToCtx(props.value.data, props.value.mapper, props.value.mappertype) }} >\n            {props.children}\n        </OrderContext.Provider>      \n    )\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport LinearProgress from '@material-ui/core/LinearProgress';\nconst useStyles = makeStyles(theme => ({\n    root: {\n      width: '100%',\n      '& > * + *': {\n        marginTop: theme.spacing(2),\n      },\n    },\n  }));\nfunction FullLoader(props) {\n    const classes = useStyles();\n\n    return (\n        <div style={{ position :\"absolute\",backgroundColor : \"#ddd\",zIndex : \"999\", height: '100vh', width: '100%', display: \"flex\",left : '0' ,top : '0', overflow: \"hidden\" }}>\n            { <h1 style={{margin: \"auto\"}}>Loading.......</h1> }\n            {/* <i class=\"fa fa-spinner fa-pulse fa-3x fa-fw\" style={{height: \"40px\"}}></i> */}\n            {/* <div className={classes.root}>\n                    <LinearProgress />\n                    </div> */}\n\n\n            <i class=\"fa fa-cog fa-spin fa-3x fa-fw\" style={{height: \"auto\", fontSize: \"66px\", margin: \"auto\", color: \"#00695C\"}} aria-hidden=\"true\"></i>\n        </div>\n    )\n}\nexport default FullLoader;","import React,{ useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport clsx from 'clsx';\n\n// import SelectPlaceholder from '../../components/SelectPlaceholder.js'\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport {Input} from '../../components/Input.js'\nimport { ProductContext } from '../../context';\nimport FullLoader from '../../components/Loader'\nimport \"./Productupload.css\"\nimport Select from 'react-select';\nimport \"./floating_dropdown.css\"\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n  Card,\n  CardHeader,\n  Chip,\n  CardContent,\n  Divider,\n  RadioGroup,\n  Radio,\n  FormLabel,\n  FormControlLabel,\n  Checkbox\n} from '@material-ui/core';\nimport { red } from '@material-ui/core/colors';\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 }\n]\nconst useStyles = makeStyles(theme => ({\n  fixedTag: {\n    padding: 0,\n    '& .MuiOutlinedInput-root':{\n      padding: 0,\n    }\n  },\n  dropdownlayout: {\n    '& .menu':{\n      position: \"Relative !important\",\n    }\n  },\n  helperinput: {\n    '& .MuiFormHelperText-root':{\n      color: \"#e53935\",\n    }\n  },\n  \n  root: {\n    marginTop: theme.spacing(2)\n  },\n  alert: {\n    marginBottom: theme.spacing(3)\n  },\n  formGroup: {\n    marginBottom: theme.spacing(3)\n  },\n  fieldGroup: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  fieldHint: {\n    margin: theme.spacing(1, 0)\n  },\n  tags: {\n    marginTop: theme.spacing(1),\n    '& > * + *': {\n      marginLeft: theme.spacing(1)\n    }\n  },\n  flexGrow: {\n    flexGrow: 1\n  },\n  dateField: {\n    '& + &': {\n      marginLeft: theme.spacing(2)\n    }\n  }\n}));\n\n  \nexport default function AddressForm(props) {\n    const { productCtx, setProductCtx } = React.useContext(ProductContext);\n    const classes = useStyles();\n    const { className, ...rest } = props;\n\n    React.useEffect(() => {\n    },[productCtx])\n    // const handleChange = selectedOption => {\n    \n    // };\n    const handlesizeChange  = selectedOption => {\n      setProductCtx({ ...productCtx, selected_sizes: selectedOption })\n    };\n    const handlevendorChange  = selectedOption => {\n      setProductCtx({ ...productCtx, vendorcode: selectedOption})\n    };\n   \n    const changeproducttype = type => (event, newvalue) => {\n      setProductCtx({ ...productCtx, product_type: newvalue})\n\n    }\n    const handlechange = type =>  selectedOption => {\n      if(type === 'product_type')\n      {\n        if(selectedOption)\n        {\n          var size = \"\";\n      var minvalue = 0;\n      var maxvalue = 0;\n      var selected_sizes = [];\n      var default_size = 0;\n      if(selectedOption.shortCode === 'K')\n      {\n\n        selected_sizes.push(\n          {\n            value:\"XS\",\n            label:\"XS\"\n          }\n        )\n        selected_sizes.push(\n          {\n            value:\"S\",\n            label:\"S\"\n          }\n        )\n        selected_sizes.push(\n          {\n            value:\"M\",\n            label:\"M\"\n          }\n        )\n        selected_sizes.push(\n          {\n            value:\"L\",\n            label:\"L\"\n          }\n        )\n      }  else\n      {\n\n      \n      if(selectedOption.shortCode === 'R' && productCtx.selectedgender.name === 'Male')\n      {\n        minvalue = 13\n        maxvalue = 25\n        default_size = 15\n      }\n      if(selectedOption.shortCode === 'R' && productCtx.selectedgender.name === 'Female')\n      {\n        minvalue = 8\n       maxvalue = 23\n       default_size = 12\n      }\n      \n      for(var i=minvalue; i<maxvalue;i++)\n      {\n        selected_sizes.push(\n          {\n            value:i,\n            label:\"\"+i\n          }\n        )\n      }\n    }\n      \n      setProductCtx({ ...productCtx, product_type_shortcode: selectedOption.shortCode,product_type:selectedOption, size,default_size,selected_sizes })\n        }else{\n          setProductCtx({ ...productCtx, product_type_shortcode: \"\",product_type:\"\", size,selected_sizes: \"\" })\n\n        }  \n    }else{\n        setProductCtx({ ...productCtx, [type]: selectedOption})\n\n      }\n    };\n    const handleTextChange = type => e => {\n      setProductCtx({ ...productCtx, [type]: e.target.value})\n\n    }\n    const handleoptionChange = type => (event, value) => {\n     \n      if(type === 'vendorcode')\n      {\n        setProductCtx({ ...productCtx, [type]: value,'vendorleadtime':value.vendorDelivaryDays})\n\n      }else\n      {\n        setProductCtx({ ...productCtx, [type]: value})\n\n      }\n\n    }\n\n\n    const switchisorderable = event => {\n        setProductCtx({ ...productCtx, ['isreorderable']: event.target.value})\n\n     \n\n    };\n\n\n    const purityChange = type => selectedOption => {\n      setProductCtx({ ...productCtx, [type]:selectedOption })\n  \n    }\n \n\n    const handleGenderChange = type => (event, value)  => {\n      var minvalue = 0;\n      var maxvalue = 0;\n      var selected_sizes=[]\n      var sizes = [];\n      var default_size = 0\n      if(productCtx.product_type.shortCode === 'K')\n      {\n\n       \n        default_size = \"XS\"\n        selected_sizes.push(\"XS\",\"S\",\"M\",\"L\")\n        sizes.push(\"XS\",\"S\",\"M\",\"L\")\n      }  else\n      {\n    if(productCtx.product_type.shortCode === 'R' && value === 'Male')\n    {\n      minvalue = 13\n      maxvalue = 26\n      default_size = ''+15\n    }\n    if(productCtx.product_type.shortCode === 'R' && value === 'Female')\n    {\n     minvalue = 8\n      maxvalue = 24\n      default_size = ''+12\n\n    }\n\n    for(var i=minvalue; i<maxvalue;i++)\n    {\n      selected_sizes.push(\n        ''+i\n      )\n      sizes.push(\n        ''+i\n      )\n    }\n  }\n    setProductCtx({ ...productCtx,  [type]: value,sizes, selected_sizes,default_size })\n\n    }\n\n    \n\n\n\n    const handleMaterialChange = type => (event, value)  => {\n      var steps = ['Step1', 'Step2','Step6']\n      if(value)\n      {\n      if(value.indexOf('Diamond' ) > -1 || value.indexOf('Gemstone' ) > -1 )\n            {\n            \n            if(steps.indexOf('Step3') === -1)\n            {\n              steps = ['Step1', 'Step2','Step3','Step6']\n\n            }\n\n          }\n        }\n      setProductCtx({ ...productCtx, [type]:value,steps})\n\n    }\n\n    const handleInputChange = type => e => {\n\n                var size = productCtx.size;\n                var materials = productCtx.materials;\n                var selected_sizes = productCtx.selected_sizes;\n\n            if(type === 'selectedgender')\n                {\n                  var minvalue = 0;\n                  var maxvalue = 0;\n                  selected_sizes=[]\n                if(productCtx.product_type_shortcode === 'R' && e.name === 'Male')\n                {\n                  size = \"13-25\"\n                  minvalue = 13\n                  maxvalue = 26\n                }\n                if(productCtx.product_type_shortcode === 'R' && e.name === 'Female')\n                {\n                 size = \"8-18\"\n                 minvalue = 8\n                  maxvalue = 19\n\n                }\n\n                for(var i=minvalue; i<maxvalue;i++)\n                {\n                  selected_sizes.push(\n                    {\n                      value:i,\n                      label:\"\"+i\n                    }\n                  )\n                }\n              }\n\n              if(type === 'product_categoy')\n              {\n                  if(e.target.value === 'Platinum Jewellery')\n                  {\n                    materials.push('Platinum Jewellery')\n                    var index = materials.indexOf('Silver Jewellery');\n\n                    if(index >= 0)\n                    {\n                        materials.splice(index, 1)\n                    }\n                  }else if(e.target.value === 'Silver Jewellery')\n                  {\n                    materials.push('Silver Jewellery')\n                    var index1 = materials.indexOf('Platinum Jewellery');\n                    if(index1 >= 0)\n                    {\n                      materials.splice(index1, 1)\n                    }\n                  }else{\n                    var indexval = materials.indexOf('Silver Jewellery');\n\n                    if(indexval >= 0)\n                    {\n                        materials.splice(indexval, 1)\n                    }\n                    indexval = materials.indexOf('Platinum Jewellery');\n                    if(indexval >= 0)\n                    {\n                      materials.splice(indexval, 1)\n                    }\n                  }\n              }\n\n               setProductCtx({ ...productCtx, size ,[type]: e, materials, selected_sizes })\n\n              \n      }\n\n\n    const materialChange = type => selectedOption => {\n      //   let material = { ...productCtx.material, [type]: selectedOption }\n        var steps = ['Step1', 'Step2','Step4','Step5','Step6']\n      //   if(material.material)\n      //   {\n      //   material.material.forEach(element => {\n        let material_names = []\n          if(selectedOption)\n          {\n\n            selectedOption.forEach(element => {\n              material_names.push(element.name)\n            if(element.name === 'Diamond' || element.name === 'Gemstone' )\n            {\n            \n            if(steps.indexOf('Step3') === -1)\n            {\n              steps = ['Step1', 'Step2','Step3','Step6']\n\n            }\n\n          }\n            });\n            \n        }\n      //   });\n      // }\n\n        setProductCtx({ ...productCtx, [type]:selectedOption, steps,material_names })\n\n    }\n    const keyPress =type => e => {\n      const re = /^[a-zA-Z \\b]+$/;\n      if (e.target.value === '' || re.test(e.target.value)) {\n        setProductCtx({ ...productCtx, [type]: e.target.value})\n      }\n      \n   }\n    \n  return (\n    <>\n    <div>\n      {/* <FullLoader /> */}\n    <Grid container  spacing={1}>  \n    <Grid item xs={12} sm={6} spacing={1}>\n\n      <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Product Information 1\" />\n      <Divider />\n      <CardContent className={classes.cardcontent}>\n      <Grid container  spacing={1}>  \n      <Grid item xs={12} sm={12} spacing={1}>\n                      <Input\n                          className={classes.helperinput}\n                          variant=\"outlined\"\n                          margin=\"dense\"\n                          fullWidth\n                          value={productCtx.productname}\n                          id=\"productname\"\n                          error = {productCtx.error_message.productname}\n                         // helperText={productCtx.error_message.productname ? productCtx.error_message.productname : \"\" }\n                          name=\"productname\"\n                          label=\"Product Name\"\n                          onChange={keyPress('productname')}\n                          />\n          \n      </Grid> \n            <Grid item   className={'dropdownlayout'} xs={12} sm={6}>\n                  <Autocomplete\n                      id=\"product_category\"\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.product_categoy}\n                      onChange={handleoptionChange('product_categoy')}\n                      options={productCtx.masterData.category.map(option => option.label)}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" label={option.label} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Select Product Category\"\n                        margin=\"dense\"\n                        error = {productCtx.error_message.product_categoy}\n                        variant=\"outlined\"\n                        fullWidth\n\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n\n            </Grid>\n      <Grid    item xs={12} sm={6} spacing={1}>\n            \n                  <Autocomplete\n                    id=\"product_type\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    defaultValue={productCtx.product_type}\n                    options={productCtx.masterData.product_type}\n                    onChange={handleoptionChange('product_type')}\n                    \n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Select Product Type\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    error = {productCtx.error_message.product_type}\n                    fullWidth\n\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                  />\n            </Grid>\n\n     \n          \n      </Grid>\n      </CardContent>\n      </Card>\n      </Grid>\n      <Grid item xs={12} sm={6}>\n\n      { productCtx.product_type ? <>\n      <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Product Information 2\" />\n      <Divider />\n      <CardContent className={classes.cardcontent}>\n      <Grid container spacing={1}>   \n      { productCtx.product_type ? <>              \n              <Grid item xs={12} sm={6}>\n  \n                  <Autocomplete\n                      id=\"free-solo-2-demo\"\n                      multiple\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.material_names}\n                      options={productCtx.masterData.material.map(option => option.label)}\n                      onChange={handleMaterialChange('material_names')}\n\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                      }\n                      renderInput={params => (\n                      <TextField\n                      {...params}\n                      label=\"Select Product Materials\"\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      error = {productCtx.error_message.material_names}\n                      fullWidth\n  \n                      InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                      )}\n                      />\n              </Grid>\n           \n          \n  \n          \n  \n                </> : null } \n                <Grid item xs={12} sm={6}>\n                         <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    defaultValue={productCtx.selectedgender}\n                    options={productCtx.masterData.gender.map(option => option.label)}\n                    onChange={handleGenderChange('selectedgender')}\n\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Select Gender\"\n                    margin=\"dense\"\n                    error = {productCtx.error_message.selectedgender}\n\n                    variant=\"outlined\"\n                    fullWidth\n\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n                  {/* <FormHelperText error>{productCtx.error_message.selectedgender ? productCtx.error_message.earringbacking : \"\"}</FormHelperText> */}\n\n            </Grid>  \n      <Grid item xs={6} sm={6}>      \n                  <Autocomplete\n                    multiple\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel = {option => option.label}\n                    defaultValue={productCtx.metalpurity}\n                    options={productCtx.masterData.metalpurity}\n                    onChange={handleoptionChange('metalpurity')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Metal Purity\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    error = {productCtx.error_message.metalpurity}\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n                {/* <FormHelperText error>{productCtx.error_message.material ? productCtx.error_message.material : \"\"}</FormHelperText> */}\n          \n        </Grid>\n        <Grid item xs={6} sm={6}>\n      \n                <Autocomplete\n                    multiple\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    defaultValue={productCtx.metalcolour}\n                    options={productCtx.masterData.metalcolour}\n                    onChange={handleoptionChange('metalcolour')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Metal Colour\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    error = {productCtx.error_message.metalcolour}\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n      \n</Grid>\n      \n        </Grid>\n      </CardContent>\n      </Card>\n      </> : null}\n</Grid>\n</Grid>\n<Grid container  spacing={1}>  \n\n<Grid item xs={12} sm={6}>\n{ productCtx.product_type ? <>\n  <Card\n  {...rest}\n  className={clsx(classes.root, className)}\n>\n  <CardHeader title=\"Vendor Information\" />\n  <Divider />\n  <CardContent className={classes.cardcontent}>\n      <Grid container  spacing={1}>  \n      <Grid item xs={12} sm={6}>\n                  <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    defaultValue={productCtx.vendorcode}\n                    getOptionLabel={option => option.label}\n                    options={productCtx.masterData.vendorcode}\n                    onChange={handleoptionChange('vendorcode')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Select Vendor Code\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    error = {productCtx.error_message.vendorcode}\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n            </Grid> \n            <Grid item xs={12} sm={6} spacing={1}>\n                    <Input\n                      variant=\"outlined\"\n                      margin=\"dense\"\n                      label=\"Vendor Product Code\"\n                      fullWidth\n                      className={classes.helperinput} \n                      value={productCtx.productvendorcode}\n                      error = {productCtx.error_message.productvendorcode}\n                      id=\"productvendorcode\"\n                      name=\"productvendorcode\"\n                      onChange={handleTextChange('productvendorcode')}\n                      />\n\n          </Grid>\n          <Grid item xs={12} sm={6} spacing={1}>\n                    <Input\n                      variant=\"outlined\"\n                      margin=\"dense\"\n                      label=\"Vendor Lead Time\"\n                      fullWidth\n                      className={classes.helperinput} \n                      error = {productCtx.error_message.vendorleadtime}\n                      value={productCtx.vendorleadtime}\n                      InputLabelProps={{ shrink: productCtx.vendorleadtime }}\n                      id=\"vendorleadtime\"\n                      name=\"vendorleadtime\"\n                      onChange={handleTextChange('vendorleadtime')}\n                      />\n\n          </Grid>\n          <Grid item xs={12} sm={6} spacing={1}>\n\n          <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\">IsReorderable</FormLabel>\n          <RadioGroup aria-label=\"position\" name=\"position\" value={productCtx.isreorderable} onChange={switchisorderable} row>\n            <FormControlLabel\n              value=\"Yes\"\n              \n              control={<Radio color=\"primary\" \n               />}\n              label=\"Yes\"\n              labelPlacement=\"right\"\n            />\n            <FormControlLabel\n              value=\"No\"\n              control={<Radio  color=\"primary\" />}\n              label=\"No\"\n              labelPlacement=\"right\"\n            />\n            </RadioGroup>\n            </FormControl>\n      </Grid>\n      </Grid>\n      </CardContent>\n      </Card> </>: null}\n\n\n\n   </Grid>\n    <Grid item xs={12} sm={6}>\n    <Grid container  spacing={1}> \n    <Grid item xs={12} sm={12}>\n\n{ productCtx.product_type ? \n\n  <Card\n    {...rest}\n    className={clsx(classes.root, className)}\n  >\n    <CardHeader title=\"Default SKU For Display\n  \" />\n    <Divider />\n    <CardContent className={classes.cardcontent}>\n      <Grid container xs={12} alignItems=\"center\" spacing={2}>\n      \n      \n      \n      \n      <Grid item xs={6} >\n  \n                    <Autocomplete\n                        id=\"product_category\"\n                        className={classes.fixedTag}\n                        defaultValue={productCtx.default_metal_colour}\n                        onChange={handleoptionChange('default_metal_colour')}\n                        options={productCtx.metalcolour.map(option => option.label)}\n                        renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                          <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                        ))\n                      }\n                      renderInput={params => (\n                        <TextField\n                          {...params}\n                          label=\"Metal Colour\"\n                          margin=\"dense\"\n                          variant=\"outlined\"\n                          fullWidth\n                          error = {productCtx.error_message.default_metal_colour}\n  \n                          InputProps={{ ...params.InputProps, type: 'search' }}\n                        />\n                      )}\n                    />\n      </Grid>\n      <Grid item xs={6} >\n             \n  \n                  <Autocomplete\n                        id=\"product_category\"\n                        className={classes.fixedTag}\n                        defaultValue={productCtx.default_metal_purity}\n                        onChange={handleoptionChange('default_metal_purity')}\n                        options={productCtx.metalpurity.map(option => option.label)}\n                        renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                          <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                        ))\n                      }\n                      renderInput={params => (\n                        <TextField\n                          {...params}\n                          label=\"Metal Purity\"\n                          margin=\"dense\"\n                          error = {productCtx.error_message.default_metal_purity}\n                          variant=\"outlined\"\n                          fullWidth\n  \n                          InputProps={{ ...params.InputProps, type: 'search' }}\n                        />\n                      )}\n                    />\n     \n      </Grid>\n      </Grid>\n      </CardContent>\n      </Card> : null }\n      \n    </Grid>\n    </Grid> \n    <Grid item xs={12} sm={12}>\n\n    {(productCtx.product_type && (productCtx.product_type.shortCode  === 'K' || productCtx.product_type.shortCode  === 'R') && productCtx.sizes.length > 0 ) ? <>\n  <Card\n  {...rest}\n  className={clsx(classes.root, className)}\n>\n  <CardHeader title=\"Size Information\" />\n  <Divider />\n  <CardContent className={classes.cardcontent}>\n      <Grid container spacing={1}> \n      <Grid item xs={6} >\n               \n               <Autocomplete\n                       id=\"free-solo-2-demo\"\n                       multiple\n                       freeSolo\n                       className={classes.fixedTag}\n                       defaultValue={productCtx.selected_sizes}\n                       options={productCtx.sizes}\n                       onChange={handleoptionChange('selected_sizes')}\n                       renderTags={(value, getTagProps) =>\n                       value.map((option, index) => (\n                       <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                       ))\n                       }\n                       renderInput={params => (\n                       <TextField\n                       {...params}\n                       label=\"Ring Sizes\"\n                       margin=\"dense\"\n                       variant=\"outlined\"\n                       fullWidth\n                       error = {productCtx.error_message.selected_sizes}\n\n                       InputProps={{ ...params.InputProps, type: 'search' }}\n                       />\n                       )}\n                       />\n               </Grid> \n\n\n               <Grid item xs={6} >\n               \n               <Autocomplete\n                    id=\"product_type\"\n                    className={classes.fixedTag}\n                    freeSolo\n                    defaultValue={productCtx.default_size}\n                    options={productCtx.selected_sizes}\n                    onChange={handleoptionChange('default_size')}\n                    renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                      }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Select Default Size\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    error = {productCtx.error_message.default_size}\n\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                  />\n               </Grid> \n     \n      \n      </Grid>\n          </CardContent>\n      </Card> </>: null}\n    </Grid>\n    <Grid item xs={12} sm={12}>\n{ (productCtx.product_type && productCtx.product_type.alias  === 'Earrings') ? <>\n  <Card\n  {...rest}\n  className={clsx(classes.root, className)}\n>\n  <CardHeader title=\"Type of Fit\" />\n  <Divider />\n  <CardContent className={classes.cardcontent}>\n      <Grid container spacing={1}>  \n      \n        <Grid item xs={12} >\n               \n            <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    defaultValue={productCtx.earringbacking}\n                    options={productCtx.masterData.earringbacking.map(option => option.label)}\n                    onChange={handleoptionChange('earringbacking')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Earring Backing\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    error = {productCtx.error_message.earringbacking}\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n            </Grid>\n      </Grid>\n          </CardContent>\n      </Card> </>: null}\n\n      </Grid>\n   \n    </Grid>\n</Grid>\n<Grid container  spacing={1}>  \n    \n</Grid>\n   \n      \n\n            \n\n\n               \n      </div>\n\n     </>\n  );\n}","import React from 'react';\nimport styled from '@emotion/styled';\nimport Select from 'react-select';\nimport { View, Text} from \"react-primitives\";\nimport \"../screens/Productupload/Productupload.css\"\n\nconst PlaceholderText = styled(Text)(({ placeholderUp, placeholderzindex, isDisabled }) => ({\n  position: 'absolute',\n  transition: 'all .25s',\n  pointerEvents: 'none',\n  top: placeholderUp ? -8 : 10,\n  left: 8,\n  zIndex: placeholderzindex,\n  paddingLeft: 8,\n  paddingRight: 8,\n  backgroundColor: isDisabled ? 'transparent' : '#FFFFFF',\n  fontSize: placeholderUp ? 12 : 15,\n  color: placeholderUp ? '#3F51B5' : '#263238',\n}));\n\nconst SelectContainer = styled(View)(({ selectzindex }) => ({\n  position: 'relative',\n  display: 'flex',\n  zIndex: selectzindex\n}));\n\nconst SelectView = props => {\n  const { placeholder, placeholderUp, placeholderzindex, selectzindex, isDisabled } = props;\n  return (\n    <SelectContainer selectzindex={selectzindex}>\n      <Select \n        fullWidth\n        isClearable\n      {...props} placeholder=\"\" />\n      <PlaceholderText placeholderUp={placeholderUp} isDisabled={isDisabled} placeholderzindex={placeholderzindex}>{placeholder}</PlaceholderText>\n    </SelectContainer>\n  );\n};\n\nclass SelectPlaceholder extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      placeholderUp: false,\n      placeholderzindex : 1\n    };\n  }\n\n  onFocus = () => {\n    const { onFocus } = this.props;\n    this.setState({ placeholderUp: true });\n    onFocus && onFocus();\n  };\n\n  onBlur = () => {\n    const { value, onBlur } = this.props;\n    onBlur && onBlur();\n  };\n\n  render() {\n    return (\n      <SelectView\n      className={'dropdownlayout'}\n        fullWidth\n        {...this.props}\n        onBlur={this.onBlur}\n        onFocus={this.onFocus}\n      />\n    );\n  }\n}\n\nexport default SelectPlaceholder;","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\n  import FormControlLabel from '@material-ui/core/FormControlLabel';\nimport {Checkbox,\n  Card,\n  CardHeader,\n  TextField,\n  Divider,\n  Chip,\nCardContent} from '@material-ui/core';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Select from 'react-select';\nimport {Input} from '../../components/Input.js'\nimport FormGroup from '@material-ui/core/FormGroup';\nimport { ProductContext } from '../../context';\nimport Box from '@material-ui/core/Box';\nimport SelectPlaceholder from '../../components/SelectPlaceholder.js'\n\nimport \"./Productupload.css\"\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(2)\n  },\n}));\n\n\nexport default function PaymentForm(props) {\n  const classes = useStyles();\n  const { className, ...rest } = props;\n\n  const { productCtx, setProductCtx } = React.useContext(ProductContext);\n  const handleInputChange = type => e => {\n    setProductCtx({ ...productCtx, [type]: e.target.value  })\n  }\n  const materialChange = type => e => {\n    let selected_metal_colour = { ...productCtx.selected_metal_colour, [type]: e.target.checked }\n    setProductCtx({ ...productCtx, selected_metal_colour })\n    }\n  const purityChange = type => selectedOption => {\n    setProductCtx({ ...productCtx, [type]:selectedOption })\n\n  }\n  const handleoptionChange = type => (event, value) => {\n  \n      setProductCtx({ ...productCtx, [type]: value})\n\n  }\n\n  return (\n    <React.Fragment>\n<Grid container  spacing={1}> \n    <Grid item xs={12} sm={6}>\n      <Card\n  {...rest}\n  className={clsx(classes.root, className)}\n>\n  <CardHeader title=\"Type of Fit\" />\n  <Divider />\n  <CardContent className={classes.cardcontent}>\n      <Grid container spacing={1}>\n      <Grid item container xs={12} sm={12}>\n      <Grid item xs={6} sm={3}>\n\n      {/* <FormLabel component=\"legend\" >Product Code</FormLabel> */}\n                  <Input\n                      variant=\"outlined\"\n                      margin=\"dense\"\n                      disabled\n                      id=\"size\"\n                      onChange={handleInputChange('product_code')}\n                      name=\"size\"\n                      value={\"S\"+productCtx.product_type.shortCode+(productCtx.masterData.productseries[0].value+1)}\n                      \n                      />\n                      </Grid>\n     </Grid>\n     {['R','B'].includes(productCtx.product_type.shortCode) ? null :\n      <>\n     <Grid item xs={4} >\n\n      <Input\n          variant=\"outlined\"\n          margin=\"dense\"\n          fullWidth\n          id=\"size\"\n          label=\"Height\"\n          name=\"size\"\n          autoComplete=\"size\"\n          onChange = {handleInputChange('metal_height')}\n          value={productCtx.metal_height === 0 ? \"\" : productCtx.metal_height}\n          \n          />\n     </Grid> \n\n    <Grid item xs={4} >\n\n      <Input\n          variant=\"outlined\"\n          margin=\"dense\"\n          fullWidth\n          id=\"size\"\n          label=\"Width\"\n          name=\"size\"\n          onChange = {handleInputChange('metal_width')}\n          value={productCtx.metal_width === 0 ? \"\" : productCtx.metal_width}\n\n          autoComplete=\"size\"\n          \n          />\n    </Grid>\n    </>\n     }\n      \n   \n   {productCtx.product_type  === 'Bracelets' ? <Grid item xs={6} >\n\n      <Input\n          variant=\"outlined\"\n          margin=\"dense\"\n          fullWidth\n          id=\"size\"\n          label=\"Length\"\n          name=\"size\"\n          autoComplete=\"size\"\n          onChange = {handleInputChange('metal_length')}\n          value={productCtx.metal_length === 0 ? \"\" : productCtx.metal_length}\n\n          />\n    </Grid> : null }\n  \n</Grid>\n</CardContent>\n</Card>\n<Card\n  {...rest}\n  className={clsx(classes.root, className)}\n>\n  <CardHeader title=\"Enter weights for different Purity\n\" />\n  <Divider />\n  <CardContent className={classes.cardcontent}>\n    <Grid container spacing={1}>\n\n    <Grid item xs={12}>\n\n    </Grid>\n    {productCtx.metalpurity.map(row => (\n  \n  <Grid item container xs={12} spacing={2} >\n    \n    <Grid item xs={6} >\n\n      <Input\n    variant=\"outlined\"\n    disabled\n    margin=\"dense\"\n    fullWidth\n    id=\"size\"\n    label=\"Purity\"\n    name=\"size\"\n    autoComplete=\"size\"\n    value={row.name}\n    />\n</Grid>\n    <Grid item xs={6} >\n\n<Input\n    variant=\"outlined\"\n    margin=\"dense\"\n    fullWidth\n    id=\"size\"\n    label=\"Weight\"\n    name=\"size\"\n    error = {productCtx.error_message[`${row.name}_metal_weight`]}\n    autoComplete=\"size\"\n    onChange = {handleInputChange(`${row.name}_metal_weight`)}\n    value={productCtx[(`${row.name}_metal_weight`)] === 0 ? \"\" : productCtx[(`${row.name}_metal_weight`)]}\n    />\n</Grid>\n    </Grid> ))}\n\n      </Grid>\n      </CardContent>\n</Card>\n</Grid>\n<Grid item xs={12} sm={6}>\n<Card\n  {...rest}\n  className={clsx(classes.root, className)}\n>\n  <CardHeader title=\"Type of Fit\" />\n  <Divider />\n  <CardContent className={classes.cardcontent}>\n    <Grid container xs={12} sm={12} spacing={2}>\n    <Grid item xs={6} sm={6} >\n                   \n                      \n           <Autocomplete\n                      id=\"product_category\"\n                      multiple\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.themes}\n                      onChange={handleoptionChange('themes')}\n                      options={productCtx.masterData.themes.map(option => option.label)}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Select Themes\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        fullWidth\n                        error = {productCtx.error_message.themes}\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n           \n           \n            </Grid>\n   \n    <Grid item xs={12} sm={6}>\n                     \n    \n\n              <Autocomplete\n                      id=\"product_category\"\n                      multiple\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.prod_styles}\n                      onChange={handleoptionChange('prod_styles')}\n                      options={productCtx.masterData.styles.map(option => option.label)}\n\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Style\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        fullWidth\n                        error = {productCtx.error_message.prod_styles}\n\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n    </Grid>\n    <Grid item xs={12} sm={6}>\n      \n    \n          <Autocomplete\n                      id=\"product_category\"\n                      multiple\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.occassions}\n                      onChange={handleoptionChange('occassions')}\n                      options={productCtx.masterData.occasions.map(option => option.label)}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                    }\n\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Occasions\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        fullWidth\n                        error = {productCtx.error_message.occassions}\n\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n    </Grid>\n    <Grid item xs={12} sm={6}>\n  \n   \n\n                  <Autocomplete\n                      id=\"product_category\"\n                      multiple\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.collections}\n                      onChange={handleoptionChange('collections')}\n                      options={productCtx.masterData.collections.map(option => option.label)}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Collections\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        fullWidth\n                        error = {productCtx.error_message.collections}\n\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n              </Grid>\n              {productCtx.material_names.indexOf('Gemstone') > -1 ?\n              <>\n               <Grid item xs={12} sm={6} >\n    \n                  <Autocomplete\n                      id=\"product_category\"\n                      multiple\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.stonecount}\n                      onChange={handleoptionChange('stonecount')}\n                      options={productCtx.masterData.stones.map(option => option.label)}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"No of Stones\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        fullWidth\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n    </Grid>\n    <Grid item xs={12} sm={6}>\n    \n  \n\n<Autocomplete\n                      id=\"product_category\"\n                      multiple\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.stonecolour}\n                      onChange={handleoptionChange('stonecolour')}\n                      options={productCtx.masterData.gemstonecolor.map(option => option.label)}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Stone Colour\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        fullWidth\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n    </Grid>\n    </> : null }\n    \n    </Grid>\n    \n        <Grid item xs={6} >\n        </Grid>\n        </CardContent>\n        </Card>\n\n</Grid>\n</Grid>\n    </React.Fragment>\n  );\n}","import React,{useState} from 'react';\nimport clsx from 'clsx';\nimport { makeStyles,useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport {Input} from '../../components/Input.js'\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from 'react-select';\nimport { ProductContext } from '../../context';\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Box from '@material-ui/core/Box';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Paper from '@material-ui/core/Paper';\nimport SelectPlaceholder from '../../components/SelectPlaceholder.js'\nimport Autocomplete from '@material-ui/lab/Autocomplete'; \nimport {\n  Card,\n  CardHeader,\n  Chip,\n  CardContent,\n  TextField,\n  Divider,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Checkbox\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport \"./Productupload.css\"\nimport { func } from 'prop-types';\n\n  const useStyles = makeStyles(theme => ({\n    fixedTag: {\n      padding: 0,\n      '& .MuiOutlinedInput-root':{\n        padding: 0,\n      }\n    },\n    root:{\n      marginTop: theme.spacing(2)\n    },\n    table:{\n      marginTop: theme.spacing(2)\n    },\n    button: {\n      margin: theme.spacing(0),\n    },\n    paper: {\n      padding: theme.spacing(2),\n      width: '100%'\n    },\n    gempapper: {\n      padding: theme.spacing(2),\n      marginTop: theme.spacing(2),\n      width: '100%'\n    },\n    leftIcon: {\n      marginRight: theme.spacing(1),\n    },\n    rightIcon: {\n      marginLeft: theme.spacing(1),\n    },\n    iconSmall: {\n      fontSize: 20,\n    },\n  }));\n  \nexport default function Review(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const inputLabel = React.useRef(null);\n  const { className, ...rest } = props;\n  const { productCtx, setProductCtx} = React.useContext(ProductContext);\n  const handleInputChange = type => e => {\n    setProductCtx({ ...productCtx, [type]: e.target.value  })\n  }\n  const handleChange = type => selectedOption => {\n    setProductCtx({ ...productCtx, [type]: selectedOption })\n  };\n  function editmaterial(name) {\n    clearmetalvalue();\n    assignvalue(productCtx.metals[name], name);\n  }\n  function deletematerial(name) {\n    clearmetalvalue();\n    var metalsarr  = productCtx.metals;\n    metalsarr.splice(name,1)\n    setProductCtx({ ...productCtx, metals: metalsarr }) \n\n  }\n\n  const handleoptionChange = type => (event, value) => {\n    \n      setProductCtx({ ...productCtx, [type]: value})\n\n  }\n  function clearmetalvalue()\n  {\n    // for(let value in initialState){\n    //   if(value!==\"diamondclarity\" || \"diamondshape\" || \"diamondsettings\"){\n    //     setProductCtx({  \n    //       [value]:initialState[value]\n    //     })\n    //   }\n    // }\n    setProductCtx({...productCtx,\n      diamondsettings: \"\",\n      diamondcolor:\"\",\n      diamondclarity:\"\",\n      diamondshape:\"\",\n      diamondcount:\"\",\n      diamondweight:\"\",\n      gemstonetype:\"\",\n      gemstoneshape:\"\",\n      gemstonesettings:\"\",\n      gemstonesize:\"\",\n      gemstonecount:\"\",\n      gemstoneweight:\"\"\n    })\n    // alert(productCtx)\n    // console.log(productCtx)\n    \n\n  }\n  function assignvalue(metalobj, indexval)\n  {\n    if(metalobj.metalname === 'Diamond')\n    {\n    setProductCtx({ ...productCtx, \n      diamondsettings: metalobj.settings,\n      diamondcolor:metalobj.color,\n      diamondclarity:metalobj.clarity,\n      diamondshape:metalobj.shape,\n      diamondcount:metalobj.count,\n      diamondweight:metalobj.weight,\n    metalindex: indexval})\n    }else\n    {\n      setProductCtx({ ...productCtx, \n        gemstonesettings: metalobj.settings,\n        gemstoneshape:metalobj.color,\n        gemstonetype:metalobj.clarity,\n        gemstonesize:metalobj.shape,\n        gemstonecount:metalobj.count,\n        gemstoneweight:metalobj.weight,\n      metalindex: indexval})\n    }\n\n  }\n  function handleClick(e) {\n    var metalsarr  = productCtx.metals;\n    var stonedetails = {};\n    stonedetails['metalname'] = productCtx.metal.label;\n    var isvalid = true\n    if(productCtx.diamondclarity)\n    {\n    if(productCtx.diamondsettings && productCtx.diamondcolor && productCtx.diamondclarity && productCtx.diamondshape && productCtx.diamondcount &&\n      productCtx.diamondweight)\n      {      stonedetails['metalname'] = \"Diamond\"\n    stonedetails['settings'] = productCtx.diamondsettings;\n    stonedetails['color'] = productCtx.diamondcolor;\n    stonedetails['clarity'] = productCtx.diamondclarity;\n    stonedetails['shape'] = productCtx.diamondshape;\n    stonedetails['count'] = productCtx.diamondcount;\n    stonedetails['weight'] = productCtx.diamondweight;\n      }else\n      {\n        isvalid = false\n        alert(\"Fill all fields\")\n      }\n\n    }else{\n      if(productCtx.gemstonetype && \n        productCtx.gemstoneshape && \n        productCtx.gemstonesettings && \n        productCtx.gemstonesize && productCtx.gemstonecount &&\n        productCtx.gemstoneweight)\n        { \n      stonedetails['metalname'] = \"Gemstone\"\n      stonedetails['clarity'] = productCtx.gemstonetype;\n      stonedetails['color'] = productCtx.gemstoneshape;\n      stonedetails['settings'] = productCtx.gemstonesettings;\n      stonedetails['shape'] = productCtx.gemstonesize;\n      stonedetails['count'] = productCtx.gemstonecount;\n      stonedetails['weight'] = productCtx.gemstoneweight;\n    }else\n    {\n      isvalid = false\n      alert(\"Fill all fields\")\n    }\n    }\n\n    if(isvalid)\n    {\n    if(productCtx.metalindex === -1)\n    {\n      stonedetails['id'] = metalsarr.length;\n\n      metalsarr.push(stonedetails) \n\n    }else\n    {\n      stonedetails['id'] = productCtx.metalindex\n\n      metalsarr[productCtx.metalindex] = stonedetails;\n    }\n    setProductCtx({ ...productCtx, metals: metalsarr })\n    clearmetalvalue()\n  }\n  }\n\n  return (\n    <React.Fragment>\n   {!productCtx.material_names.includes(\"Diamond\") ? null : \n\n      <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n      fullWidth\n    >\n      <CardHeader title=\"General Information\" />\n      <Divider />\n      <CardContent className={classes.cardcontent}>\n      <Grid container xs={12} spacing={1}>\n\n        <Grid container xs={12} spacing={1}>\n\n        <Grid item xs={4} >\n                   \n\n                <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    value={productCtx.diamondclarity}\n                    options={productCtx.masterData.diamondclarities}\n                    onChange={handleoptionChange('diamondclarity')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Diamond Type/Clarity\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n              \n        </Grid>\n\n        <Grid item xs={4} >\n        \n                      \n\n            <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    value={productCtx.diamondcolor}\n                    options={productCtx.masterData.diamondcolors}\n                    onChange={handleoptionChange('diamondcolor')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Diamond Colour\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n\n        \n        </Grid>\n        <Grid item xs={4} >\n        \n          \n\n            <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    value={productCtx.diamondsettings}\n                    options={productCtx.masterData.diamondsettings}\n                    onChange={handleoptionChange('diamondsettings')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Diamond Setting\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n        </Grid>\n        <Grid item xs={4} >\n      \n       \n                      <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    value={productCtx.diamondshape}\n                    options={productCtx.masterData.diamondshapes}\n                    onChange={handleoptionChange('diamondshape')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Diamond Shape\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n        \n        </Grid>\n        <Grid item xs={4} >\n        \n          <Input\n              variant=\"outlined\"\n              fullWidth\n              id=\"size\"\n              margin=\"dense\"\n              label=\"#of Stones\"\n              name=\"size\"\n              type=\"number\"\n              autoComplete=\"size\"\n              onChange={handleInputChange('diamondcount')}\n              value={productCtx.diamondcount}\n              />\n        </Grid>\n        <Grid item xs={4} >\n      \n          <Input\n              variant=\"outlined\"\n              fullWidth\n              id=\"size\"\n              margin=\"dense\"\n              label=\"Weight\"\n              name=\"size\"\n              autoComplete=\"size\"\n              onChange={handleInputChange('diamondweight')}\n              value={productCtx.diamondweight}\n              />\n        </Grid>\n        <Grid container item xs={12} justify=\"flex-end\">\n        <Button variant=\"contained\" onClick={handleClick}  size=\"small\" color=\"primary\" className={classes.button}>\n            Add Diamond\n          </Button>\n\n        </Grid>\n        </Grid>\n      </Grid>\n      \n        </CardContent>\n        </Card>\n   }\n\n {!productCtx.material_names.includes(\"Gemstone\") ? null : \n\n  \n       <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"General Information\" />\n      <Divider />\n      <CardContent className={classes.cardcontent}>\n\n          <Grid  container xs={12} spacing={1}>\n\n      <Grid item xs={4} >\n      \n                 \n                       <Autocomplete\n                    \n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    value={productCtx.gemstonetype}\n                    options={productCtx.masterData.gemstontypes}\n                    onChange={handleoptionChange('gemstonetype')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Gemstone Type\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n              \n      </Grid>\n    \n      <Grid item xs={4} >\n    \n          \n\n<Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    value={productCtx.gemstoneshape}\n                    options={productCtx.masterData.gemstonshapes}\n                    onChange={handleoptionChange('gemstoneshape')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Gemstone Shape\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n      \n      </Grid>\n      <Grid item xs={4} >\n      \n          \n                    <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    value={productCtx.gemstonesettings}\n                    options={productCtx.masterData.gemstonesettings}\n                    onChange={handleoptionChange('gemstonesettings')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Gemstone Setting\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n      </Grid>\n      <Grid item xs={4} >\n    \n      <Input\n            variant=\"outlined\"\n            fullWidth\n            id=\"size\"\n            margin=\"dense\"\n            label=\"Gemstone Size\"\n            name=\"size\"\n            onChange={handleInputChange('gemstonesize')}\n            autoComplete=\"size\"\n            value={productCtx.gemstonesize}\n            />\n      \n      \n      </Grid>\n      <Grid item xs={4} >\n      \n        <Input\n            variant=\"outlined\"\n            fullWidth\n            id=\"size\"\n            margin=\"dense\"\n            label=\"#of Stones\"\n            name=\"size\"\n            autoComplete=\"size\"\n            onChange={handleInputChange('gemstonecount')}\n            value={productCtx.gemstonecount}\n            />\n      </Grid>\n      <Grid item xs={4} >\n        \n        <Input\n            variant=\"outlined\"\n            fullWidth\n            id=\"size\"\n            margin=\"dense\"\n            label=\"Weight\"\n            name=\"size\"\n            autoComplete=\"size\"\n            onChange={handleInputChange('gemstoneweight')}\n            value={productCtx.gemstoneweight}\n            />\n      </Grid>\n      <Grid container item xs={12} justify=\"flex-end\">\n      <Button variant=\"contained\" onClick={handleClick}  size=\"small\" color=\"primary\" >\n          Add Gemstone\n        </Button>\n\n      </Grid>\n      </Grid>\n            </CardContent>\n            </Card>}\n\n            <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"General Information\" />\n      <Divider />\n      <CardContent className={classes.cardcontent}>\n    <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>Stone</TableCell>\n            <TableCell align=\"right\">Type/Clarity</TableCell>\n            <TableCell align=\"right\">Colour</TableCell>\n            <TableCell align=\"right\">Setting</TableCell>\n            <TableCell align=\"right\">Shape</TableCell>\n            <TableCell align=\"right\">#of stone</TableCell>\n            <TableCell align=\"right\">Weight</TableCell>\n            <TableCell align=\"center\">Edit</TableCell>\n            <TableCell align=\"center\">Delete</TableCell>\n\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {productCtx.metals.map(row => (\n            <TableRow key={row.metalname}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.metalname}\n              </TableCell>\n              <TableCell align=\"right\">{row.clarity.label}</TableCell>\n              <TableCell align=\"right\">{row.color.label}</TableCell>\n              <TableCell align=\"right\">{row.settings.label}</TableCell>\n              <TableCell align=\"right\">{row.metalname ==  'Diamond'? row.shape.label : row.shape}</TableCell>\n              <TableCell align=\"right\">{row.count}</TableCell>\n              <TableCell align=\"right\">{row.weight}</TableCell>\n              <TableCell align=\"center\"><EditIcon id={row.metalname} onClick={()=>editmaterial(row.id)}/> </TableCell>\n              <TableCell align=\"center\"><DeleteIcon id={row.metalname} onClick={()=>deletematerial(row.id)}/></TableCell>\n\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      </CardContent>\n      </Card>\n         \n </React.Fragment>\n  );\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport Select from 'react-select';\r\nimport { emphasize, makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport NoSsr from '@material-ui/core/NoSsr';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport PropTypes from 'prop-types';\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n    },\r\n  input: {\r\n    display: 'flex',\r\n    padding: 0,\r\n    height: 'auto',\r\n  },\r\n  valueContainer: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    overflow: 'hidden',\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5, 0.25),\r\n  },\r\n  chipFocused: {\r\n    backgroundColor: emphasize(\r\n      theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[700],\r\n      0.08,\r\n    ),\r\n  },\r\n  noOptionsMessage: {\r\n    padding: theme.spacing(1, 2),\r\n  },\r\n  singleValue: {\r\n    fontSize: 16,\r\n  },\r\n  placeholder: {\r\n    position: 'absolute',\r\n    left: 2,\r\n    bottom: 6,\r\n    fontSize: 16,\r\n  },\r\n  paper: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  \r\n  borderColor:{\r\n    borderBottom:'2px solid red'\r\n  \r\n  },\r\n}));\r\n\r\nfunction NoOptionsMessage(props) {\r\n  return (\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      className={props.selectProps.classes.noOptionsMessage}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nNoOptionsMessage.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction inputComponent({ inputRef, ...props }) {\r\n  return <div ref={inputRef} {...props} />;\r\n}\r\n\r\ninputComponent.propTypes = {\r\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n};\r\n\r\nfunction Control(props) {\r\n  const {\r\n    children,\r\n    innerProps,\r\n    innerRef,\r\n    selectProps: { classes, TextFieldProps },\r\n  } = props;\r\n\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      InputProps={{\r\n        inputComponent,\r\n        inputProps: {\r\n          className: classes.input,\r\n          ref: innerRef,\r\n          children,\r\n          ...innerProps,\r\n        },\r\n      }}\r\n      {...TextFieldProps}\r\n    />\r\n  );\r\n}\r\n\r\nControl.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction Option(props) {\r\n  return (\r\n    <MenuItem\r\n      ref={props.innerRef}\r\n      selected={props.isFocused}\r\n      component=\"div\"\r\n      style={{\r\n        fontWeight: props.isSelected ? 500 : 400,\r\n      }}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nOption.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  isFocused: PropTypes.bool,\r\n  isSelected: PropTypes.bool,\r\n};\r\n\r\nfunction Placeholder(props) {\r\n  return (\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      className={props.selectProps.classes.placeholder}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nPlaceholder.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction SingleValue(props) {\r\n  return (\r\n    <Typography className={props.selectProps.classes.singleValue} {...props.innerProps}>\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nSingleValue.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction ValueContainer(props) {\r\n  return <div className={props.selectProps.classes.valueContainer}>{props.children}</div>;\r\n}\r\n\r\nValueContainer.propTypes = {\r\n  children: PropTypes.node,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction MultiValue(props) {\r\n  return (\r\n    <Chip\r\n      tabIndex={-1}\r\n      label={props.children}\r\n      className={clsx(props.selectProps.classes.chip, {\r\n        [props.selectProps.classes.chipFocused]: props.isFocused,\r\n      })}\r\n      onDelete={props.removeProps.onClick}\r\n      deleteIcon={<CancelIcon {...props.removeProps} />}\r\n    />\r\n  );\r\n}\r\n\r\nMultiValue.propTypes = {\r\n  children: PropTypes.node,\r\n  isFocused: PropTypes.bool,\r\n  removeProps: PropTypes.object.isRequired,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction Menu(props) {\r\n  return (\r\n    <Paper square className={props.selectProps.classes.paper} {...props.innerProps}>\r\n      {props.children}\r\n    </Paper>\r\n  );\r\n}\r\n\r\nMenu.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object,\r\n};\r\n\r\nconst components = {\r\n  Control,\r\n  Menu,\r\n  MultiValue,\r\n  NoOptionsMessage,\r\n  Option,\r\n  Placeholder,\r\n  SingleValue,\r\n  ValueContainer,\r\n};\r\n\r\nexport default function IntegrationReactSelect(props) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const selectRef = React.useRef(null);\r\n  const [multi, setMulti] = React.useState({\r\n      values:[],\r\n    helperText:false}\r\n    );\r\n    React.useEffect(() => {\r\n      // console.info('MULTI', multi)\r\n      // setMulti({...multi, helperText: multi.values.length === 0 }); \r\n    },[multi.values])\r\n\r\n  function handleChangeMulti(value) {\r\n  \r\n    setMulti({...multi, values:value, helperText: !Boolean(value && value.length !== 0)  });\r\n  \r\n  }\r\n  \r\n  \r\n  const selectStyles = {\r\n    input: base => ({\r\n      ...base,\r\n      color: theme.palette.text.primary,\r\n      '& input': {\r\n        font: 'inherit',\r\n      },\r\n    }),\r\n  };\r\n  const suggestions =  props.MultiSelectData\r\n    .map(suggestion => ({\r\n      value: suggestion.label,\r\n      label: suggestion.label,\r\n    }));\r\n  return (\r\n   \r\n    <div className={classes.root}>\r\n      <NoSsr>\r\n       \r\n        <div className={classes.divider} />\r\n\r\n        <Select\r\n          classes={classes}\r\n          className={`${props.ClassNames?'props.ClassNames':''} ${multi.helperText?classes.borderColor:''}`}\r\n          styles={selectStyles}\r\n          inputId=\"react-select-multiple\"\r\n          TextFieldProps={{\r\n            label: 'Countries',\r\n            InputLabelProps: {\r\n              htmlFor: 'react-select-multiple',\r\n              shrink: true,\r\n            },\r\n            placeholder: 'Select multiple countries',\r\n          }}\r\n          ref={selectRef}\r\n          options={suggestions}\r\n          components={components}\r\n          value={multi.values}\r\n          onChange={handleChangeMulti}\r\n        \r\n          isMulti\r\n        />\r\n          {multi.helperText && <FormHelperText><b style={{ color: 'red' }}>Required</b></FormHelperText>}\r\n      </NoSsr>\r\n    </div>\r\n  );\r\n}\r\n\r\nIntegrationReactSelect.propTypes = {\r\n  handleChangeMulti: PropTypes.func,\r\n  ClassNames:PropTypes.string,\r\n  MultiSelectData:PropTypes.isRequired\r\n};","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: \"flex\"\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120\r\n    },\r\n    selectEmpty: {\r\n    }\r\n}));\r\n\r\nexport default function SimpleSelect(props) {\r\n    const classes = useStyles();\r\n    const [values, setValues] = React.useState({\r\n        age: null,\r\n        helperText: false\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        console.info('EVENT', values.age, Boolean((values.age != null && values.age !==\"\")));\r\n    },[values.age])\r\n\r\n    function handleChange(event) {\r\n        setValues({ [event.target.name]: event.target.value, helperText: !Boolean((event.target.value != null && event.target.value !== \"\")) })\r\n    }\r\n\r\n    return (\r\n        <form className={classes.root} autoComplete=\"off\">\r\n            <FormControl fullWidth required className={classes.formControl}>\r\n                <InputLabel htmlFor=\"age-required\">Age</InputLabel>\r\n                <Select\r\n                    value={values.age}\r\n                    onChange={handleChange}\r\n                    name=\"age\"\r\n                    inputProps={{ id: \"age-required\", \"aria-required\": true }}\r\n                    MenuProps={{ \"aria-required\": true }}\r\n                    className={classes.selectEmpty}\r\n                >\r\n                    <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                    </MenuItem>\r\n                    {props.selectData.map(data => (\r\n                        <MenuItem value={data}>{data}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n                {values.helperText && <FormHelperText><b style={{ color: 'red' }}>Required</b></FormHelperText>}\r\n            </FormControl>\r\n        </form>\r\n    );\r\n}\r\nSimpleSelect.propTypes = {\r\n    handleChange:PropTypes.func,\r\n    selectData:PropTypes.object.isRequired\r\n}","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles,useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nimport Grid from '@material-ui/core/Grid';\nimport {Input} from '../../components/Input.js'\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from 'react-select';\nimport Chip from '@material-ui/core/Chip';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport { ProductContext } from '../../context';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Multiselect from '../../components/Select';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport SelectPlaceholder from '../../components/SelectPlaceholder.js';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport {\n  Card,\n  CardHeader,\n  Divider,\nCardContent} from '@material-ui/core';\n  const useStyles = makeStyles(theme => ({\n    root: {\n      marginTop: theme.spacing(2)\n    },\n    fixedTag: {\n      padding: 0,\n      '& .MuiOutlinedInput-root':{\n        padding: 0,\n      }\n    },\n    button: {\n      margin: theme.spacing(1),\n    },\n    leftIcon: {\n      marginRight: theme.spacing(1),\n    },\n    rightIcon: {\n      marginLeft: theme.spacing(1),\n    },\n    iconSmall: {\n      fontSize: 20,\n    },\n  }));\n  function createData(name, calories, fat, carbs, protein) {\n    return { name, calories, fat, carbs, protein };\n  }\n  \n  const rows = [\n    createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n    createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n    createData('Eclair', 262, 16.0, 24, 6.0),\n    createData('Cupcake', 305, 3.7, 67, 4.3),\n    createData('Gingerbread', 356, 16.0, 49, 3.9),\n  ];\nexport default function Review(props) {\n  const classes = useStyles();\n  const { className, ...rest } = props;\n\n  const theme = useTheme();\n  const inputLabel = React.useRef(null);\n\n\n  const { productCtx, setProductCtx, masterData } = React.useContext(ProductContext);\n  const handleInputChange = type => e => {\n    setProductCtx({ ...productCtx, [type]: e.target.value  })\n  }\n  const handleChange = type => selectedOption => {\n    setProductCtx({ ...productCtx, [type]: selectedOption  })\n  };\n  const handlemetalcolorChange = selectedOption => {\n    setProductCtx({ ...productCtx, metal_color: selectedOption  })\n  };\n  const handlediamndcolorChange = selectedOption => {\n    setProductCtx({ ...productCtx, diamond_colour: selectedOption  })\n  };\n  const handlediamndclarityChange = selectedOption => {\n    setProductCtx({ ...productCtx, diamond_clarity: selectedOption  })\n  };\n\n  const handlemetalpurityChange = selectedOption => {\n    setProductCtx({ ...productCtx, metal_purity: selectedOption  })\n  };\n  function handleClick(e) {\n    var metalsarr  = productCtx.metals;\n    metalsarr.push(\"test\") \n    setProductCtx({ ...productCtx, metals: metalsarr })\n  }\n  return (\n    <React.Fragment>\n<Card\n  {...rest}\n  className={clsx(classes.root, className)}\n>\n  <CardHeader title=\"Default SKU For Display\n\" />\n  <Divider />\n  <CardContent className={classes.cardcontent}>\n    <Grid container xs={12} alignItems=\"center\" spacing={2}>\n    \n    \n    \n    \n    <Grid item xs={4} >\n\n                  \n                \n\n                  <Autocomplete\n                      id=\"product_category\"\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.default_metal_colour}\n                      onChange={handleChange('default_metal_colour')}\n                      options={productCtx.metalcolour}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Metal Colour\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        fullWidth\n\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n    </Grid>\n    <Grid item xs={4} >\n           \n\n                <Autocomplete\n                      id=\"product_category\"\n                      multiple\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.default_metal_purity}\n                      onChange={handleChange('default_metal_purity')}\n                      options={productCtx.metalpurity}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Metal Purity\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        fullWidth\n\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n   \n    </Grid>\n    {['BA','R','BR'].includes(productCtx.product_type_shortcode) ? \n    <Grid item xs={4} >\n           \n\n                  <Autocomplete\n                      id=\"product_category\"\n                      multiple\n                      isDisabled \n                      className={classes.fixedTag}\n                      defaultValue={productCtx.default_metal_size}\n                      onChange={handleChange('default_metal_size')}\n                      options={productCtx.selected_sizes}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Default Size\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        fullWidth\n\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n   \n    </Grid> : null}\n    {/* <Grid item xs={3} >\n                <Select\n                    value={productCtx.diamond_colour}\n                    placeholder=\"Diamond Colour\"\n                    onChange={handlediamndcolorChange}\n                    options={productCtx.masterData.diamondcolors}\n                  />\n   \n    </Grid>\n    <Grid item xs={3} >\n    <Select\n                    value={productCtx.diamond_clarity}\n                    placeholder=\"Diamond Clarity\"\n                    onChange={handlediamndclarityChange}\n                    options={productCtx.masterData.diamondclarities}\n                  />\n\n    </Grid>                 */}\n    \n    \n    \n    </Grid>\n    \n        <Grid item xs={6} >\n        </Grid>\n        </CardContent>\n        </Card>\n </React.Fragment>\n  );\n}","import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport SelectPlaceholder from '../../components/SelectPlaceholder.js'\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport {\n  Card,\n  CardHeader,\n  Divider,\n  Chip,\n  TextField,\nCardContent} from '@material-ui/core';\nimport { ProductContext } from '../../context';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(2)\n  },\n  fixedTag: {\n    padding: 0,\n    '& .MuiOutlinedInput-root':{\n      padding: 0,\n    }\n  },\n}));\n\nexport default function Review(props) {\n  const classes = useStyles();\n\n  const { productCtx, setProductCtx } = React.useContext(ProductContext);\n  const { className, ...rest } = props;\n  const handleChange = type => (event, value) => {\n    setProductCtx({ ...productCtx, [type]: value  })\n\n  };\n \n  \n  return (\n    <React.Fragment>\n         <Card\n  {...rest}\n  className={clsx(classes.root, className)}\n>\n  <CardHeader title=\"Type of Fit\" />\n  <Divider />\n  <CardContent className={classes.cardcontent}>\n    <Grid container xs={12} sm={12} spacing={2}>\n    <Grid item xs={6} sm={4} >\n                   \n                      \n           <Autocomplete\n                      id=\"product_category\"\n                      multiple\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.themes}\n                      onChange={handleChange('themes')}\n                      options={productCtx.masterData.themes.map(option => option.label)}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Select Themes\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        fullWidth\n\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n           \n           \n            </Grid>\n   \n    <Grid item xs={12} sm={4}>\n                     \n    \n\n              <Autocomplete\n                      id=\"product_category\"\n                      multiple\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.prod_styles}\n                      onChange={handleChange('prod_styles')}\n                      options={productCtx.masterData.styles.map(option => option.label)}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Style\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        fullWidth\n\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n    </Grid>\n    <Grid item xs={12} sm={4}>\n      \n    \n          <Autocomplete\n                      id=\"product_category\"\n                      multiple\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.occassions}\n                      onChange={handleChange('occassions')}\n                      options={productCtx.masterData.occasions.map(option => option.label)}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Occasions\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        fullWidth\n\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n    </Grid>\n    <Grid item xs={12} sm={4}>\n  \n   \n\n                  <Autocomplete\n                      id=\"product_category\"\n                      multiple\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.collections}\n                      onChange={handleChange('collections')}\n                      options={productCtx.masterData.collections.map(option => option.label)}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Collections\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        fullWidth\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n    </Grid>\n    <Grid item xs={12} sm={4} >\n    \n                  <Autocomplete\n                      id=\"product_category\"\n                      multiple\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.stonecount}\n                      onChange={handleChange('stonecount')}\n                      options={productCtx.masterData.stones.map(option => option.label)}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Collections\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        fullWidth\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n    </Grid>\n    <Grid item xs={12} sm={4}>\n    \n  \n\n<Autocomplete\n                      id=\"product_category\"\n                      multiple\n                      className={classes.fixedTag}\n                      defaultValue={productCtx.stonecolour}\n                      onChange={handleChange('stonecolour')}\n                      options={productCtx.masterData.gemstonecolor.map(option => option.label)}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Collections\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        fullWidth\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  />\n    </Grid>\n    \n    \n    </Grid>\n    \n        <Grid item xs={6} >\n        </Grid>\n        </CardContent>\n        </Card>\n </React.Fragment>\n  );\n}","import gql from 'graphql-tag';\n\nconst PRODUCTCATEGORY = gql`query {\n    allMasterProductCategories{\n        nodes {\n            alias\n            name\n            id\n          }\n    }\n    allMasterProductTypes {\n    nodes {\n      alias\n      id\n      name\n      shortCode\n    }\n  }\n  allMasterMaterials {\n    nodes {\n      alias\n      id\n      name\n    }\n  },\n  allMasterGenders {\n    nodes {\n      alias\n      id\n      name\n    }\n  },\n  allMasterDiamondTypes {\n    nodes {\n      diamondClarity\n      diamondColor\n      id\n    }\n  }\n  allMasterMetalsColors {\n    nodes {\n      alias\n      id\n      name\n      shortCode\n    }\n  },\n  allMasterDiamondsSettings {\n    nodes {\n      alias\n      id\n      name\n    }\n  },\n  allMasterDiamondsShapes {\n    nodes {\n      name\n      id\n      alias\n    }\n  },\n  allMasterThemes {\n    nodes {\n      alias\n      id\n      name\n    }\n  },\n\n  allMasterStyles {\n    nodes {\n      alias\n      id\n      name\n    }\n  },\n  allMasterOccasions {\n    nodes {\n      alias\n      id\n      name\n    }\n  },\n  allMasterCollections {\n    nodes {\n      id\n      alias\n      name\n    }\n  },\n  allMasterStonesColors {\n    nodes {\n      alias\n      id\n      name\n    }\n  },\n  allMasterStones {\n    nodes {\n      alias\n      id\n      name\n    }\n  },\n  allMasterMetalsColors {\n    nodes {\n      alias\n      id\n      name\n      shortCode\n    }\n  },\n  allMasterMetalsPurities {\n    nodes {\n      alias\n      id\n      name\n      shortCode\n    }\n  },\n  allMasterDiamondsColors {\n    nodes {\n      alias\n      id\n      name\n      shortCode\n    }\n  },\n  allMasterDiamondClarities {\n    nodes {\n      alias\n      id\n      name\n    }\n  },\n  allMasterVendors {\n    nodes {\n      id\n      name\n      shortCode\n      vendorDelivaryDays\n    \n    }\n  }\n  allProductLists(orderBy: PRODUCT_SERIES_DESC, first: 1) {\n    nodes {\n      productSeries\n      id\n    }\n  },\n  allMasterGemstonesTypes {\n    nodes {\n      alias\n      colorCode\n      id\n      name\n      shortCode\n    }\n  },\n  allMasterGemstonesShapes {\n    nodes {\n      alias\n      id\n      name\n    }\n  },\n  allMasterEarringBackings {\n    nodes {\n      name\n      createdAt\n      alias\n      id\n      nodeId\n      updatedAt\n    }\n  }\n  allMasterGemstonesSettings {\n    nodes {\n      alias\n      id\n      name\n    }\n  }\n  }`\nconst PRODUCTFILTERMASTER = gql`\nquery  {\n  allMasterProductCategories {\n    nodes {\n      updatedAt\n      shortCode\n      name\n      id\n      createdAt\n      alias\n    }\n  }\n  allMasterProductTypes {\n    nodes {\n      updatedAt\n      shortCode\n      name\n      id\n      createdAt\n      alias\n      displayOrder\n    }\n  }\n}\n`;\n\nconst ALLPRODUCTLIST = gql`\nquery  {\n  allProductLists(first: 500)  {\n    nodes {\n      id\n      nodeId\n      productName\n      productCategory\n      productType\n      productId\n      createdAt\n      isactive\n      transSkuListsByProductId(condition: {isdefault: true}) {\n        nodes {\n          skuUrl\n          discount\n        }\n      }\n    }\n    totalCount\n  }\n}\n`;\nconst PRODUCTLIST = (category) => gql`\nquery($Veiw: Int!, $Offset: Int!) {\n  allProductLists(first: $Veiw, offset: $Offset) {\n    nodes {\n      id\n      nodeId\n      productName,\n      productCategory,\n      productType\n      productId,\n      createdAt\n      isactive,\n      transSkuListsByProductId(condition: {isdefault: true}) {\n        nodes {\n          skuUrl\n          discount\n        }\n      }\n    }\n    totalCount\n  }\n}\n`;\n\n\n\n// const PRODUCTLIST  = (category) =>  gql`\n// query  {\n//   allProductLists ${category ? `(${category ? 'filter: {productCategory: {equalTo: \"Jewellery\"}}' : ''})` : \"\"} {\n//     nodes {\n//       id\n//       nodeId\n//       productName,\n//       productCategory,\n//       productType\n//       productId,\n//       createdAt\n//       isactive,\n//       transSkuListsByProductId(condition: {isdefault: true}) {\n//         nodes {\n//           skuUrl\n//           discount\n//         }\n//       }\n//     }\n//     totalCount\n//   }\n// }\n// `;\n\nconst GOLDPRICELIST = gql`\nquery MyQuery($vendorCode: String!) {\n    allGoldPriceSettings(condition: {vendorCode: $vendorCode}) {\n    nodes {\n      purity\n      vendorCode\n      updatedAt\n      sellingPriceType\n      sellingPrice\n      material\n      id\n      createdAt\n      costPrice\n    }\n    totalCount\n  }\n}`;\n\nconst DIAMONDMARKUP = gql`\nquery MyQuery($vendorCode: String!) {\n  allPricingMarkups(condition: {material: $vendorCode}) {\n    nodes {\n      updatedAt\n      sellingPriceMin\n      sellingPriceMax\n      material\n      markupValue\n      markupType\n      id\n      createdAt\n    }\n    totalCount\n  }\n}`;\n\nconst DIAMONDPRICELIST = gql`\nquery MyQuery($vendorCode: String!) {\n  allDiamondPriceSettings(condition: {vendorCode: $vendorCode}) {\n    nodes {\n      costPrice\n      createdAt\n      diamondClarity\n      diamondColour\n      id\n      sellingPrice\n      sellingPriceType\n      updatedAt\n      vendorCode\n    }\n    totalCount\n  }\n}`;\n\n\nconst VENDORLIST =`\nquery {\n  allMasterVendors {\n    nodes {\n      vendorDelivaryDays\n      updatedAt\n      state\n      shortCode\n      partnerCategory\n      name\n      organization\n      gstNo\n      currency\n      createdAt\n      city\n      address\n    }\n  }\n}`;\nconst MAKINGCHARGEPRICELIST = gql`\nquery MyQuery($vendorCode: String!,$ratetype: Int!) {\n  allMakingChargeSettings(condition: {vendorCode: $vendorCode,rateType: $ratetype}) {\n    nodes {\n      weightStart\n      weightEnd\n      vendorCode\n      updatedAt\n      sellingPriceType\n      rateType\n      purity\n      priceType\n      price\n      material\n      id\n      createdAt\n    }\n    totalCount\n  }\n}`;\nconst GEMPRICELIST = gql`\nquery MyQuery($vendorCode: String!) {\n  allGemstonePriceSettings(condition: {vendorCode: $vendorCode}) {\n    nodes {\n      price\n      rateType\n      priceType\n      sellingPriceType\n      vendorCode\n      weightEnd\n      weightStart\n      updatedAt\n      id\n      createdAt\n      gemstoneType\n    }\n    totalCount\n  }\n}`;\nconst PRODUCTLISTSTATUSEDIT = gql`\nmutation MyMutation($productId:String!,$isActive:Boolean!) {\n  __typename\n  updateProductListByProductId(input: {productId: $productId, productListPatch: {isactive: $isActive}}) {\n    clientMutationId\n    productList {\n      isactive\n    }\n  }\n}\n`;\nconst PRODUCTDIAMONDTYPES = `\nquery{\n  allMasterDiamondTypes {\n    nodes {\n      diamondClarity\n      diamondColor\n      id\n    }\n  }\n}\n`;\nconst PRODUCTEDIT = `\nquery MyQuery($productId: String!) {\n  productListByProductId(productId: $productId) {\n    productMetalcoloursByProductId {\n      nodes {\n        productColor\n        id\n      }\n    }\n    productName\n    productType\n    vendorCode\n    gender\n    isactive\n    productMaterialsByProductSku {\n      nodes {\n        materialName\n      }\n    }\n    productDiamondsByProductSku {\n      nodes {\n        diamondClarity\n        diamondColour\n        diamondSettings\n        diamondShape\n        diamondType\n        id\n        stoneCount\n        stoneWeight\n      }\n    }\n    productGemstonesByProductSku {\n      nodes {\n        gemstoneSetting\n        gemstoneShape\n        gemstoneSize\n        gemstoneType\n        gemstonsSize\n        id\n        stoneCount\n        stoneWeight\n      }\n    }\n    productImagesByProductId {\n      nodes {\n        id\n        imagePosition\n        imageUrl\n        productColor\n      }\n    }\n    productPuritiesByProductId {\n      nodes {\n        purity\n        id\n      }\n    }\n    productThemesByProductId(condition: {isActive: true}) {\n      nodes {\n        themeName\n        id\n      }\n    }\n    productStonecolorsByProductId {\n      nodes {\n        id\n        stonecolor\n      }\n    }\n    productStylesByProductId(condition: {isActive: true}) {\n      nodes {\n        styleName\n        id\n      }\n    }\n    productCollectionsByProductId {\n      nodes {\n        collectionName\n        id\n      }\n    }\n    productOccassionsByProductId(condition: {isActive: true}) {\n      nodes {\n        occassionName\n        id\n      }\n    }\n    productStonecountsByProductId {\n      nodes {\n        id\n        stonecount\n      }\n    }\n    transSkuListsByProductId {\n      nodes {\n        skuSize\n        diamondType\n        metalColor\n        purity\n        productId\n        skuWeight\n        generatedSku,\n        costPrice\n        costPriceTax\n        discountPrice\n        discountPriceTax\n        markupPrice\n        markupPriceTax\n        sellingPrice\n        sellingPriceTax\n        isReadyToShip\n        discount\n        isActive\n        isdefault,\n        vendorDeliveryTime\n        id\n        isActive\n        transSkuDescriptionsBySkuId {\n          nodes {\n            skuDescription\n            certificate\n            ringsizeImage\n          }\n        }\n      }\n    }\n    productCategory\n    sizeVarient\n  }\n}\n\n`;\n  export {\n    PRODUCTCATEGORY,\n    PRODUCTLIST,\n    PRODUCTEDIT,\n    PRODUCTLISTSTATUSEDIT,\n    PRODUCTDIAMONDTYPES,\n    GOLDPRICELIST,\n    DIAMONDPRICELIST,\n    GEMPRICELIST,\n    MAKINGCHARGEPRICELIST,\n    VENDORLIST,\n    ALLPRODUCTLIST,\n    DIAMONDMARKUP,\n    PRODUCTFILTERMASTER\n  }","import { gql } from 'apollo-boost';\n\nexport const PRODUCTCATEGORY = gql`query {\n    allMasterProductCategories{\n        nodes {\n            alias\n            name\n            id\n          }\n    }\n    allMasterProductTypes {\n    nodes {\n      alias\n      id\n      name\n      shortCode\n    }\n  },\n  allMasterStonesColors {\n    nodes {\n      alias\n      id\n      name\n    }\n  },\n  allMasterStones {\n    nodes {\n      alias\n      id\n      name\n    }\n  }\n  }`\n\nexport const ORDERS = gql`query {\n  allOrders {\n    nodes {\n      paymentMode\n      paymentStatus\n      updatedAt\n      createdAt\n      id\n      shoppingCartByCartId {\n        shoppingCartItemsByShoppingCartId {\n          nodes {\n            transSkuListByProductSku {\n              generatedSku\n              productListByProductId {\n                productCategory\n                productType\n                productCollectionsByProductId {\n                  nodes {\n                    collectionName\n                  }\n                }\n              }\n            }\n          }\n        }\n        giftwrapsByCartId {\n          nodes {\n            message\n            giftFrom\n            giftTo\n          }\n        }\n        \n        cartAddressesByCartId {\n          nodes {\n            firstname\n            contactNumber\n            addressline1\n            addressline2\n            city\n            pincode\n            state\n          }\n        }\n        userProfileByUserprofileId {\n          firstName\n          mobile\n          email\n        }\n      }\n      paymentDetailsByOrderId {\n        nodes {\n          paymentResponse\n        }\n      }\n    }\n  }\n\n}`\n\nexport const MATERIALMASTER = gql`query {\n        allMasterVendors {\n    nodes {\n      name\n      id\n    }\n  },\n  allMasterProductCategories {\n    nodes {\n      name\n      id\n    }\n  },\n  allMasterProductTypes {\n    nodes {\n      name\n      id\n    }\n  },\n  allMasterMetalsPurities {\n    nodes {\n      name\n      id\n    }\n  },\n   allMasterMaterials {\n    nodes {\n      alias\n      id\n      name\n    }\n  }\n}`","import { PRODUCTCATEGORY } from \"../graphql/query\";\nimport { MATERIALMASTER,ORDERS } from \"../services/queries\";\nimport apidata from '../screens/Productupload/data.json';\n\nexport const productCategory = {\n    query: PRODUCTCATEGORY,\n    mapper: (response) => {\n        const category = response.allMasterProductCategories.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const product_type = response.allMasterProductTypes.nodes.map(_ => ({\n            ..._,\n            value: _.shortCode,\n            label: _.name,\n            title: _.name\n        }))\n        const material = response.allMasterMaterials.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label:_.name\n        }))\n        const gender = response.allMasterGenders.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const vendorcode  = response.allMasterVendors.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name,\n            display: _.name +' ('+_.shortCode+' )'\n        }))\n        \n        const diamondsettings = response.allMasterDiamondsSettings.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const diamondshapes = response.allMasterDiamondsShapes.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const themes = response.allMasterThemes.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name,\n            themeName:_.name\n        }))\n        const styles = response.allMasterStyles.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name,\n            styleName: _.name\n        }))\n        \n        const occasions = response.allMasterOccasions.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name,\n            occassionName: _.name\n        }))\n        const collections = response.allMasterCollections.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name,\n            collectionName: _.name\n        }))\n        const gemstonecolor = response.allMasterStonesColors.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name,\n            stonecolor:_.name\n        }))\n        const stones = response.allMasterStones.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name,\n            stonecount:_.name\n        }))\n        const metalcolour = response.allMasterMetalsColors.nodes.map(_ => ({\n            ..._,\n            productColor: _.name,\n            value: _.id,\n            label: _.name\n        }))\n        const metalpurity = response.allMasterMetalsPurities.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name,\n            purity: _.name\n        }))\n        const diamondcolors = response.allMasterDiamondsColors.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n\n        const diamondclarities = response.allMasterDiamondClarities.nodes.map(_ => ({\n            ..._,\n            value: _.id,\n            label: _.name\n        }))\n        const productseries = response.allProductLists.nodes.map(_ => ({\n            ..._,\n            value: _.productSeries,\n        }))\n        const gemstontypes = response.allMasterGemstonesTypes.nodes.map(_ => ({\n            ..._,\n            value: _.shortCode,\n            label:_.name\n        }))\n        \n        const gemstonshapes = response.allMasterGemstonesShapes.nodes.map(_ => ({\n            ..._,\n            value: _.alias,\n            label:_.name\n        }))\n        const gemstonesettings = response.allMasterGemstonesSettings.nodes.map(_ => ({\n            ..._,\n            value: _.alias,\n            label:_.name\n        }))\n        const earringbacking = response.allMasterEarringBackings.nodes.map(_ => ({\n            ..._,\n            value: _.alias,\n            label:_.name\n        }))\n\n        const diamondtypes = response.allMasterDiamondTypes.nodes.map(_ => ({\n            ..._,\n            value: _.diamondColor+_.diamondClarity,\n            label:_.diamondColor+_.diamondClarity\n        }))\n\n        \n        \n        const metals = apidata.metals\n        \n        return { category,\n             product_type, \n             material, \n             gender,\n             vendorcode, \n             metalcolour, \n             metals, \n             diamondsettings,\n             diamondshapes,\n            themes,\n            styles,\n            occasions,\n            collections,\n            gemstonecolor,\n            stones,\n            metalpurity,\n            diamondcolors,\n            diamondtypes,\n            diamondclarities,\n            productseries,\n            gemstontypes,\n            gemstonshapes,\n            gemstonesettings,\n            earringbacking\n        }\n    }\n}\n\nexport const orderList = {\n    query: ORDERS,\n    mapper: (response) => {\n        const orders = response.allOrders.nodes.map(_ => ({\n            ..._\n                }))\n               \n        return {\n            orders\n        }\n    }\n}\nexport const materialMaster = {\n    query: MATERIALMASTER,\n    mapper: (response) => {\n        const materials = response.allMasterMaterials.nodes.map(_ => ({\n            ..._\n                }))\n        const vendors = response.allMasterVendors.nodes.map(_ => ({\n                    ..._\n        }))\n\n        const product_categories = response.allMasterProductCategories.nodes.map(_ => ({\n            ..._\n        }))\n        const product_types = response.allMasterProductTypes.nodes.map(_ => ({\n            ..._\n        }))\n        \n        return {\n            vendors,\n            product_categories,\n            product_types,\n            materials\n        }\n    }\n\n\n}","import React from 'react';\nimport { productCategory } from '../services/mapper';\nimport { API_URL } from '../config';\nimport { isString } from 'util';\n\nconst TOKEN = 'token'\n\nconst initialNetworkCtx = {\n    networkCtx: {\n        mapper: productCategory,\n        status: { called: false, data: [], loading: true, error: false, parsedData: [] },\n        notRequested: true\n    },\n    setNetworkCtx: () => null,\n    sendNetworkRequest: () => null\n}\n\nconst sendNetworkRequest = async (url, params, data, auth = false) => {\n    url = API_URL+url;\n    console.info('URL', url, data)\n    const method = data ? 'POST' : 'GET', \n        headers = {\n            'Content-Type': 'application/json'\n        };\n    let resdata = null;\n    if(auth){\n        const token = localStorage.getItem(TOKEN)\n        if(token) headers[\"auth\"] = token\n       // else window.location = '/'\n    }\n    const response = await fetch(url, {\n        method, body: isString(data) ? data : JSON.stringify(data), headers\n    })\n\n    if(response.status < 400){\n        resdata = await response.json();\n    } else {\n        alert(`${response.status}:${response.statusText} - Unable to complete your request to \\n${url}`)\n    }\n    return resdata;\n}\n\nexport const NetworkContext = React.createContext(initialNetworkCtx);\n\nexport const NetworkConsumer = NetworkContext.Consumer;\n\nexport const NetworkProvider = (props) => {\n\n    const [ networkCtx, setNetworkCtx ] = React.useState(initialNetworkCtx.networkCtx);\n\n    return(\n        <NetworkContext.Provider value={{ networkCtx, setNetworkCtx, sendNetworkRequest }} >\n            {props.children}\n        </NetworkContext.Provider>\n    )\n}","import React from 'react';\nimport { makeStyles,useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport CardMedia from '@material-ui/core/CardMedia';\n\n // Import React FilePond\n import { FilePond, registerPlugin } from 'react-filepond';\n import TextField from '@material-ui/core/TextField';\n\n // Import FilePond styles\n import 'filepond/dist/filepond.min.css';\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport FilePondPluginImageValidateSize from 'filepond-plugin-image-validate-size';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename';\n\n// Register the plugins\n \nimport { ProductContext } from '../../context';\nimport { NetworkContext } from '../../context/NetworkContext';\nimport { file } from '@babel/types';\n\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview,FilePondPluginImageValidateSize,FilePondPluginFileRename);\n\n\n  const useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n      },\n      paper: {\n        height: 140,\n      },\n      img: {\n        height: '100%',\n        width:'100%',\n        objectFit:'contain'\n      },\n      control: {\n        padding: theme.spacing(2),\n      },\n      input: {\n        display: 'none',\n      },\n  }));\n  \n  \n  \n  \nexport default function Review() {\n  let count= 0;\n  const classes = useStyles();\n  const { productCtx, setProductCtx } = React.useContext(ProductContext);\n  const { sendNetworkRequest } = React.useContext(NetworkContext);\n  const [metalcolour, setMetalcolour] = React.useState([]);\n  const [files, setFiles] = React.useState([]);\n  const [images,setImages] = React.useState({});\n  React.useEffect(() => {\n    let metalcolour = []\n    let product_images = [];\n\n    productCtx.metalcolour.forEach(element => {\n      if(element.name === productCtx.default_metal_colour)\n      {\n        product_images[element.name] = [] \n        if(metalcolour.length > 0)\n        {\n          metalcolour.unshift(element);\n        }else{\n          metalcolour.push(element)\n        }\n\n      }else{\n        metalcolour.push(element)\n        product_images[element.name] = []\n      }\n    })\n    setMetalcolour(metalcolour)\n\n}, []);\n  async function uploadimagetoserver(bodaydata, imageposition, imagecolor, uploadtype)\n  {\n      \n//alert(JSON.stringify(bodaydata))\n\n  let prodimages = productCtx.product_images;\n  if(prodimages)\n  {\n    var prodid = \"S\"+productCtx.product_type.shortCode+(productCtx.masterData.productseries[0].value+1)\n    let imagecolourobj = productCtx.product_images[imagecolor];\n    var imagecount  = 1;\n    if(imagecolourobj)\n    {\n      imagecount = imagecolourobj.length + 1;\n    }\n\n    let imagename = (prodid+\"-\"+(imagecount)+imagecolor.charAt(0));\n    let responsedata = await sendNetworkRequest('/uploadimage', {}, {image:bodaydata.fileExtension, filename :imagename, product_id: prodid },false)\n    var returnData = responsedata.data.returnData;\n    var signedRequest = returnData.signedRequest;\n    var url = returnData.url;\n    console.log(\"responseurl\"+url);\n    var filepathname = returnData.filepath\n    filepathname = filepathname.replace(\"base_images\", \"product/\"+prodid);\n    var options = {\n        headers: {\n            'Content-Type': bodaydata.fileExtension,\n            'Access-Control-Allow-Origin':'*'\n        }\n    };\n    \n    if(imagecolourobj)\n    {\n      const imageobj = {\n        \"name\": (prodid+\"_\"+(imagecolourobj.length+1)+imagecolor.charAt(0)),\n        \"position\":(imagecolourobj.length+1),\n        \"color\":imagecolor,\n        \"image_url\":filepathname,\n        \"url\":'https://s3.ap-south-1.amazonaws.com/styloribaseimages/'+filepathname\n      }\n      if(uploadtype === 'edit')\n      {\n        imagecolourobj[imageposition] = imageobj;\n\n      }else\n      {\n        imagecolourobj.push(imageobj)\n\n      }\n      prodimages[imagecolor] = imagecolourobj;\n\n    }else\n    {\n      const imageobj = {\n        \"name\": (prodid+\"_1\"+imagecolor.charAt(0)),\n        \"position\":imageposition,\n        \"color\":imagecolor,\n        \"image_url\":filepathname,\n        \"url\":'https://s3.ap-south-1.amazonaws.com/styloribaseimages/'+filepathname\n      }\n      imagecolourobj = [];\n      imagecolourobj.push(imageobj)\n    }\n    prodimages[imagecolor] = imagecolourobj;\n    setProductCtx({ ...productCtx, product_images: prodimages })\n    // setFiles([])\n  }\n  await axios.put(signedRequest, bodaydata.file, options)\n\n  \n\n  }\n\n  function removefiles(imageposition, imagecolor)\n  {\n  \n\n    let prodimages = productCtx.product_images;\n\n  if(prodimages)\n  {\n    let imagecolourobj = prodimages[imagecolor];\n\n    if(imagecolourobj)\n    {\n      if(imagecolourobj.length > imageposition)\n      {\n        let removedfile = imagecolourobj[imageposition]\n\n      imagecolourobj[imageposition] = {...removedfile, url: \"\"}\n\n      }\n\n    }\n    prodimages[imagecolor] = imagecolourobj;\n    setProductCtx({ ...productCtx, product_images: prodimages })\n//alert(JSON.stringify(productCtx.product_images))\n  }\n  }\n  \n const handleInit = () =>\n    {\n     // alert(\"initialized\")\n    }\n  return (\n    <React.Fragment>\n         <Grid container className={classes.root} spacing={2}>\n\n     <Grid item direction=\"row\" xs={12}>\n       <Grid container  justify=\"left\" spacing={2}>\n\n          {metalcolour === undefined ? null : metalcolour.map((value,index) => ( \n            <Grid xs={12} container spacing={1} item>\n            <Grid  xs={12}  item>\n\n             <Typography component=\"h6\" variant=\"h6\" align=\"left\">\n            {value.name}\n             </Typography> \n             </Grid>\n             {/* {productCtx.product_images[value.name] === undefined ? null : productCtx.product_images[value.name].map((row,imageindex) => (\n\n            <Grid  xs={3} alignItems=\"center\" item>\n                 <Typography component=\"h6\" variant=\"h6\" align=\"left\">\n            {row.url}\n             </Typography> \n           {row.url.length === 0 ? <FilePond \n                          labelIdle=\"Image For\"\n                          allowMultiple={true}\n                          maxFiles={3}  \n                          files = {files}\n                          onupdatefiles={fileItem => {\n                              // Set currently active file objects to this.state\n                            \n                          }}\n                          onaddfile={(error, fileItem)=> {\n                            uploadimagetoserver(fileItem, imageindex, value.name, \"edit\")\n                          }}\n                          onremovefile={(error, fileItem)=>{\n\n                          }}>\n                </FilePond> :  <FilePond \n                          labelIdle=\"Image For\"\n                          files={[{\n                            source: row.url,\n                            options: {\n                                type: 'local'\n                            }\n                        }]}\n                          server={{\n                            load: (source, load) => {\n                                // simulates loading a file from the server\n                                fetch(source).then(res => \n                                  \n                                  res.blob()).then(load);\n                            }\n                        }} \n                          onupdatefiles={fileItems => {\n                              // Set currently active file objects to this.state\n                            \n                          }}\n                          onaddfile={(error, fileItems)=> {\n                            \n                          }}\n                          onremovefile={(error, fileItem)=>{\n                            removefiles(imageindex, value.name)\n                          }}>\n                </FilePond>\n               \n                \n                         } </Grid>\n             ))} */}\n            <Grid xs={12} sm={12} md={12} item>\n              <FilePond  \n                          allowImageValidateSize\n                          imageValidateSizeMinWidth=\"2400\"\n                          imageValidateSizeMinHeight=\"2400\"\n                          imageValidateSizeMeasure={(file)=>new Promise((resolve,reject)=>{\n                            console.log(file);\n                            console.log('filepond property');\n                            debugger;\n                          })}\n                          labelIdle=\"Upload Image\" \n                          allowMultiple={true}  \n                          //files = {files}\n                          onupdatefiles={fileItem => {\n                              // Set currently active file objectsfiles to this.state\n                            \n                          }}\n                          onaddfile={(error, fileItem)=> {\n                            uploadimagetoserver(fileItem, index, value.name, \"add\")\n                          }}\n                          onremovefile={(error, fileItem)=>{\n\n                          }}\n                          fileRenameFunction={\n                            (file) => new Promise(resolve => {\n                              var prodid = \"S\"+productCtx.product_type.shortCode+(productCtx.masterData.productseries[0].value+1)\n                              let imagecolourobj = productCtx.product_images[value.name];\n                              var imagecount  = 1;\n                              if(imagecolourobj)\n                              {\n                                imagecount = imagecolourobj.length + 1;\n                              }\n                              let imagename = (prodid+\"_\"+(imagecount)+value.name.charAt(0))+file.extension;\n                              resolve(imagename)\n                              \n                          })\n                           } \n                          >\n                </FilePond>\n                {/* <Grid container xs={12} alignItems=\"center\" spacing={1} item>\n                <Grid  xs={8} item>\n\n                <TextField\n                      variant=\"outlined\"\n                      margin=\"dense\"\n                      fullWidth\n                      value={\"S\"+productCtx.product_type_shortcode+(productCtx.masterData.productseries[0].value+1)+\"_1\"+ value.name.charAt(0)}\n                      id=\"imagename\"\n                      name=\"imagename\"\n                      label=\"imagename\"\n                      />  \n                                        </Grid>          \n\n                <Grid  xs={4}  item>\n\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"small\"\n                    className={classes.button}\n                  >Upload</Button> \n                                    </Grid>          \n  \n                  </Grid>           */}\n            </Grid>\n            \n            </Grid>\n           ))} \n       </Grid>\n     </Grid>\n\n    </Grid>\n \n </React.Fragment>\n  );\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\n\n\n  \n  \n  \n  \nexport default function Review() {\n \n  return (\n    <React.Fragment>\n    <Grid container xs={12} spacing={2}>\n    <Grid item xs={12} >\n    <Typography component=\"h6\" variant=\"h6\" align=\"left\">\n            Page Not Found\n          </Typography> \n    </Grid>\n    \n        </Grid>\n </React.Fragment>\n  );\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport ReactDOM from 'react-dom';\nimport PivotTableUI from 'react-pivottable/PivotTableUI';\nimport 'react-pivottable/pivottable.css'\nimport Typography from '@material-ui/core/Typography';\nimport { ProductContext } from '../../context';\nimport TableRenderers from 'react-pivottable/TableRenderers';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport createPlotlyRenderers from 'react-pivottable/PlotlyRenderers';\n\n// create Plotly React component via dependency injection\nconst Plot = createPlotlyComponent(window.Plotly);\n\n// create Plotly renderers via dependency injection\nconst PlotlyRenderers = createPlotlyRenderers(Plot);\n\n// see documentation for supported input formats\nconst data = [{\n'id':'1',\n'productid':'SE30002',\n'productname':'Gold Ring', \n'purity':'18K',\n'material':'Gold',\n'diamondcolor':'EF',\n'diamondclarity':'VVS',\n'gemstone':'Navrathna',\n'size':'18',\n'costprice':30000,\n'sellingprice':38000,\n'margin':8000\n}, \n{\n  'id':'2',\n  'productid':'SE30002',\n  'productname':'Diamond Ring', \n  'purity':'18K',\n  'material':'Diamond',\n  'diamondcolor':'EF',\n  'diamondclarity':'VVS',\n  'gemstone':'Navrathna',\n  'size':'12',\n  'costprice':70000,\n  'sellingprice':98000,\n  'margin':28000\n  }\n];\n\n  \n  const dimensions = [\n    {value: 'firstName', title: 'First Name'}\n  ]\n\n  const reduce = function(row, memo) {\n    memo.amountTotal = (memo.amountTotal || 0) + parseFloat(row.transaction.amount)\n    return memo\n  }\n\n  const calculations = [\n    {\n      title: 'Amount', value: 'amountTotal',\n      template: function(val, row) {\n        return '$' + val.toFixed(2)\n      },\n      sortBy: function(row) {\n        return isNaN(row.amountTotal) ? 0 : row.amountTotal\n      }\n    }\n  ]\n  \n  \n  \nexport default function Pivot(props) {\n  const { productCtx, setProductCtx, masterData } = React.useContext(ProductContext);\n  function setcurrentstate(s)\n  {\n    setProductCtx({ ...productCtx, s })\n\n  }\n  return (\n    <React.Fragment>\n    <Grid container xs={12} spacing={2}>\n    <Grid item xs={12} >\n    <PivotTableUI\n                data={data}\n                onChange={s => setcurrentstate(s)}\n                renderers={Object.assign({}, TableRenderers, PlotlyRenderers)}\n                {...productCtx.s}\n\n          />\n    </Grid>\n    \n        </Grid>\n </React.Fragment>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Paper from '@material-ui/core/Paper';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport AddressForm from './AddressForm';\nimport PaymentForm from './PaymentForm';\nimport Review from './Review';\nimport { Grid } from '@material-ui/core';\nimport Collapse from '@material-ui/core/Collapse';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport List from '@material-ui/core/List';\nimport StarBorder from '@material-ui/icons/StarBorder';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\nimport Step4 from './Step4';\nimport Step5 from './Step5';\nimport Step6 from './Step6';\nimport Step7 from './Step7';\nimport Step8 from './Step8';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport { ProductContext } from '../../context';\nimport { NetworkContext } from '../../context/NetworkContext';\nimport { element } from 'prop-types';\n\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    position: 'relative',\n  },\n  layout: {\n    width: 'auto',\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n    background: \"#fff\"\n  },\n  stepper: {\n    padding: theme.spacing(1, 0, 1),\n    background: \"#fff\"\n\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  nested: {\n    paddingLeft: theme.spacing(4),\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n}));\n\n\nfunction getStepContent(step) {\n  switch (step) {\n    case \"Step1\":\n    return <AddressForm />;\n    case \"Step2\":\n      return <PaymentForm />;\n    case \"Step3\":\n      return <Review />;\n    case \"Step4\":\n      return <Step5 />;\n    case \"Step5\":\n      return <Step4 />;  \n    case \"Step6\":\n      return <Step6 />;\n  \n    case \"Step7\":\n      return <Step7 />;    \n    default:\n      throw new Error('Unknown step');\n  }\n}\n\nexport default function Productupload() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const { productCtx,setProductCtx} = React.useContext(ProductContext);\n  const { sendNetworkRequest } = React.useContext(NetworkContext);\n  const [failure, setfailure] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n  const [loading, setLoading] = React.useState(false);\n\n  const handleClick = () => {\n    setSuccess(true);\n  };\n \n  const handleClose =  (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setSuccess(false);\n  };\n  const handleNext = async () => {\n    var isvalid = true;\n    var  error_content = {}\n    // if(productCtx.error_message)\n    // {\n    //   error_content = productCtx.error_message\n\n    // }\n\n    if(activeStep === 0)\n    {\n    if(!productCtx.product_type)\n    {\n      isvalid = false\n      error_content['product_type'] = \"Error messsage\";\n     \n    }\n    if(!productCtx.productname)\n    {\n      isvalid = false\n      error_content['productname'] = \"Error messsage\" \n    }\n    if(!productCtx.product_categoy)\n    {\n      isvalid = false\n      error_content['product_categoy'] = \"Error messsage\" \n    }\n\n    if(!productCtx.metalcolour)\n    {\n      isvalid = false\n      error_content['metalcolour'] = \"Error messsage\" \n    }\n    if(!productCtx.material_names)\n    {\n      isvalid = false\n      error_content['material_names'] = \"Error messsage\" \n    }\n    if(!productCtx.metalpurity || productCtx.metalpurity.length === 0)\n    {\n      isvalid = false\n\n      error_content['metalpurity'] = \"Error messsage\" \n    }\n    if(!productCtx.metalcolour || productCtx.metalcolour.length === 0)\n    {\n      isvalid = false\n\n      error_content['metalcolour'] = \"Error messsage\" \n    }\n    \n    if(!productCtx.vendorcode)\n    {\n      isvalid = false\n      error_content['vendorcode'] = \"Error messsage\" \n    }\n    if(!productCtx.vendorleadtime)\n    {\n      isvalid = false\n      error_content['vendorleadtime'] = \"Error messsage\" \n    }\n\n    if(!productCtx.default_metal_colour)\n    {\n      isvalid = false\n      error_content['default_metal_colour'] = \"Error messsage\" \n    }\n    if(!productCtx.default_metal_purity)\n    {\n      isvalid = false\n      error_content['default_metal_purity'] = \"Error messsage\" \n    }\n    if(!productCtx.productvendorcode)\n    {\n      isvalid = false\n      error_content['productvendorcode'] = \"Error messsage\" \n    }\n    if(!productCtx.earringbacking && productCtx.product_type.alias === 'Earrings' )\n    {\n      isvalid = false\n      error_content['earringbacking'] = \"Error messsage\" \n    }\n    if(!productCtx.selectedgender)\n    {\n      isvalid = false\n      error_content['selectedgender'] = \"Error messsage\" \n    }\n    if((!productCtx.selected_sizes || productCtx.selected_sizes.length === 0 )  && productCtx.product_type === 'Rings')\n    {\n\n      isvalid = false\n      error_content['selected_sizes'] = \"Error messsage\" \n    }\n\n    if((!productCtx.default_size || productCtx.default_size.length === 0 )  && productCtx.product_type === 'Rings')\n    {\n\n      isvalid = false\n      error_content['default_size'] = \"Error messsage\" \n    }\n   // isvalid = true;\n  }\n\n  if(activeStep === 1)\n  {\n    productCtx.metalpurity.forEach( element => {\n      const keyvalue = (element.name)+'_metal_weight'\n\n      if((!productCtx[keyvalue] || productCtx[keyvalue].length === 0 ))\n    {\n      isvalid = false\n\n      error_content[keyvalue] = \"Error messsage\" \n\n    }\n    \n    })\n    if((!productCtx.themes || productCtx.themes.length === 0 ))\n    {\n      isvalid = false\n      error_content['themes'] = \"Error messsage\" \n    }\n    if(productCtx.product_type_shortcode === 'R')\n    {\n      if(!productCtx.metal_height)\n      {\n        isvalid = false\n        error_content['metal_height'] = \"Error messsage\" \n      }\n      if(!productCtx.metal_width)\n      {\n        isvalid = false\n        error_content['metal_width'] = \"Error messsage\" \n      }\n    }\n    \n    if((!productCtx.themes || productCtx.themes.length === 0 ))\n    {\n      isvalid = false\n      error_content['themes'] = \"Error messsage\" \n    }\n    if((!productCtx.prod_styles || productCtx.prod_styles.length === 0 ))\n    {\n      isvalid = false\n      error_content['prod_styles'] = \"Error messsage\" \n    }\n    if((!productCtx.occassions || productCtx.occassions.length === 0 ))\n    {\n      isvalid = false\n      error_content['occassions'] = \"Error messsage\" \n    }\n    // if((!productCtx.collections || productCtx.collections.length === 0 ))\n    // {\n    //   isvalid = false\n    //   error_content['collections'] = \"Error messsage\" \n    // }\n\n  //  isvalid = true;\n\n\n  }\n    \n\n\n    setProductCtx({...productCtx,error_message:error_content})\n     if(activeStep === productCtx.steps.length - 1){\n      console.info('HANDLE',sendNetworkRequest);\n     const productseries = productCtx.masterData.productseries[0].productSeries\n\n      delete productCtx['masterData'];\n\n      var formdata = productCtx\n      formdata['productseries'] = productseries\n     console.log(\"><><><><><\")\n     console.log(JSON.stringify(formdata))\n      setLoading(true)\n       await sendNetworkRequest('/productupload', {}, formdata)\n      setLoading(false)\n      setSuccess(true)\n      await sleep(500)\n      window.location.replace('/productlist')\n    }else{\n       if(isvalid)\n       {\n        setActiveStep(activeStep + 1);\n  \n      \n        }\n     }\n    \n\n\n\n\n\n    \n      //else\n    //  {\n    //  }\n\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n  async  function sleep(millis) {\n    return new Promise(resolve => setTimeout(resolve, millis));\n  }\n  \n  return (\n    \n    <Grid item xs={12} sm={12}  >\n       <Snackbar open={success} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} >\n          Product Created Successfully\n        </Alert>\n      </Snackbar>\n\n    <Snackbar open={loading} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"info\">\n          Please Wait ...\n        </Alert>\n  </Snackbar> \n\n      <Snackbar open={failure} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          Please try again\n        </Alert>\n      </Snackbar>\n        <Paper className={classes.paper}>\n          <Stepper activeStep={activeStep} className={classes.stepper}>\n            {productCtx.steps.map((label, index) => (\n              <Step key={label}>\n                <StepLabel></StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          </Paper>\n\n    \n          <React.Fragment>\n            {activeStep === productCtx.steps.length ? (\n              <React.Fragment>\n                <Typography variant=\"h5\" gutterBottom>\n                  Product Added Successfully\n                  </Typography>\n                <Typography variant=\"subtitle1\">\n                  \n                </Typography>\n              </React.Fragment>\n            ) : (\n              <React.Fragment>\n                {getStepContent(productCtx.steps[activeStep])}\n                <div className={classes.buttons}>\n                  {activeStep !== 0 && (\n                    <Button onClick={handleBack} className={classes.button}>\n                      Back\n                    </Button>\n                  )}\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleNext}\n                    className={classes.button}\n                  >\n                    {activeStep === productCtx.steps.length - 1 ? 'Product Upload' : 'Next'}\n                  </Button>\n                </div>\n              </React.Fragment>\n            )}\n          </React.Fragment>\n        </Grid>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { withRouter } from \"react-router-dom\";\nimport Component from './Component';\nimport { ProductProvider } from '../../context';\nimport { productCategory } from '../../services/mapper';\nimport { useQuery } from 'react-apollo';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport \"./Productupload.css\"\n\nconst useStyles = makeStyles(theme => ({\n    progress: {\n      margin: 'auto'\n    },\n  }));\n  \nexport const Productupload = withRouter(props => {\n    const classes = useStyles();\n\n    const { data, loading, error } = useQuery(productCategory.query);\n\n    if(loading) return <div className=\"loaderdiv\"><CircularProgress className={classes.progress} />\n    </div>\n    if(error) return <div>error</div>\n    return (\n        <ProductProvider value={{ data, mapper: productCategory.mapper, mappertype:  \"masterData\" }} >\n            <Component {...props} />\n        </ProductProvider>\n    )\n});\nexport default Productupload;","import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { Link as RouterLink } from 'react-router-dom'\nimport Link from '@material-ui/core/Link'\n\nimport Container from '@material-ui/core/Container';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport Typography from '@material-ui/core/Typography';\nimport \"./Configuration.css\"\n\n\nexport const Configuration = withRouter(props => {\n  const master_options = ['Categories','ProductTypes', 'Materials','Metal Colours','Metal Purities','Master Collections','Master Designs','Master Diamond Types',\n'Master Diamond Settings','Master Diamond Shapes','Master Earring Backings','Master Gemstone Settings','Master Gemstone Shapes','Master Gemstone Types',\n'Master Gender','Master Materials']\n  const master_options_url = ['material','producttypes', 'Materials','Metal Colours','Metal Purities','Metal Purities']\n\n  const [raised, setRaised] = React.useState(false);\n  const [cardindex, setCardindex] = React.useState(-1);\n\n  const onMouseOver = () => \n  {\n      setRaised(true);\n  }\n  const onMouseOut = () => \n  { \n      setRaised(false);\n     // setCardindex(-1)\n\n  }\n\n   \n  return (\n    <Grid container  spacing={3}>  \n    {/* <AddContact contactlist={[]}/> */}\n    <Grid container item xs={12} sm={12} spacing={2}>\n            <Typography component=\"h5\" variant=\"h5\">\n            Configure\n          </Typography>\n    </Grid>\n    \n    {master_options.map((text, index) => (\n    <Grid  item xs={6} sm={4} lg={3}  >\n    <Link underline='none' component={RouterLink} to={master_options_url[index]}>\n     <Card fullwidth\n     className=\"card2\">\n        <CardContent >\n          <Typography style={{textAlign: \"center\"}} component=\"h6\" variant=\"h5\">\n            {text}\n          </Typography>\n          \n          <Typography variant=\"body2\" style={{textAlign: \"center\",marginTop:8}} color=\"textSecondary\">\n            Lorem Ipsum\n          </Typography>\n        </CardContent>\n        \n     \n    </Card>\n    </Link>\n    </Grid>\n    ))}\n\n    \n    </Grid>\n  )\n});\n\nexport default Configuration;","import React from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TableHead from '@material-ui/core/TableHead';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nconst columns = [\n  { id: 'name', label: 'Vendor Name', minWidth: 200 },\n  { id: 'SKU', label: 'Vendor Code', minWidth: 100 },\n  \n  {\n    id: 'Edit',\n    label: 'Edit',\n    minWidth: 120,\n    align: 'center',\n    format: value => value.toFixed(2),\n  },\n  {\n    id: 'delete',\n    label: 'delete',\n    minWidth: 120,\n    align: 'center',\n    format: value => value.toFixed(2),\n  },\n];\n\nconst useStyles1 = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  function handleFirstPageButtonClick(event) {\n    onChangePage(event, 0);\n  }\n\n  function handleBackButtonClick(event) {\n    onChangePage(event, page - 1);\n  }\n\n  function handleNextButtonClick(event) {\n    onChangePage(event, page + 1);\n  }\n\n  function handleLastPageButtonClick(event) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nfunction createData(name, calories, fat) {\n  return { name, calories, fat };\n}\n\n\n\nconst useStyles2 = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  table: {\n    minWidth: 500,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n}));\n\nexport default function AddContact(props) {\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.contactlist.length - page * rowsPerPage);\n\n  function handleChangePage(event, newPage) {\n    setPage(newPage);\n  }\n\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }\n\n  return (\n    <Paper className={classes.root}>\n      <div className={classes.tableWrapper}>\n        <Table className={classes.table} stickyHeader>\n        <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n \n          <TableBody>\n            {props.contactlist.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => (\n              <TableRow key={row.name}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.name}\n                </TableCell>\n                <TableCell align=\"left\">{row.alias}</TableCell>\n                <TableCell align=\"center\"><EditIcon />\n                </TableCell>\n                <TableCell align=\"center\"><DeleteIcon />\n                </TableCell>\n              </TableRow>\n            ))}\n\n            {emptyRows > 0 && (\n              <TableRow style={{ height: 48 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )}\n          </TableBody>\n          <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                colSpan={5}\n                count={props.contactlist.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </div>\n    </Paper>\n  );\n}\n","import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { Link as RouterLink } from 'react-router-dom'\nimport Link from '@material-ui/core/Link'\nimport Vendors from '../../components/Vendors'\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\n\n\nexport const Vendorlist = withRouter(props => {\n\n   \n  \n\n   \n  return (\n    <Grid container  spacing={2}>  \n    <Grid container item xs={12} sm={12} alignItems={\"flex-end\"}>\n        <Grid fullwidth item xs={6} sm={6}>\n\n            <Typography component=\"h6\" variant=\"h6\">\n            Prodcuts\n          </Typography>\n          </Grid>\n          <Grid fullwidth item xs={6} sm={6} >\n\n          <Link underline='none' component={RouterLink} to={'/productupload'}>\n          <Button variant=\"outlined\" color=\"primary\" >\n            Add New Vendor\n        </Button>\n        \n        </Link>\n        </Grid>\n    </Grid>\n    <Vendors contactlist={[\n        {\n            \"name\":\"NAC1\"\n        }\n    ]} />\n   \n    </Grid>\n  )\n});\n\nexport default Vendorlist;","import React from 'react';\nimport { Form, Grid,Select } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Popover from '@material-ui/core/Popover';\nimport Typography from '@material-ui/core/Typography';\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n\n  Chip\n\n} from '@material-ui/core';\n\n\n\n\nconst useStyless = makeStyles(theme => ({\n  button: {\n    color: \"#06847B\",\n    border: \"1px solid #7bbcb7\",\n    '&:hover': {\n      backgroundColor: \"rgba(6, 132, 123, 0.1)\",\n      border: \"1px solid #06847B\",\n    }\n  },\n}));\n\n\nconst useStyles = makeStyles(theme => ({\n  typography: {\n    padding: theme.spacing(2),\n  },\n\n}));\n\nconst options = [\n  \"Show some love to Material-UI\",\n  \"Show all notification content\",\n  \"Hide sensitive notification content\",\n  \"Hide all notification content\"\n];\n\nexport default function FormPropsTextFields(props) {\n  const classess = useStyless();\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [searchtext, setSearchtext] = React.useState(\"\");\n  const [category, setCategory] = React.useState(\"\");\n  const [producttype, setProducttype] = React.useState(\"\");\n\n  // const handleinputChange =type => e => {\n  // props.searchproduct(e.target.value)\n  // }\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClickListItem = event => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleinputChange =type => e => {\n    setSearchtext(e.target.value)\n  }\n  const handlecategoryChange = type => (event, value) => {\n    setCategory( value.name)\n}\nconst handletypeChange = type => (event, value) => {\n  setProducttype(value.name)\n}\n  const handleMenuItemClick = (event, index) => {\n    setAnchorEl(null);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n   function applyfilter() {\n     props.applyfilter(searchtext, category, producttype)\n  }\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n\n  return (\n    <div className=\"search\" style={{ display: \"flex\", justifyContent: \"space-around\", background: \"white\", borderTop: \"1px solid #e4e4e4\", borderBottom: \"1px solid #e4e4e4\" }}>\n      <Grid lg={3} md={3} sm={3}>\n      <Autocomplete\n                      \n                      fullWidth\n                      id=\"free-solo-2-demo\"\n                      style={{ margin: \"auto\",marginLeft: \"10px\", marginTop: \"10px\", marginBottom: \"10px\" }}\n                      className={classes.fixedTag}\n                      getOptionLabel={option => option.name}\n                      options={props.mastercategory}\n                      onChange={handlecategoryChange('product_category')}\n\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option.name} {...getTagProps({ index })} />\n                      ))\n                      }\n                      renderInput={params => (\n                      <TextField\n                      {...params}\n                      label=\"Filter By Product Category\"\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                      InputProps={{ ...params.InputProps, readOnly: true, type: 'search' }}\n                      />\n                      )}\n                      />\n      </Grid>\n      <Grid lg={3} md={3} sm={3}>\n\n      <Autocomplete\n                      id=\"free-solo-2-demo\"\n                      style={{ margin: \"auto\",marginLeft: \"10px\", marginTop: \"10px\", marginBottom: \"10px\" }}\n                      className={classes.fixedTag}\n                      getOptionLabel={option => option.name}\n                      options={props.masterproducttype}\n                      onChange={handletypeChange('product_type')}\n\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option.name} {...getTagProps({ index })} />\n                      ))\n                      }\n                      renderInput={params => (\n                      <TextField\n                      {...params}\n                      label=\"Filter By Product Type\"\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                      InputProps={{ ...params.InputProps, readOnly: true, type: 'search' }}\n                      />\n                      )}\n                      />\n      </Grid>\n      <Grid lg={3} md={3} sm={3}>\n          <TextField fullWidth margin=\"dense\" onChange={handleinputChange('productname')} placeholder={\"Search by product name or product id\"} onChange={handleinputChange('productname')} id=\"outlined-basic\" variant=\"outlined\"  style={{ margin: \"auto\",marginLeft: \"10px\", marginTop: \"18px\", marginBottom: \"10px\" }}/>\n          \n      </Grid>\n      <Grid lg={3} md={3} sm={3}>\n\n      <Button onClick={(e) => applyfilter()} color=\"primary\" variant=\"contained\" style={{ marginLeft: \"10px\", marginTop: \"18px\", marginBottom: \"10px\" }} >\n                  Search\n          </Button>\n          </Grid>\n\n    </div>\n  );\n}\n","import React, { useEffect, useContext, useState } from 'react';\n\nimport clsx from 'clsx';\nimport {lighten, makeStyles, useTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TableHead from '@material-ui/core/TableHead';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Link as RouterLink } from 'react-router-dom'\nimport Link from '@material-ui/core/Link'\nimport { Query, withApollo } from 'react-apollo';\nimport {PRODUCTLIST,PRODUCTCATEGORY,PRODUCTFILTERMASTER,PRODUCTLISTSTATUSEDIT} from '../../graphql/query';\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Switch } from '@material-ui/core';\nimport { useMutation,useQuery } from '@apollo/react-hooks';\nimport Moment from 'react-moment';\nimport {BASE_URL} from '../../config'\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Filterandsearch from './../../screens/Productlist/filterandsearch';\nimport { NetworkContext } from '../../context/NetworkContext';\n\nconst columns = [\n  { id: 'productId', label: 'productId' },\n  { id: 'productName', label: 'productName' },\n  { id: 'productType', label: 'productType' },\n  { id: 'productCategory', label: 'productCategory' },\n  { id: 'updatedAt', label: 'updatedAt' }\n];\n\nconst useStyles1 = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\nfunction createData(name, calories, fat) {\n  return { name, calories, fat };\n}\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  function handleFirstPageButtonClick(event) {\n    onChangePage(event, 0);\n  }\n\n  function handleBackButtonClick(event) {\n    onChangePage(event, page - 1);\n  }\n\n  function handleNextButtonClick(event) {\n    onChangePage(event, page + 1);\n  }\n\n  function handleLastPageButtonClick(event) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n\n \n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\n  { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\n  { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\n  { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\n  { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = property => event => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {/* <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ 'aria-label': 'select all desserts' }}\n          />\n        </TableCell> */}\n        {columns.map(headCell => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? '' : ''}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles(theme => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = props => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n          Nutrition\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n          \n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\n\n\n\n\nconst useStyles2 = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  table: {\n    minWidth: 500,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n}));\n\nconst   AddContact=(props)=> {\n  let history = useHistory();\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(50);\n  const [pageCount,setPageCount] = React.useState(0);\n  const [offsetValue,setOffsetValue] = React.useState(0)\n  const [productlists,setProductlists] = React.useState([])\n  const [allproductlists,setAllProductlists] = React.useState([])\n  const [mastercategories,setMastercategories] = React.useState([])\n  const [masterproducttypes,setMasterproducttypes] = React.useState([])\n  const { sendNetworkRequest } = React.useContext(NetworkContext);\n  const [searchtext,setSearchtext] = React.useState('')\n\n\n  // const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.contactlist.length - page * rowsPerPage);\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('Product Id');\n  function handleChangePage(event, newPage) {\n    setPage(newPage);\n    setOffsetValue(newPage*rowsPerPage)\n  }\n  useEffect( () => {\n\n    getproductlist(\"\")\n  const query = props.client.query\n    query({\n      query: PRODUCTFILTERMASTER,\n      fetchPolicy: \"network-only\"\n    }).then((data) => {\n      if (data) {\n      // setProductlists(data.data.allProductLists.nodes)\n       setMastercategories(data.data.allMasterProductCategories.nodes)\n       setMasterproducttypes( data.data.allMasterProductTypes.nodes )\n      }else{\n        alert(\"success\")\n      }\n    })\n  .catch((error) => {console.log(\"smbcj\")})\n  }, [])\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }\n  function ProductEdit(id){\n    // localStorage.setItem('productEditId',id);\n    history.push(`product_attributes/${id}`)\n  }\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n  function searchproduct(searchtext, productcategory, producttype)\n  {\n    let products = allproductlists.filter(l => {\n      return l.productId.toLowerCase().match( searchtext.toLowerCase()) || l.productName.toLowerCase().match( searchtext.toLowerCase());\n    });\n    setProductlists(products)\n  }\n  async function getproductlist(searchtext,productcategory,producttype)\n{\n  let bodydata = {\n    size : rowsPerPage,\n    offset : offsetValue,\n    searchtext: searchtext,\n    productcategory: productcategory,\n    producttype: producttype\n  }\n\n  let response =  await sendNetworkRequest('/getproductlist', {}, bodydata)\n  setProductlists(response.products)\n  \n}\nfunction applyfilter(searchtext, categoryname, typename)\n{\n  getproductlist(searchtext,categoryname,typename)\n}\n  // function productItemStatusChange(id,isactive){\n    // let variable = {\n    //   \"productId\": id\n    // };\n    // let status = isactive ? variable.isActive = false :variable.isActive = true;\n    async function productItemStatusChange(id,isactive,refetch){\n      let variables ={\n        productId:id,\n        isActive:isactive ?false:true\n      }\n      await props.client.mutate({mutation:PRODUCTLISTSTATUSEDIT,variables}).then(res=>{\n\n        if(res!==null){\n          refetch();\n        }\n      }).catch(console.error)\n    \n    }\n    // const [productItemStatusChange,{ data }] = useMutation(PRODUCTLISTSTATUSEDIT);\n  // }\n  return (\n    <Paper className={classes.root}>\n      <Filterandsearch applyfilter={applyfilter} mastercategory={mastercategories} masterproducttype={masterproducttypes} searchproduct={searchproduct} />\n      <div className={classes.tableWrapper}>\n        <Table className={classes.table} border={1} borderColor={\"#ddd\"} size=\"small\" stickyHeader>\n        {/* <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead> */}\n           <EnhancedTableHead\n              classes={classes}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n            />\n          <TableBody>\n          {/* <Query\n              query={PRODUCTLIST(true,\"Bangles\")}\n              onCompleted={data => setPageCount( data.allProductLists.totalCount )}\n              variables={{ \"Veiw\": rowsPerPage, \"Offset\": offsetValue}}>\n              {\n                  ({ data, loading, error, refetch }) => {\n                    debugger\n                      if (loading) {\n                          // return <Loader />\n                      }\n                      if (error) {\n                        return <div>{error}</div>\n                          // return false\n                      }\n                      if (data) { \n                           return <> */}\n                              {stableSort(productlists, getComparator(order, orderBy)).map((row, index) => (\n                                  <TableRow key={row.product_id}>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                    {row.product_id}\n                                    <Button onClick={(e) => ProductEdit(row.product_id)}>\n                                    <EditIcon />\n                                  </Button>\n                                  </TableCell>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                  {row.product_name}\n                                    {/* <Link target='blank_' href={row.transSkuListsByProductId.nodes.length > 0 ? BASE_URL+row.transSkuListsByProductId.nodes[0].skuUrl : '-'}  variant=\"body2\">\n                                   \n                                    </Link> */}\n                                  </TableCell>\n                                  <TableCell align=\"left\">{row.product_type}</TableCell>\n                                  <TableCell align=\"left\">{row.product_category}</TableCell>\n                                  <TableCell align=\"left\">            \n                                  <Moment format=\"DD MMM YYYY hh:mm a\">\n                                  {row.updatedAt}\n                                  </Moment>\n                                  </TableCell>\n                                  \n                                </TableRow>\n                              ))}\n                          {/* </> */}\n                       {/* }\n                      else{\n                      return <div>{\"Fetch Products\"}</div>\n                     \n                 } } }\n                </Query>  */}\n          {/* {emptyRows > 0 && (\n              <TableRow style={{ height: 48 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )}  */}\n          </TableBody>\n          <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[50,100,200,500]}\n                colSpan={5}\n                count={pageCount}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                // ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </div>\n    </Paper>\n  );\n}\nexport default withApollo(AddContact);\n","import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { Link as RouterLink } from 'react-router-dom'\nimport Link from '@material-ui/core/Link'\nimport Product from '../../components/Products'\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\n\n\n\nexport const Productlist = withRouter(props => {\n\n   \n  \n\n   \n  return (\n    <Grid container  spacing={2}>  \n        <Grid container item xs={12} sm={12} alignItems={\"flex-end\"}>\n        <Grid fullwidth item xs={6} sm={6}>\n\n            <Typography component=\"h6\" variant=\"h6\">\n            Prodcuts\n          </Typography>\n          </Grid>\n          <Grid fullwidth item xs={6} sm={6} style={{\"text-align\":\"right\"}} >\n          <Link underline='none' component={RouterLink} to={'/productupload'}>\n          <Button variant=\"outlined\" color=\"primary\" >\n            Add New Product\n        </Button>\n        \n        </Link>\n        </Grid>\n    </Grid>\n    <Product />\n   \n    </Grid>\n  )\n});\n\nexport default Productlist;","import React,{useState} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Grid, Typography, Button } from '@material-ui/core';\n// import {  SnackBarContext } from '../../../../context';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Header = props => {\n  const { className, ...rest } = props;\n  const [openApplication, setOpenApplication] = useState(false);\n  // const showSnackbar = React.useContext(SnackBarContext);\n\n  const handleApplicationOpen = () => {\n    \n    setOpenApplication(true);\n  };\n\n  const handleApplicationClose = () => {\n    setOpenApplication(false);\n  };\n  const handleApplicationsave = () => {\n   // showSnackbar.setSnack({ open: true, type: 'success', msg: 'New Category Added Successfully' })\n    setOpenApplication(false);\n\n  };\n  const classes = useStyles();\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Grid\n        alignItems=\"flex-end\"\n        container\n        justify=\"space-between\"\n        spacing={3}\n      >\n        <Grid item>\n          {/* <Typography\n            component=\"h2\"\n            gutterBottom\n            variant=\"overline\"\n          >\n            Management\n          </Typography> */}\n          {/* <Typography\n            component=\"h1\"\n            variant=\"h2\"\n          >\n             Category\n          </Typography> */}\n        </Grid>\n        <Grid item>\n\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n\n          >\n            Add New Category\n          </Button>\n         \n        </Grid>\n      </Grid>\n      \n    </div>\n   \n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport {Grid, Chip } from '@material-ui/core';\nimport CreateIcon from '@material-ui/icons/Create';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ShareIcon from '@material-ui/icons/Share';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nconst useStyles = makeStyles(theme => ({\n    card: {\n      width: '100%',\n      padding: theme.spacing(1),\n      marginTop : theme.spacing(2)\n    },\n    buttonPadding: {    \n        marginLeft: theme.spacing(2),   \n    },\n    media: {\n      height: 0,\n      paddingTop: '56.25%', // 16:9\n    },\n    expand: {\n      transform: 'rotate(0deg)',\n      marginLeft: 'auto',\n      transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest,\n      }),\n    },\n    expandOpen: {\n      transform: 'rotate(180deg)',\n    },\n    avatar: {\n      backgroundColor: red[500],\n    },\n    chip: {\n      color: theme.palette.success.contrastText,\n      backgroundColor: theme.palette.success.main,\n    },\n    pendingchip: {\n      color: theme.palette.success.contrastText,\n      backgroundColor: theme.palette.secondary,\n    }\n  }));\n\nexport default function Categoryrow(props) {\n    const classes = useStyles();\n    const [expanded, setExpanded] = React.useState(false);\n  \n    const handleExpandClick = () => {\n      setExpanded(!expanded);\n    };\n  return (\n    \n    <Card className={classes.card}>\n\n      <Grid container sm={12} xs={12} alignItems='center' spacing={2}>\n            <Grid item xs={6} sm={9}>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                       mano\n                    </Typography>\n                    <Typography variant=\"caption\" gutterBottom>\n                    mani\n                    </Typography>\n            </Grid>\n            <Grid container item xs={3} spacing={2}   direction=\"row\"\n            alignItems=\"center\"\n            justify=\"center\"\n                >\n              <Grid item xs={9}> <Chip  className={props.user.status_id === 1 ? classes.pendingchip : classes.chip }\n            label={props.user.status_id === 1 ? 'pending' : 'registered'}\n            size=\"small\" /></Grid>\n             <Grid item xs={3}>\n            {/* <IconButton aria-label=\"add to favorites\" onClick={() => props.handleedit(props.rowid)}>\n            <CreateIcon />\n            </IconButton> */}\n            <IconButton aria-label=\"add to favorites\" onClick={() => props.handledelete(props.rowid)}>\n            <DeleteIcon />\n            </IconButton>\n            </Grid>\n            </Grid>\n\n      </Grid>\n      \n      \n    </Card>\n  );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Typography, colors } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexGrow: 0,\n    flexShrink: 0,\n    borderRadius: theme.shape.borderRadius,\n    lineHeight: '10px',\n    fontSize: '10px',\n    height: 20,\n    minWidth: 20,\n    whiteSpace: 'nowrap',\n    padding: theme.spacing(0.5, 1)\n  },\n  rounded: {\n    borderRadius: 10,\n    padding: theme.spacing(0.5)\n  }\n}));\n\nconst Label = props => {\n  const { className, variant, color, shape, children, style, ...rest } = props;\n\n  const classes = useStyles();\n\n  const rootClassName = clsx(\n    {\n      [classes.root]: true,\n      [classes.rounded]: shape === 'rounded'\n    },\n    className\n  );\n\n  const finalStyle = { ...style };\n\n  if (variant === 'contained') {\n    finalStyle.backgroundColor = color;\n    finalStyle.color = '#FFF';\n  } else {\n    finalStyle.border = `1px solid ${color}`;\n    finalStyle.color = color;\n  }\n\n  return (\n    <Typography\n      {...rest}\n      className={rootClassName}\n      style={finalStyle}\n      variant=\"overline\"\n    >\n      {children}\n    </Typography>\n  );\n};\n\nLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  shape: PropTypes.oneOf(['square', 'rounded']),\n  style: PropTypes.object,\n  variant: PropTypes.oneOf(['contained', 'outlined'])\n};\n\nLabel.defaultProps = {\n  style: {},\n  color: colors.grey[600],\n  variant: 'contained',\n  shape: 'square'\n};\n\nexport default Label;\n","import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\n// import moment from 'moment';\nimport PropTypes from 'prop-types';\n// import PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport CreateIcon from '@material-ui/icons/Create';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Divider,\n  IconButton,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  colors\n} from '@material-ui/core';\n\nimport { Label, ReviewStars } from '../../../../components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  filterButton: {\n    marginRight: theme.spacing(2)\n  },\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 1150\n  },\n  actions: {\n    padding: theme.spacing(0, 1),\n    justifyContent: 'flex-end'\n  }\n}));\n\nconst Results = props => {\n  const { className, orders, ...rest } = props;\n\n  const classes = useStyles();\n\n  const [selectedOrders, setSelectedOrders] = useState([]);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  const handleSelectAll = event => {\n    const selectedOrders = event.target.checked\n      ? orders.map(order => order.id)\n      : [];\n\n    setSelectedOrders(selectedOrders);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedOrders.indexOf(id);\n    let newSelectedOrders = [];\n\n    if (selectedIndex === -1) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders, id);\n    } else if (selectedIndex === 0) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders.slice(1));\n    } else if (selectedIndex === selectedOrders.length - 1) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedOrders = newSelectedOrders.concat(\n        selectedOrders.slice(0, selectedIndex),\n        selectedOrders.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelectedOrders(newSelectedOrders);\n  };\n\n  const handleChangePage = (event, page) => {\n    setPage(page);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(event.target.value);\n  };\n\n  const paymentStatusColors = {\n    canceled: colors.grey[600],\n    pending: colors.orange[600],\n    completed: colors.green[600],\n    rejected: colors.red[600]\n  };\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      {/* <Typography\n        color=\"textSecondary\"\n        gutterBottom\n        variant=\"body2\"\n      >\n        {orders.length} Records found. Page {page + 1} of{' '}\n        {Math.ceil(orders.length / rowsPerPage)}\n      </Typography> */}\n      <Card>\n        <CardHeader\n          title=\"Category\"\n        />\n        <Divider />\n        <CardContent className={classes.content}>\n          {/* <PerfectScrollbar> */}\n            <div className={classes.inner}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    \n                    <TableCell>Name</TableCell>\n                    \n                    <TableCell align=\"center\">Alias</TableCell>\n\n                    <TableCell align=\"center\">Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {orders.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(order => (\n                    <TableRow\n                      // key={order.id}\n                      // selected={selectedOrders.indexOf(order.id) !== -1}\n                    >\n                      \n                     \n\n                      <TableCell >{order.name}</TableCell>\n                      <TableCell align=\"center\">{order.alias}</TableCell>\n                      \n                      <TableCell align=\"center\">\n                      <IconButton aria-label=\"add to favorites\">\n                        <CreateIcon />\n                        </IconButton>\n                        <IconButton aria-label=\"add to favorites\">\n                        <DeleteIcon />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          {/* </PerfectScrollbar> */}\n        </CardContent>\n        <CardActions className={classes.actions}>\n          <TablePagination\n            component=\"div\"\n            count={orders.length}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n            page={page}\n            rowsPerPage={rowsPerPage}\n            rowsPerPageOptions={[5, 10, 25]}\n          />\n        </CardActions>\n      </Card>\n      {/* <TableEditBar selected={selectedOrders} /> */}\n    </div>\n  );\n};\n\nResults.propTypes = {\n  className: PropTypes.string,\n  orders: PropTypes.array.isRequired\n};\n\nResults.defaultProps = {\n  orders: []\n};\n\nexport default Results;\n","import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { MaterialContext } from '../../context';\n\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport uuid from 'uuid/v1';\nimport Page from '../../components/Page'\nimport { Header, Results } from './components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n  //  padding: theme.spacing(3)\n  },\n  results: {\n    marginTop: theme.spacing(3)\n  }\n}));\n  \nexport default function Categorycontent() {\n  const classes = useStyles();\n  const [orders, setOrders] = useState([]);\n  const { materialCtx, setMaterialCtx ,materialMaster} = React.useContext(MaterialContext);\n\n  useEffect(() => {\n    let mounted = true;\n    const fetchOrders = () => {\n\n      setOrders( [\n        {\n          id: uuid(),\n          created_at: \"test\",\n          customer: {\n            name: 'Ekaterina Tankova'\n          },\n          payment: {\n            ref: 'FAD103',\n            method: 'CreditCard',\n            total: '500.00',\n            currency: '$',\n            status: 'pending'\n          },\n          status: 'inactive'\n        }])\n    };\n\n    fetchOrders();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <Page\n    className={classes.root}\n    title=\"Orders Management List\"\n  >\n    <Header />\n    <Results\n      className={classes.results}\n      orders={materialCtx.materialMaster.materials}\n    />\n    \n  </Page>\n  );\n}","import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { MaterialProvider } from '../../context';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\n\nimport { useQuery } from 'react-apollo';\nimport { materialMaster } from '../../services/mapper';\nimport Component from './Categorycontent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nconst useStyles = makeStyles(theme => ({\n    progress: {\n      margin: theme.spacing(2)\n    },\n  }));\nexport const CategoryList = withRouter(props => {\n    const classes = useStyles();\n\n    const { data, loading, error } = useQuery(materialMaster.query);\n\n    if(loading) return <div><CircularProgress className={classes.progress} />\n    </div>\n    if(error) return <div>error</div>\n    return (\n        \n        <MaterialProvider value={{ data, mapper: materialMaster.mapper, mappertype:  \"materialMaster\" }} >\n            \n    <Component {...props} />\n    </MaterialProvider>\n\n)});\nexport default CategoryList;","import React,{useState} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Grid, Typography, Button } from '@material-ui/core';\n// import {  SnackBarContext } from '../../../../context';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Header = props => {\n  const { className, ...rest } = props;\n  const [openApplication, setOpenApplication] = useState(false);\n  // const showSnackbar = React.useContext(SnackBarContext);\n\n  const handleApplicationOpen = () => {\n    \n    setOpenApplication(true);\n  };\n\n  const handleApplicationClose = () => {\n    setOpenApplication(false);\n  };\n  const handleApplicationsave = () => {\n   // showSnackbar.setSnack({ open: true, type: 'success', msg: 'New Category Added Successfully' })\n    setOpenApplication(false);\n\n  };\n  const classes = useStyles();\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Grid\n        alignItems=\"flex-end\"\n        container\n        justify=\"space-between\"\n        spacing={3}\n      >\n        <Grid item>\n          {/* <Typography\n            component=\"h2\"\n            gutterBottom\n            variant=\"overline\"\n          >\n            Management\n          </Typography> */}\n          {/* <Typography\n            component=\"h1\"\n            variant=\"h2\"\n          >\n             Product Type\n          </Typography> */}\n        </Grid>\n        <Grid item>\n\n          \n         \n        </Grid>\n      </Grid>\n      \n    </div>\n   \n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\n// import moment from 'moment';\nimport PropTypes from 'prop-types';\n// import PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport CreateIcon from '@material-ui/icons/Create';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Divider,\n  IconButton,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  colors\n} from '@material-ui/core';\n\nimport { Label, ReviewStars } from '../../../../components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  filterButton: {\n    marginRight: theme.spacing(2)\n  },\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 1150\n  },\n  actions: {\n    padding: theme.spacing(0, 1),\n    justifyContent: 'flex-end'\n  }\n}));\n\nconst Results = props => {\n  const { className, orders, ...rest } = props;\n\n  const classes = useStyles();\n\n  const [selectedOrders, setSelectedOrders] = useState([]);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  const handleSelectAll = event => {\n    const selectedOrders = event.target.checked\n      ? orders.map(order => order.id)\n      : [];\n\n    setSelectedOrders(selectedOrders);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedOrders.indexOf(id);\n    let newSelectedOrders = [];\n\n    if (selectedIndex === -1) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders, id);\n    } else if (selectedIndex === 0) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders.slice(1));\n    } else if (selectedIndex === selectedOrders.length - 1) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedOrders = newSelectedOrders.concat(\n        selectedOrders.slice(0, selectedIndex),\n        selectedOrders.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelectedOrders(newSelectedOrders);\n  };\n\n  const handleChangePage = (event, page) => {\n    setPage(page);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(event.target.value);\n  };\n\n  const paymentStatusColors = {\n    canceled: colors.grey[600],\n    pending: colors.orange[600],\n    completed: colors.green[600],\n    rejected: colors.red[600]\n  };\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      {/* <Typography\n        color=\"textSecondary\"\n        gutterBottom\n        variant=\"body2\"\n      >\n        {orders.length} Records found. Page {page + 1} of{' '}\n        {Math.ceil(orders.length / rowsPerPage)}\n      </Typography> */}\n      <Card>\n        <CardHeader\n          title=\"Product Type\"\n          action ={\n            <Button\n            color=\"primary\"\n            variant=\"contained\"\n\n          >\n            Add New Producttype\n          </Button>\n          }\n        />\n        <Divider />\n        <CardContent className={classes.content}>\n          {/* <PerfectScrollbar> */}\n            <div className={classes.inner}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    \n                    <TableCell>Name</TableCell>\n                    \n                    <TableCell align=\"center\">Alias</TableCell>\n\n                    <TableCell align=\"center\">Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {orders.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(order => (\n                    <TableRow\n                      // key={order.id}\n                      // selected={selectedOrders.indexOf(order.id) !== -1}\n                    >\n                      \n                     \n\n                      <TableCell >{order.name}</TableCell>\n                      <TableCell align=\"center\">{order.alias}</TableCell>\n                      \n                      <TableCell align=\"center\">\n                      <IconButton aria-label=\"add to favorites\">\n                        <CreateIcon />\n                        </IconButton>\n                        <IconButton aria-label=\"add to favorites\">\n                        <DeleteIcon />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          {/* </PerfectScrollbar> */}\n        </CardContent>\n        <CardActions className={classes.actions}>\n          <TablePagination\n            component=\"div\"\n            count={orders.length}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n            page={page}\n            rowsPerPage={rowsPerPage}\n            rowsPerPageOptions={[5, 10, 25]}\n          />\n        </CardActions>\n      </Card>\n      {/* <TableEditBar selected={selectedOrders} /> */}\n    </div>\n  );\n};\n\nResults.propTypes = {\n  className: PropTypes.string,\n  orders: PropTypes.array.isRequired\n};\n\nResults.defaultProps = {\n  orders: []\n};\n\nexport default Results;\n","import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { MaterialContext } from '../../context';\n\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport uuid from 'uuid/v1';\nimport Page from '../../components/Page'\nimport { Header, Results } from './components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n  //  padding: theme.spacing(3)\n  },\n  results: {\n    marginTop: theme.spacing(3)\n  }\n}));\n  \nexport default function Producttypecontent() {\n  const classes = useStyles();\n  const [orders, setOrders] = useState([]);\n  const { materialCtx, setMaterialCtx ,materialMaster} = React.useContext(MaterialContext);\n\n  useEffect(() => {\n    let mounted = true;\n    const fetchOrders = () => {\n\n      setOrders( [\n        {\n          id: uuid(),\n          created_at: \"test\",\n          customer: {\n            name: 'Ekaterina Tankova'\n          },\n          payment: {\n            ref: 'FAD103',\n            method: 'CreditCard',\n            total: '500.00',\n            currency: '$',\n            status: 'pending'\n          },\n          status: 'inactive'\n        }])\n    };\n\n    fetchOrders();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <Page\n    className={classes.root}\n    title=\"Orders Management List\"\n  >\n    <Header />\n    <Results\n      className={classes.results}\n      orders={materialCtx.materialMaster.materials}\n    />\n    \n  </Page>\n  );\n}","import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { MaterialProvider } from '../../context';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\n\nimport { useQuery } from 'react-apollo';\nimport { materialMaster } from '../../services/mapper';\nimport Component from './Producttypecontent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nconst useStyles = makeStyles(theme => ({\n    progress: {\n      margin: theme.spacing(2)\n    },\n  }));\nexport const ProducttypeList = withRouter(props => {\n    const classes = useStyles();\n\n    const { data, loading, error } = useQuery(materialMaster.query);\n\n    if(loading) return <div><CircularProgress className={classes.progress} />\n    </div>\n    if(error) return <div>error</div>\n    return (\n        \n        <MaterialProvider value={{ data, mapper: materialMaster.mapper, mappertype:  \"materialMaster\" }} >\n            \n    <Component {...props} />\n    </MaterialProvider>\n\n)});\nexport default ProducttypeList;","import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\n// import moment from 'moment';\nimport PropTypes from 'prop-types';\n// import PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport CreateIcon from '@material-ui/icons/Create';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Divider,\n  IconButton,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  colors\n} from '@material-ui/core';\n\nimport { Label, ReviewStars } from '../../../../components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  filterButton: {\n    marginRight: theme.spacing(2)\n  },\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 1150\n  },\n  actions: {\n    padding: theme.spacing(0, 1),\n    justifyContent: 'flex-end'\n  }\n}));\n\nconst Results = props => {\n  const { className, orders, ...rest } = props;\n\n  const classes = useStyles();\n\n  const [selectedOrders, setSelectedOrders] = useState([]);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  const handleSelectAll = event => {\n    const selectedOrders = event.target.checked\n      ? orders.map(order => order.id)\n      : [];\n\n    setSelectedOrders(selectedOrders);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedOrders.indexOf(id);\n    let newSelectedOrders = [];\n\n    if (selectedIndex === -1) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders, id);\n    } else if (selectedIndex === 0) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders.slice(1));\n    } else if (selectedIndex === selectedOrders.length - 1) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedOrders = newSelectedOrders.concat(\n        selectedOrders.slice(0, selectedIndex),\n        selectedOrders.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelectedOrders(newSelectedOrders);\n  };\n\n  const handleChangePage = (event, page) => {\n    setPage(page);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(event.target.value);\n  };\n\n  const paymentStatusColors = {\n    canceled: colors.grey[600],\n    pending: colors.orange[600],\n    completed: colors.green[600],\n    rejected: colors.red[600]\n  };\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      {/* <Typography\n        color=\"textSecondary\"\n        gutterBottom\n        variant=\"body2\"\n      >\n        {orders.length} Records found. Page {page + 1} of{' '}\n        {Math.ceil(orders.length / rowsPerPage)}\n      </Typography> */}\n      <Card>\n        <CardHeader\n          title=\"Product Type\"\n          action ={\n            <Button\n            color=\"primary\"\n            variant=\"contained\"\n\n          >\n            Add New Producttype\n          </Button>\n          }\n        />\n        <Divider />\n        <CardContent className={classes.content}>\n          {/* <PerfectScrollbar> */}\n            <div className={classes.inner}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    \n                    <TableCell>Name</TableCell>\n                    \n                    <TableCell align=\"center\">Alias</TableCell>\n\n                    <TableCell align=\"center\">Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {orders.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(order => (\n                    <TableRow\n                      // key={order.id}\n                      // selected={selectedOrders.indexOf(order.id) !== -1}\n                    >\n                      \n                     \n\n                      <TableCell >{order.name}</TableCell>\n                      <TableCell align=\"center\">{order.alias}</TableCell>\n                      \n                      <TableCell align=\"center\">\n                      <IconButton aria-label=\"add to favorites\">\n                        <CreateIcon />\n                        </IconButton>\n                        <IconButton aria-label=\"add to favorites\">\n                        <DeleteIcon />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          {/* </PerfectScrollbar> */}\n        </CardContent>\n        <CardActions className={classes.actions}>\n          <TablePagination\n            component=\"div\"\n            count={orders.length}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n            page={page}\n            rowsPerPage={rowsPerPage}\n            rowsPerPageOptions={[5, 10, 25]}\n          />\n        </CardActions>\n      </Card>\n      {/* <TableEditBar selected={selectedOrders} /> */}\n    </div>\n  );\n};\n\nResults.propTypes = {\n  className: PropTypes.string,\n  orders: PropTypes.array.isRequired\n};\n\nResults.defaultProps = {\n  orders: []\n};\n\nexport default Results;\n","import React,{useState} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Grid, Typography, Button } from '@material-ui/core';\n// import {  SnackBarContext } from '../../../../context';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Header = props => {\n  const { className, ...rest } = props;\n  const [openApplication, setOpenApplication] = useState(false);\n  // const showSnackbar = React.useContext(SnackBarContext);\n\n  const handleApplicationOpen = () => {\n    \n    setOpenApplication(true);\n  };\n\n  const handleApplicationClose = () => {\n    setOpenApplication(false);\n  };\n  const handleApplicationsave = () => {\n   // showSnackbar.setSnack({ open: true, type: 'success', msg: 'New Category Added Successfully' })\n    setOpenApplication(false);\n\n  };\n  const classes = useStyles();\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Grid\n        alignItems=\"flex-end\"\n        container\n        justify=\"space-between\"\n        spacing={3}\n      >\n        <Grid item>\n          {/* <Typography\n            component=\"h2\"\n            gutterBottom\n            variant=\"overline\"\n          >\n            Management\n          </Typography> */}\n          {/* <Typography\n            component=\"h1\"\n            variant=\"h2\"\n          >\n             Product Type\n          </Typography> */}\n        </Grid>\n        <Grid item>\n\n          \n         \n        </Grid>\n      </Grid>\n      \n    </div>\n   \n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","export const makeid = ((length, prefix,couponcount) => {\n  var count = 1;\n  var codes = []\n  if(couponcount)\n  {\n    count = couponcount;\n  }\n  let codelength = length - prefix.length\n  var result           = '';\n  var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  var charactersLength = characters.length;\n  generatecode(0)\n  function generatecode(generatedcount)\n  {\n  for ( var i = 0; i < codelength; i++ ) {\n     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  result = prefix.toUpperCase() + result.toUpperCase();\n  codes.push(result)\n  result = \"\"\n  generatedcount = generatedcount + 1\n  if(count > generatedcount)\n  {\n    generatecode(generatedcount);\n  }\n  }\n  return codes;\n});","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { VoucherContext } from '../../../../context';\nimport { DateTimePicker } from \"@material-ui/pickers\";\nimport { makeid } from '../../../../utils/commonmethod';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  TextField,\n  Popper,\n  \n  CardActionArea,\n  CardActions,\n  Radio,\n  Button,\n  Grid,\n  Chip,\n  Checkbox,\n  FormControlLabel,\n  Divider,\n  colors\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  option: {\n    border: `1px solid ${theme.palette.divider}`,\n    display: 'flex',\n    alignItems: 'flex-center',\n    padding: theme.spacing(1),\n   \n    cursor: 'pointer',\n    '& + &': {\n      marginLeft: theme.spacing(2)\n    }\n  \n  },\n  metaloption: {\n    border: `1px solid ${theme.palette.divider}`,\n    display: 'flex',\n    alignItems: 'flex-center',\n    padding: theme.spacing(1),\n    cursor: 'pointer',\n    '& + &': {\n      marginLeft: theme.spacing(2)\n    }\n  \n  },\n  cardcontent:{\n    display: 'flex',\n    alignItems: 'flex-center',\n\n  },\n  selectedOption: {\n    backgroundColor: theme.palette.primary.main,\n   // border: `3px solid ${theme.palette.divider}`,\n\n  },\n  selectedOptiondefault: {\n    backgroundColor: theme.palette.common.white,\n   // border: `3px solid ${theme.palette.divider}`,\n\n  },\n  optionRadio: {\n    margin: -10\n  },\n  margin: {\n    marginTop: theme.spacing(2),\n  },\n  optionDetails: {\n    marginTop: theme.spacing(1),\n    marginLeft: theme.spacing(2),\n    \n  },\n  optionmaterialDetails: {\n    marginTop: theme.spacing(1),\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n\n  },\n  selectedtext: {\n    color: theme.palette.common.white\n  }\n}));\n\nconst AboutVoucher = props => {\n  const { className, ...rest } = props;\n  const { voucherCtx, setVoucherCtx } = React.useContext(VoucherContext);\n  const [vouchercode, setVouchercode] = useState([]);\n  const [vouchername, setVouchername] = useState(\"\");\n  const [vouchercount, setVouchercount] = useState(\"\");\n  const [voucherprefix, setVoucherprefix] = useState(\"\");\n\n  const [discounttype, setDiscounttype] = useState(\"\");\n  const [minreq, setMinreq] = useState(\"None\");\n  const [usagelimit, setUsagelimit] = useState(\"once\");\n\n  const [isonce, setIsonce] = useState(false);\n\n  const classes = useStyles();\n\n  const [selected, setSelected] = useState(1);\n  const [selectedDate, handleDateChange] = useState(new Date());\n\n  const handleChange = (event, option) => {\n    setSelected(option);\n\n  };\n  \n \n  const handleClick = (event, option) => {\n    setDiscounttype(option);\n  };\n  const handleusagelimit = (event, option) => {\n    setUsagelimit(option);\n\n  };\n  const handleInputChange = type => e => {\n    setVouchercode(e.target.value.toUpperCase())\n  }\n\n  const handleCountChange = type => e => {\n    setVouchercount(e.target.value.toUpperCase())\n  }\n  const handlePrefixChange = type => e => {\n    setVoucherprefix(e.target.value.toUpperCase())\n  }\n  const handleminreq = (event, option) => {\n    setMinreq(option);\n  };\n  const handleonceperorder = (event, option) => {\n    setIsonce(!isonce);\n  };\n  const generateCoupon = (event) => {\n   // alert(JSON.stringify(voucherCtx))\n   setVouchercode(makeid(10,voucherprefix,vouchercount))\n  };\n  \n  \n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"General Information\" />\n      <Divider />\n      <CardContent className={classes.cardcontent}>\n      <Grid container  spacing={2}>  \n      <Grid container item xs={12} sm={12} spacing={1} >\n      <Grid   item xs={6} sm={6} >\n      <Grid container  item xs={12} sm={12} spacing={1}>\n        <TextField\n            variant=\"outlined\"\n            margin=\"dense\"\n            fullWidth\n            onChange={handleInputChange('vouchername')}\n            id=\"vouchername\"\n            name=\"vouchername\"\n            value={vouchername}\n            label=\"Voucher Name\"\n            />\n      <Grid   item xs={6} sm={6} >\n      <TextField\n            variant=\"outlined\"\n            margin=\"dense\"\n            fullWidth\n            onChange={handlePrefixChange('voucherprefix')}\n            id=\"vouchercode\"\n            name=\"vouchercode\"\n             value={voucherprefix}\n            label=\"Voucher Prefix\"\n            />\n      </Grid>\n      <Grid   item xs={6} sm={6} >\n\n        <TextField\n            variant=\"outlined\"\n            margin=\"dense\"\n            fullWidth\n            onChange={handleCountChange('vouchercount')}\n            id=\"vouchercode\"\n            name=\"vouchercode\"\n            // value={vouchercode}\n            label=\"No of vouchers\"\n            />\n      </Grid>\n      <Grid   item xs={12} sm={12} >\n\n         {/* <TextField\n            variant=\"outlined\"\n            margin=\"dense\"\n            fullWidth\n            \n            onChange={handleInputChange('vouchercode')}\n            id=\"vouchercode\"\n            name=\"vouchercode\"\n            value={vouchercode}\n            label=\"Voucher Code\"\n            />  */}\n\n                  <Autocomplete\n                       id=\"free-solo-2-demo\"\n                       multiple\n                       freeSolo\n                       defaultValue={vouchercode}\n                       value={vouchercode}\n                       className={classes.fixedTag}\n                       fullWidth\n                       options={[]}\n                      //  onChange={handleInputChange('vouchercode')}\n                       renderTags={(value, getTagProps) =>\n                       value.map((option, index) => (\n                       <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                       ))\n                       }\n                       renderInput={params => (\n                       <TextField\n                       {...params}\n                       label=\"Voucher Codes\"\n                       margin=\"dense\"\n                       variant=\"outlined\"\n                       fullWidth\n                      //  error = {productCtx.error_message.selected_sizes}\n\n                      //  InputProps={{ ...params.InputProps, type: 'search' }}\n                       />\n                       )}\n                       />\n                       </Grid>\n      </Grid>\n      </Grid> \n      <Grid   item xs={6} sm={6} >\n      <TextField\n            variant=\"outlined\"\n            margin=\"dense\"\n            fullWidth\n            multiline\n            rows=\"7\"\n            onChange={handleInputChange('vouchercode')}\n            id=\"vouchercode\"\n            name=\"vouchercode\"\n            // value={vouchercode}\n            label=\"Voucher Description\"\n            />\n\n      </Grid>\n      \n    \n      <Grid   item xs={2} sm={2} >\n        <Button size=\"small\" variant=\"contained\" \n        onClick={event => generateCoupon(event)}\n        className={classes.margin}>\n            Generate Voucher\n          </Button>\n      </Grid>\n      \n          \n\n        </Grid>\n        \n       \n       \n     \n        <Grid container item xs={12} sm={12} spacing={1}>\n        <Grid  item xs={12} sm={12} spacing={1}>\n\n      <Typography\n        gutterBottom\n        variant=\"h5\"\n      >\n      Discount Type\n      </Typography>\n      </Grid>\n        {props.categories.map(option => (\n          \n          <Grid justify=\"center\" item xs={3} sm={3} spacing={1}>\n          <CardActionArea>\n            \n          <div\n            className={clsx(classes.option, {\n              [classes.selectedOption]: discounttype === option\n            })}\n            onClick={event => handleClick(event, option)}\n            key={option}\n          >\n\n           <div className={classes.optionDetails}>\n           <Typography className={discounttype === option ? classes.selectedtext : null}\n                gutterBottom\n                variant=\"h6\"\n              >\n                {option}\n              </Typography>  \n              </div> \n                         \n            \n          </div>\n          </CardActionArea>\n          </Grid>\n        ))}\n        </Grid>\n         {discounttype === 'Free Shipping' || discounttype === \"\" ? null :  \n        <Grid item xs={12} sm={12} spacing={1}>\n\n        <TextField\n          variant=\"outlined\"\n          margin=\"dense\"\n          fullWidth\n          id=\"discountvalue\"\n          name=\"discountvalue\"\n          label=\"Discount Value\"\n          />\n        </Grid>\n}\n        <Grid container item xs={12} sm={12} spacing={1}>\n        <Grid  item xs={12} sm={12} spacing={1}>\n\n          <Typography\n            gutterBottom\n            variant=\"h5\"\n          >\n            Active Date\n            </Typography>\n          </Grid>\n          <Grid  item xs={6} sm={6} spacing={1}>\n\n          <DateTimePicker\n        label=\"Start Date\"\n        fullWidth\n        inputVariant=\"outlined\"\n        value={selectedDate}\n        minDate={new Date()}    \n        onChange={handleDateChange}\n      />\n      </Grid>\n              <Grid  item xs={6} sm={6} spacing={1}>\n              <DateTimePicker\n        label=\"End Date\"\n        fullWidth\n        inputVariant=\"outlined\"\n        value={selectedDate}\n        minDate={selectedDate}\n        strictCompareDates={true}\n        onChange={handleDateChange}\n      />\n      </Grid>\n          </Grid>\n        <Grid  item xs={12} sm={12} spacing={1}>\n        <CardActionArea>\n\n        <div\n            className={clsx(classes.option, {\n              [classes.selectedOptiondefault]: isonce\n            })}\n            onClick={event => handleonceperorder(event, isonce)}\n\n            key={\"\"}\n          >\n                <CardActions>\n\n            <Radio\n              checked={isonce}\n              className={classes.optionRadio}\n              color=\"primary\"\n              label\n              onClick={event => handleonceperorder(event, isonce)}\n              />\n            </CardActions>\n            <div className={classes.optionDetails}>\n              <Typography\n                gutterBottom\n                variant=\"h5\"\n              >\n               Only once per order\n              </Typography>\n              <Typography\n                gutterBottom\n                variant=\"title\"\n              >\n               If this option is disabled, discount will be counted for every eligible product\n              </Typography>\n              </div>\n            \n          </div>\n          </CardActionArea>\n          </Grid>\n         \n          <Grid item xs={12} sm={12} spacing={1}>\n        <TextField\n          variant=\"outlined\"\n          margin=\"dense\"\n          \n          fullWidth\n          id=\"discountvalue\"\n          name=\"discountvalue\"\n          label=\"Limit of uses\"\n          />\n        \n        </Grid>\n          <Grid container item xs={12} sm={12} spacing={1}>\n        <Grid  item xs={12} sm={12} spacing={1}>\n\n      <Typography\n        gutterBottom\n        variant=\"h5\"\n      >\n        Minimum Requirements\n        </Typography>\n      </Grid>\n        {['None','Minimum Order Value','Minimum Quantity of Items'].map(option => (\n          \n          <Grid  item xs={3} sm={3} spacing={1}>\n          \n          <div\n            className={clsx(classes.option, {\n              [classes.selectedOption]: minreq === option\n            })}\n            onClick={event => handleminreq(event, option)}\n\n            key={option}\n          >\n            {/* <Radio\n              checked={selected === option}\n              className={classes.optionRadio}\n              color=\"primary\"\n              onClick={event => handleChange(event, option)}\n            /> */}\n            <div className={classes.optionDetails}>\n              <Typography\n                gutterBottom\n                className={minreq === option ? classes.selectedtext : null}\n                variant=\"h6\"\n              >\n                {option}\n              </Typography>\n              </div>\n            \n          </div>\n          </Grid>\n        ))}\n        </Grid>\n\n\n\n        \n\n\n\n        <Grid item xs={12} sm={12} spacing={1}>\n        {minreq === 'None' ? null :\n        <TextField\n          variant=\"outlined\"\n          margin=\"dense\"\n          \n          fullWidth\n          id=\"discountvalue\"\n          name=\"discountvalue\"\n          label={minreq === 'Minimum Order Value' ? 'Minimun Order' : 'Minimum Quantity'}\n          />\n        }\n        </Grid>\n       \n        <Grid container item xs={12} sm={12} spacing={1}>\n        {/* <Grid  item xs={12} sm={12} spacing={1}>\n\n          <Typography\n            gutterBottom\n            variant=\"h5\"\n          >\n            Usage Limits\n            </Typography>\n          </Grid> */}\n{/* \n          <Grid  item xs={6} sm={6} spacing={1}>\n\n          <div\n            className={clsx(classes.option, {\n              [classes.selectedOptiondefault]: usagelimit === \"once\"\n            })}\n            key={\"\"}\n            onClick={event => handleusagelimit(event, \"once\")}\n\n          >\n            <Radio\n              checked={usagelimit === \"once\"}\n              className={classes.optionRadio}\n              color=\"primary\"\n              onClick={event => handleusagelimit(event, \"once\")}\n            />\n            <div className={classes.optionDetails}>\n              <Typography\n                className={selected === \"\" ? classes.selectedtext : null}\n                gutterBottom\n                variant=\"h6\"\n              >\n               Only once per order\n              </Typography>\n              <Typography\n                gutterBottom\n                variant=\"title\"\n              >\n               Limit to one use per customer\n              </Typography>\n              </div>\n            \n          </div>\n          \n            </Grid>\n            <Grid  item xs={6} sm={6} spacing={1}>\n\n<div\n  className={clsx(classes.option, {\n    [classes.selectedOptiondefault]: usagelimit === \"usagecount\"\n  })}\n  key={\"\"}\n  onClick={event => handleusagelimit(event, \"usagecount\")}\n\n>\n  <Radio\n    checked={usagelimit === \"usagecount\"}\n    className={classes.optionRadio}\n    color=\"primary\"\n    onClick={event => handleusagelimit(event, \"usagecount\")}\n  />\n  <div className={classes.optionDetails}>\n    <Typography\n      gutterBottom\n      variant=\"h5\"\n    >\n     Usage Limit\n    </Typography>\n    <Typography\n      gutterBottom\n      variant=\"title\"\n    >\n     Limit number of times this discount can be used in total\n    </Typography>\n    </div>\n  \n</div>\n<Grid item xs={12} sm={12} spacing={1}>\n        {usagelimit === 'once' ? null :\n        <TextField\n          variant=\"outlined\"\n          margin=\"dense\"\n          \n          fullWidth\n          id=\"discountvalue\"\n          name=\"discountvalue\"\n          label=\"Limit of uses\"\n          />\n        }\n        </Grid>\n  </Grid> */}\n          </Grid>\n         \n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nAboutVoucher.propTypes = {\n  className: PropTypes.string\n};\n\nexport default AboutVoucher;\n","import React, { useEffect,useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport {CategoryComponents} from './../../components'\nimport { DateTimePicker } from \"@material-ui/pickers\";\n\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Tabs, Tab, \n  Divider,\n  colors\n} from '@material-ui/core';\nimport { VoucherContext } from '../../../../context';\nconst tabs = [\n  { value: 'Category', label: 'Category' },\n  { value: 'Material', label: 'Material' },\n  { value: 'Producttype', label: 'Product type' },\n  { value: 'Collections', label: 'Collections' },\n  { value: 'Purity', label: 'Purity' },\n  { value: 'Availability', label: 'Availability' },\n  { value: 'Styles', label: 'Styles' }\n\n\n];\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  option: {\n    border: `1px solid ${theme.palette.divider}`,\n    display: 'flex',\n    alignItems: 'flex-center',\n    padding: theme.spacing(1),\n    maxWidth: '100%',\n    minWidth: '100%',\n    '& + &': {\n      marginLeft: theme.spacing(2)\n    }\n  \n  },\n  divider: {\n    backgroundColor: colors.grey[300]\n  },\n  cardcontent:{\n    display: 'flex',\n    alignItems: 'flex-center',\n\n  },\n  selectedOption: {\n    backgroundColor: colors.grey[200]\n  },\n  optionRadio: {\n    margin: -10\n  },\n  content: {\n    marginTop: theme.spacing(2),\n    padding: theme.spacing(1)\n\n  },\n  optionDetails: {\n    marginTop: theme.spacing(1),\n    marginLeft: theme.spacing(2)\n  }\n}));\n\nconst VoucherComponent = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n  const { voucherCtx, setVoucherCtx ,voucherMaster} = React.useContext(VoucherContext);\n\n  const [selected, setSelected] = useState(1);\n  const [selectedtab, setSelectedtab] = useState(\"\");\n  const [selectedDate, handleDateChange] = useState(new Date());\n  const handleChange = (event, option) => {\n    setSelected(option);\n\n  };\n  const handleTabsChange = (event, value) => {\n    setSelectedtab(value);\n  };\n  useEffect(() => {\n  }, []);\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n  \n      <Tabs\n        className={classes.tabs}\n        scrollButtons=\"auto\"\n        value={selectedtab}\n        onChange={handleTabsChange}\n        variant=\"scrollable\"\n      >\n        {tabs.map(tab => (\n          <Tab\n            key={tab.value}\n            label={tab.label}\n            selected\n            value={tab.value}\n          />\n        ))}\n      </Tabs>\n      <Divider />\n      <div className={classes.content}>\n    \n     <CategoryComponents  tabname={selectedtab}  materials={['Gold', 'Diamond']} />\n     {/* <CategoryComponents  tabname={selectedtab}  materials={['Rings', 'Bracelets']} /> */}\n    \n        </div>\n    </Card>\n  );\n};\n\nVoucherComponent.propTypes = {\n  className: PropTypes.string,\n  match: PropTypes.object.isRequired\n\n};\nexport default VoucherComponent;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { VoucherContext } from '../../../../context';\n\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  TextField,\n  Popper,\n  CardActionArea,\n  CardActions,\n  Radio,\n  Button,\n  Grid,\n  Checkbox,\n  FormControlLabel,\n  Divider,\n  colors\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  option: {\n    border: `1px solid ${theme.palette.divider}`,\n    display: 'flex',\n    alignItems: 'flex-center',\n    padding: theme.spacing(1),\n    maxWidth: '100%',\n    minWidth: '100%',\n    cursor: 'pointer',\n    '& + &': {\n      marginLeft: theme.spacing(2)\n    }\n  \n  },\n  cardcontent:{\n    display: 'flex',\n    alignItems: 'flex-center',\n\n  },\n  selectedOption: {\n    backgroundColor: theme.palette.primary\n  },\n  optionRadio: {\n    margin: -10\n  },\n  margin: {\n    marginTop: theme.spacing(2),\n  },\n  optionDetails: {\n    marginTop: theme.spacing(1),\n    marginLeft: theme.spacing(2),\n  }\n}));\n\nconst CategoryComponents = props => {\n  const { className, ...rest } = props;\n  const { voucherCtx, setVoucherCtx } = React.useContext(VoucherContext);\n  const [vouchercode, setVouchercode] = useState(\"\");\n\n  const classes = useStyles();\n\n  const [selected, setSelected] = useState(1);\n\n  const handleChange = (event, option) => {\n    setSelected(option);\n\n  };\n  function makeid(length) {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result.toUpperCase();\n }\n \n  const handleClick = (event, option) => {\n    setSelected(option);\n  };\n  const generateCoupon = (event) => {\n   // alert(JSON.stringify(voucherCtx))\n   setVouchercode(\"1234343\")\n  };\n  \n  return (\n        <Grid container item xs={12} sm={12} spacing={1}>\n        \n        {props.materials.map(option => (\n          \n          <Grid justify=\"center\" item xs={3} sm={3} spacing={1}>\n          <CardActionArea>\n            \n          <div\n            className={clsx(classes.option, {\n              [classes.selectedOption]: selected === option\n            })}\n            onClick={event => handleClick(event, option)}\n            key={option}\n          >\n\n           <div className={classes.optionDetails}>\n           <Typography\n                gutterBottom\n                variant=\"h5\"\n              >\n                {option}\n              </Typography>  \n              </div> \n          </div>\n          </CardActionArea>\n          </Grid>\n        ))}  \n        </Grid>\n       \n        \n  );\n};\n\nCategoryComponents.propTypes = {\n};\n\nexport default CategoryComponents;\n","import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { VoucherContext } from '../../context';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport uuid from 'uuid/v1';\nimport Page from '../../components/Page'\nimport { Header, Results,AboutVoucher ,VoucherComponent} from './components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n  //  padding: theme.spacing(3)\n  },\n  aboutvoucher: {\n    marginTop: theme.spacing(3)\n  },\n  results: {\n    marginTop: theme.spacing(3)\n  }\n}));\n  \nexport default function Voucherdiscountcontent() {\n  const classes = useStyles();\n  const [orders, setOrders] = useState([]);\n  const { voucherCtx, setVoucherCtx ,materialMaster} = React.useContext(VoucherContext);\n\n  useEffect(() => {\n    let mounted = true;\n    const fetchOrders = () => {\n\n      setOrders( [\n        {\n          id: uuid(),\n          created_at: \"test\",\n          customer: {\n            name: 'Ekaterina Tankova'\n          },\n          payment: {\n            ref: 'FAD103',\n            method: 'CreditCard',\n            total: '500.00',\n            currency: '$',\n            status: 'pending'\n          },\n          status: 'inactive'\n        }])\n    };\n    fetchOrders();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n\n    <Page\n    className={classes.root}\n    title=\"Orders Management List\"\n  >\n    <AboutVoucher className={classes.aboutvoucher} categories={['Fixed Amount','percentage','Free Shipping']} />\n    <VoucherComponent className={classes.aboutvoucher} />\n    \n  </Page>\n  </MuiPickersUtilsProvider>\n  );\n}","import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { VoucherProvider } from '../../context';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\n\nimport { useQuery } from 'react-apollo';\nimport { materialMaster } from '../../services/mapper';\nimport Component from './VoucherdiscountContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nconst useStyles = makeStyles(theme => ({\n    progress: {\n      margin: theme.spacing(2)\n    },\n  }));\nexport const Voucherdiscount = withRouter(props => {\n    const classes = useStyles();\n\n    const { data, loading, error } = useQuery(materialMaster.query);\n\n    if(loading) return <div><CircularProgress className={classes.progress} />\n    </div>\n    if(error) return <div>error</div>\n    return (\n        \n    <VoucherProvider value={{ data, mapper: materialMaster.mapper, mappertype:  \"voucherMaster\" }} >\n            \n    <Component {...props} />\n    </VoucherProvider>\n\n)});\nexport default Voucherdiscount;","import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\n// import moment from 'moment';\nimport PropTypes from 'prop-types';\n// import PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport CreateIcon from '@material-ui/icons/Create';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { NetworkContext } from '../../../../context/NetworkContext';\n\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Divider,\n  IconButton,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  colors\n} from '@material-ui/core';\n\nimport { Label, ReviewStars } from '../../../../components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  filterButton: {\n    marginRight: theme.spacing(2)\n  },\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 1150\n  },\n  actions: {\n    padding: theme.spacing(0, 1),\n    justifyContent: 'flex-end'\n  }\n}));\n\nconst Results = props => {\n  const { className, orders, ...rest } = props;\n\n  const classes = useStyles();\n\n  const [selectedOrders, setSelectedOrders] = useState([]);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  const handleSelectAll = event => {\n    const selectedOrders = event.target.checked\n      ? orders.map(order => order.id)\n      : [];\n\n    setSelectedOrders(selectedOrders);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedOrders.indexOf(id);\n    let newSelectedOrders = [];\n\n    if (selectedIndex === -1) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders, id);\n    } else if (selectedIndex === 0) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders.slice(1));\n    } else if (selectedIndex === selectedOrders.length - 1) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedOrders = newSelectedOrders.concat(\n        selectedOrders.slice(0, selectedIndex),\n        selectedOrders.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelectedOrders(newSelectedOrders);\n  };\n\n  const handleChangePage = (event, page) => {\n    setPage(page);\n  };\n  function handleAdd(e) {\n    props.update(e)\n  }\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(event.target.value);\n  };\n\n  const paymentStatusColors = {\n    canceled: colors.grey[600],\n    pending: colors.orange[600],\n    completed: colors.green[600],\n    rejected: colors.red[600]\n  };\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      {/* <Typography\n        color=\"textSecondary\"\n        gutterBottom\n        variant=\"body2\"\n      >\n        {orders.length} Records found. Page {page + 1} of{' '}\n        {Math.ceil(orders.length / rowsPerPage)}\n      </Typography> */}\n      <Card style={{marginTop : 16}}>\n        \n        <CardContent className={classes.content}>\n          {/* <PerfectScrollbar> */}\n            <div className={classes.inner}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    \n                    <TableCell>Components</TableCell>\n                    \n                    <TableCell align=\"center\">Action</TableCell>\n\n                    <TableCell align=\"center\">Status</TableCell>\n                    <TableCell align=\"center\">Log</TableCell>\n\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {props.pricingrows.map(order => (\n                    <TableRow\n                      // key={order.id}\n                      // selected={selectedOrders.indexOf(order.id) !== -1}\n                    >\n                      \n                     \n\n                      <TableCell >{order.id}</TableCell>\n                      <TableCell align=\"center\">  <Button variant=\"outlined\" onClick={(e) => handleAdd(order)} size=\"small\" color=\"primary\" className={classes.margin}>\n                      ₹ Run\n                        </Button></TableCell>\n                      \n                      <TableCell align=\"center\">\n                        {\"Running\"}\n                      </TableCell>\n                      <TableCell align=\"center\">\n                      <Button color=\"primary\" size=\"small\">\n                        Download\n                      </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          {/* </PerfectScrollbar> */}\n        </CardContent>\n        <CardActions className={classes.actions}>\n          \n        </CardActions>\n      </Card>\n      {/* <TableEditBar selected={selectedOrders} /> */}\n    </div>\n  );\n};\n\nResults.propTypes = {\n  className: PropTypes.string,\n  orders: PropTypes.array.isRequired\n};\n\nResults.defaultProps = {\n  orders: []\n};\n\nexport default Results;\n","import React,{useState} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Grid, Typography, Button } from '@material-ui/core';\n// import {  SnackBarContext } from '../../../../context';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Header = props => {\n  const { className, ...rest } = props;\n  const [openApplication, setOpenApplication] = useState(false);\n  // const showSnackbar = React.useContext(SnackBarContext);\n\n  const handleApplicationOpen = () => {\n    \n    setOpenApplication(true);\n  };\n\n  const handleApplicationClose = () => {\n    setOpenApplication(false);\n  };\n  const handleApplicationsave = () => {\n   // showSnackbar.setSnack({ open: true, type: 'success', msg: 'New Category Added Successfully' })\n    setOpenApplication(false);\n\n  };\n  const classes = useStyles();\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Grid\n        alignItems=\"flex-end\"\n        container\n        justify=\"space-between\"\n        spacing={3}\n      >\n        <Grid item>\n          {/* <Typography\n            component=\"h2\"\n            gutterBottom\n            variant=\"overline\"\n          >\n            Management\n          </Typography> */}\n          {/* <Typography\n            component=\"h1\"\n            variant=\"h2\"\n          >\n             Product Type\n          </Typography> */}\n        </Grid>\n        <Grid item>\n\n          \n         \n        </Grid>\n      </Grid>\n      \n    </div>\n   \n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { VoucherContext } from '../../../../context';\nimport { DateTimePicker } from \"@material-ui/pickers\";\nimport { makeid } from '../../../../utils/commonmethod';\nimport { Autocomplete } from '@material-ui/lab';\nimport  {NetworkContext}  from '../../../../context/NetworkContext';\n\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  TextField,\n  Popper,\n  Chip,\n  CardActionArea,\n  CardActions,\n  Radio,\n  Button,\n  Grid,\n  Checkbox,\n  FormControlLabel,\n  Divider,\n  colors\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  option: {\n    border: `1px solid ${theme.palette.divider}`,\n    display: 'flex',\n    alignItems: 'flex-center',\n    padding: theme.spacing(1),\n   \n    cursor: 'pointer',\n    '& + &': {\n      marginLeft: theme.spacing(2)\n    }\n  \n  },\n  metaloption: {\n    border: `1px solid ${theme.palette.divider}`,\n    display: 'flex',\n    alignItems: 'flex-center',\n    padding: theme.spacing(1),\n    cursor: 'pointer',\n    '& + &': {\n      marginLeft: theme.spacing(2)\n    }\n  \n  },\n  cardcontent:{\n    display: 'flex',\n    alignItems: 'flex-center',\n\n  },\n  selectedOption: {\n    backgroundColor: theme.palette.primary.main,\n   // border: `3px solid ${theme.palette.divider}`,\n\n  },\n  selectedOptiondefault: {\n    backgroundColor: theme.palette.common.white,\n   // border: `3px solid ${theme.palette.divider}`,\n\n  },\n  optionRadio: {\n    margin: -10\n  },\n  margin: {\n    marginTop: theme.spacing(2),\n  },\n  optionDetails: {\n    marginTop: theme.spacing(1),\n    marginLeft: theme.spacing(2),\n    \n  },\n  optionmaterialDetails: {\n    marginTop: theme.spacing(1),\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n\n  },\n  selectedtext: {\n    color: theme.palette.common.white\n  }\n}));\n\nconst AboutVoucher = props => {\n  const { className, ...rest } = props;\n  const { voucherCtx, setVoucherCtx } = React.useContext(VoucherContext);\n  const { sendNetworkRequest } = React.useContext(NetworkContext);\n  const [vendorlist, setVendorlist] = useState(props.masterData.vendorcode);\n  const [categorylist, setCategorylist] = useState(props.masterData.category);\n  const [producttypelist, setProducttypelist] = useState(props.masterData.product_type);\n  const [productids, setProductids] = useState(props.productids);\n  \n  \n  const [updatestatus, setUpdatestatus] = useState(\"\");\n\n  const [vouchercode, setVouchercode] = useState(\"\");\n  const [discounttype, setDiscounttype] = useState(\"\");\n  const [minreq, setMinreq] = useState(\"None\");\n  const [usagelimit, setUsagelimit] = useState(\"once\");\n  const [formData, setFormData] = useState({});\n\n  const [isonce, setIsonce] = useState(false);\n\n  const classes = useStyles();\n\n  const [selected, setSelected] = useState(1);\n  const [selectedDate, handleDateChange] = useState(new Date());\n\n  const handleChange = (event, option) => {\n    setSelected(option);\n\n  };\n\n  const handleproducttypechange = type => (event, option) => {\n      \n    let vendorsarray = []\n    option.forEach(element => {\n      vendorsarray.push(element.name)\n    });\n    setFormData({...formData, producttypes:vendorsarray})\n    props.apply(formData.vendorid,formData.categories,vendorsarray)\n  };\n  const handlecategorychange = type => (event, option) => {\n    let vendorsarray = []\n    option.forEach(element => {\n      vendorsarray.push(element.name)\n    });\n    setFormData({...formData, categories:vendorsarray})\n\n    props.apply(formData.vendorid,vendorsarray,formData.producttypes)\n  };\n  const hangeoptionchange = type => (event, option) => {\n    \n    let vendorsarray = []\n    option.forEach(element => {\n      vendorsarray.push(element.shortCode)\n    });\n    setFormData({...formData, vendorid:vendorsarray})\n\n    props.apply(vendorsarray,formData.categories,formData.producttypes)\n  };\n \n  const handleClick = async (event, option) => {\n    let response = await sendNetworkRequest('/updatepricelist', {}, formData, false)\n    if(response.status < 400){\n    }else{\n      alert(\"error\")\n    }\n  };\n  const handleuploadstatus = async (event, option) => {\n    let response = await sendNetworkRequest('/getpriceupdatestatus', {}, formData, false)\n    if(response.status < 400){\n      setUpdatestatus(response.message)\n    }else{\n    }\n  };\n  const handleusagelimit = (event, option) => {\n    setUsagelimit(option);\n\n  };\n  const handleInputChange = type => e => {\n    setVouchercode(e.target.value.toUpperCase())\n  }\n  const handleminreq = (event, option) => {\n    setMinreq(option);\n  };\n  const handleonceperorder =  (event, option) => {\n    setIsonce(!isonce);\n  };\n  const generateCoupon = (event) => {\n   // alert(JSON.stringify(voucherCtx))\n   setVouchercode(makeid(10))\n  };\n  \n  \n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"General Information\" />\n      <Divider />\n      <CardContent className={classes.cardcontent}>\n      <Grid container spacing={2}>  \n        <Grid item xs={6} sm={4}>\n           <Autocomplete\n              multiple\n              id=\"combo-box-demo\"\n              options={props.vendorlist}\n              getOptionLabel={option => option.display}\n              fullWidth\n              onChange={hangeoptionchange('vendorcode')}\n              renderInput={params => (\n                <TextField {...params} label=\"Selct Vendor\" variant=\"outlined\" fullWidth />\n              )}\n            />\n        </Grid>\n        <Grid item xs={6} sm={4} >\n        <Autocomplete\n              multiple\n              id=\"combo-box-demo\"\n              options={props.categorylist}\n              getOptionLabel={option => option.name}\n              onChange={handlecategorychange('category')}\n              fullWidth\n              renderInput={params => (\n                <TextField {...params} label=\"Select Product Category\" variant=\"outlined\" fullWidth />\n              )}\n            />\n        </Grid>\n        <Grid item xs={6} sm={4}>\n        <Autocomplete\n              multiple\n              id=\"combo-box-demo\"\n              options={props.producttypelist}\n              getOptionLabel={option => option.name}\n              onChange={handleproducttypechange('product_type')}\n              fullWidth\n              margin=\"dense\"\n              renderInput={params => (\n                <TextField {...params} label=\"Select Product type\" variant=\"outlined\" fullWidth />\n              )}\n            />\n        </Grid>\n        <Grid item xs={12} >\n        \n\n                  <Autocomplete\n                       id=\"free-solo-2-demo\"\n                       multiple\n                       freeSolo\n                       className={classes.fixedTag}\n                       value={props.productids}\n                       options={productids}\n                       renderTags={(value, getTagProps) =>\n                       value.map((option, index) => (\n                       <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                       ))\n                       }\n                       renderInput={params => (\n                       <TextField\n                       {...params}\n                       label=\"Products\"\n                       margin=\"dense\"\n                       variant=\"outlined\"\n                       fullWidth\n\n                       InputProps={{ ...params.InputProps, type: 'search' }}\n                       />\n                       )}\n                       />\n        </Grid>\n\n       \n       \n       {/* <Grid item xs={6} sm={3} >\n\n        <Button variant=\"contained\" \n          onClick={handleClick}\n        color=\"primary\">\n        Update Price\n      </Button>\n      </Grid>\n      \n      <Grid item xs={6} sm={3} >\n\n        <Button variant=\"contained\" \n          onClick={handleuploadstatus}\n        color=\"primary\">\n        Update Status\n      </Button>\n      <Typography variant=\"subtitle1\">\n                {updatestatus}\n      </Typography>\n\n      </Grid> */}\n      {/* <Grid item xs={6} sm={3} >\n      <Button variant=\"contained\" \n          onClick={handleuploadstatus}\n        color=\"primary\">\n        Price Update\n      </Button>\n       \n      </Grid> */}\n        </Grid>\n\n      </CardContent>\n    </Card>\n  );\n};\n\nAboutVoucher.propTypes = {\n  className: PropTypes.string\n};\n\nexport default AboutVoucher;\n","import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { VoucherContext } from '../../context';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport uuid from 'uuid/v1';\nimport Page from '../../components/Page'\nimport { Header, Results,AboutVoucher } from './components';\nimport { productCategory } from '../../services/mapper';\nimport { NetworkContext } from '../../context/NetworkContext';\nconst rows = [\n  { id: 'Gold', label: 'Gold' },\n  { id: 'Diamond', label: 'Diamond' },\n  { id: 'Gemstone', label: 'Gemstone' },\n  { id: 'Making Charge', label: 'Making Charge' },\n  { id: 'Price Update', label: 'Price Update' }\n];\nconst useStyles = makeStyles(theme => ({\n  root: {\n  //  padding: theme.spacing(3)\n  },\n  aboutvoucher: {\n    marginTop: theme.spacing(3)\n  },\n  results: {\n    marginTop: theme.spacing(3)\n  }\n}));\n  \nexport default function PriceupdateContent(props) {\n  const classes = useStyles();\n  const [orders, setOrders] = useState([]);\n  const [masters, setMasters] = useState([]);\n  const {sendNetworkRequest} = React.useContext(NetworkContext)\n  const [sizes, setSizes] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [vendors, setVendors] = useState([]);\n  async function updateprices(component)\n{\n\n  var  bodydata = {}\n  \n  bodydata = {\n    pricingcomponent: component.label,\n    req_product_id : products\n  }\n // alert(JSON.stringify(bodydata))\n  let response = await sendNetworkRequest('/productpriceupdate', {}, bodydata, false)\n alert(JSON.stringify(response))\n\n}\n async function filterapllied(filterdata, categories, producttypes)\n  {\n    var  bodydata = {}\n  \n      bodydata = {\n        vendorid : filterdata ? filterdata : '',\n        product_category : categories ? categories : '',\n        product_type : producttypes ? producttypes : ''\n      }\n    alert(JSON.stringify(bodydata))\n\n    let response = await sendNetworkRequest('/getdistinctproduct', {}, bodydata, false)\n    setProducts(response.products)\n    setCategories(response.category)\n    setVendors(response.vendorlist)\n    // if(response.status < 400){\n    //   alert(JSON.stringify(products))\n    // }\n  }\n async function getsizes()\n  {\n    let response = await sendNetworkRequest('/getsizes', {}, {}, false)\n    if(response.status < 400){\n      setSizes(response.sizes)\n    }else{\n      alert(\"succes21s\")\n    }\n      \n  }\n  useEffect(() => {\n    let mounted = true;\n    //filterapllied()\n    //getsizes();\n    setMasters(productCategory.mapper(props.data));\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n\n    <Page\n    className={classes.root}\n    title=\"Orders Management List\"\n  >\n    <AboutVoucher className={classes.aboutvoucher} apply={filterapllied} productids= {products.length > 0 ? products : []} categorylist={masters.category} producttypelist={masters.product_type} vendorlist={ masters.vendorcode} masterData= {masters} categories={['Fixed Amount','percentage','Free Shipping']} />\n    <Results pricingrows={rows} update={updateprices}/>\n  </Page>\n  </MuiPickersUtilsProvider>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { VoucherContext } from '../../../../context';\n\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  TextField,\n  Popper,\n  CardActionArea,\n  CardActions,\n  Radio,\n  Button,\n  Grid,\n  Checkbox,\n  FormControlLabel,\n  Divider,\n  colors\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  option: {\n    border: `1px solid ${theme.palette.divider}`,\n    display: 'flex',\n    alignItems: 'flex-center',\n    padding: theme.spacing(1),\n    maxWidth: '100%',\n    minWidth: '100%',\n    cursor: 'pointer',\n    '& + &': {\n      marginLeft: theme.spacing(2)\n    }\n  \n  },\n  cardcontent:{\n    display: 'flex',\n    alignItems: 'flex-center',\n\n  },\n  selectedOption: {\n    backgroundColor: theme.palette.primary\n  },\n  optionRadio: {\n    margin: -10\n  },\n  margin: {\n    marginTop: theme.spacing(2),\n  },\n  optionDetails: {\n    marginTop: theme.spacing(1),\n    marginLeft: theme.spacing(2),\n  }\n}));\n\nconst CategoryComponents = props => {\n  const { className, ...rest } = props;\n  const { voucherCtx, setVoucherCtx } = React.useContext(VoucherContext);\n  const [vouchercode, setVouchercode] = useState(\"\");\n\n  const classes = useStyles();\n\n  const [selected, setSelected] = useState(1);\n\n  const handleChange = (event, option) => {\n    setSelected(option);\n\n  };\n  function makeid(length) {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result.toUpperCase();\n }\n \n  const handleClick = (event, option) => {\n    setSelected(option);\n  };\n  const generateCoupon = (event) => {\n   // alert(JSON.stringify(voucherCtx))\n   setVouchercode(\"1234343\")\n  };\n  \n  return (\n        <Grid container item xs={12} sm={12} spacing={1}>\n        \n        {props.materials.map(option => (\n          \n          <Grid justify=\"center\" item xs={3} sm={3} spacing={1}>\n          <CardActionArea>\n            \n          <div\n            className={clsx(classes.option, {\n              [classes.selectedOption]: selected === option\n            })}\n            onClick={event => handleClick(event, option)}\n            key={option}\n          >\n\n           <div className={classes.optionDetails}>\n           <Typography\n                gutterBottom\n                variant=\"h5\"\n              >\n                {option}\n              </Typography>  \n              </div> \n          </div>\n          </CardActionArea>\n          </Grid>\n        ))}  \n        </Grid>\n       \n        \n  );\n};\n\nCategoryComponents.propTypes = {\n};\n\nexport default CategoryComponents;\n","import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { VoucherProvider } from '../../context';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\n\nimport { useQuery } from 'react-apollo';\nimport { productCategory } from '../../services/mapper';\nimport Component from './PriceupdateContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nconst useStyles = makeStyles(theme => ({\n    progress: {\n      margin: theme.spacing(2)\n    },\n  }));\nexport const Priceupdate = withRouter(props => {\n    const classes = useStyles();\n\n    const { data, loading, error } = useQuery(productCategory.query);\n\n    if(loading) return <div><CircularProgress className={classes.progress} />\n    </div>\n    if(error) return <div>error</div>\n    return (\n        \n    // <VoucherProvider value={{ data, mapper: materialMaster.mapper, mappertype:  \"voucherMaster\" }} >\n            \n    <Component {...props} data={data} />\n    // </VoucherProvider>\n\n)});\nexport default Priceupdate;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, Grid } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport './table.css'\n\n\n\nconst useStyles = makeStyles(theme => ({\n    typography: {\n        padding: theme.spacing(2),\n    },\n    conatainerRow:{\n        width:\"300px\",\n        color:\"#6f6f6f\",\n        display: \"grid\",\n    padding: \"16px 24px\",\n    maxHeight:\" 256px\",\n    fontSize:\"9px\",\n    overflowX: \"visible\",\n    overflowY: \"scroll\",\n    gridColumnGap: \"24px\",\n    gridTemplateColumns: \"repeat(2, 1fr)\",\n\n    [theme.breakpoints.up(\"sm\")]: {\n        width:\"500px\",\n        color:\"#6f6f6f\",\n        display: \"grid\",\n    padding: \"16px 24px\",\n    maxHeight:\" 270px\",\n    fontSize:\"14px\",\n    overflowX: \"visible\",\n    overflowY: \"scroll\",\n    gridColumnGap: \"20px\",\n    gridTemplateColumns: \"repeat(2, 1fr)\"\n    }\n\n    }\n}));\n\n\n\nexport default function Columns(props) {\n    const classes = useStyles();\n\n    const checkboxrow = props.columns\n    const [columns,setColumns ] = React.useState({\n        listOfValue:checkboxrow\n    })\n    const [showcolumns,setshowColumns ] = React.useState()\n    \n    function stateChange(id){\n        let listOfValue = columns.listOfValue.map((data,index)=>{\n            if(id===data.id){\n                data.isActive = data.isActive?false:true;\n            }\n            return data;\n        })\n        setColumns({\n            listOfValue\n        })\n    }\n    function resetButton(){\n        let listOfValue = columns.listOfValue.map((data,index)=>{\n            if(!data.disabled)\n            {\n                data.isActive = false;\n            }    \n            \n            return data;\n        })\n        setColumns({\n            listOfValue\n        })\n    }\n    function saveaction(){\n        // let listOfValue = columns.listOfValue.map((data,index)=>{\n        //     if(data.isActive){\n        //               }\n        //               return data;  \n\n        // })\n        let columnnames = []\n        columns.listOfValue.forEach(element => {\n            if(element.isActive)\n            {\n                columnnames.push(element)\n            }\n        });\n        props.getColumnnames(columnnames);\n        props.columnclose()\n    }\n    // const lists = columns.listOfValue.map((head) =>\n    //     (\n    //         <Grid conatiner>\n    //             <Grid item xs={4}><Checkbox\n    //                 value=\"secondary\"\n    //                 color=\"primary\"\n    //                 inputProps={{ 'aria-label': 'secondary checkbox' }}\n    //                 checked = {head.isActive}\n    //                 onChange = {()=>stateChange(head.id)}\n                \n    //             />\n    //                 <h3 style={{ display: \"inline-block\", fontWeight: \"500\" }}>{head}</h3>\n    //             </Grid>\n    //         </Grid>\n    //     )\n\n    // );\n\n   \n\n\n\n\n    return (\n        \n         <div style={{ maxHeight: \"420px\"}}>\n            {/* <Typography style={{ fontWeight: \"400\", color: \"#6f6f6f\", width: \"90%\", margin: \"6px auto\" }} className={classes.typography} variant=\"h5\">(number) columns selected out of (total number)</Typography> */}\n            <Grid style={{ height: \"270px\", borderBottom: \"1px solid #ddd\", width: \"100%\", margin: \"auto\", paddingTop: \"5px\", paddingBottom: \"10px\" }}>\n                <Grid conatiner>\n              <Grid item   className={classes.conatainerRow}>\n                   {columns.listOfValue.map((head) =><Grid container>\n                        <Checkbox\n                            color=\"primary\"\n                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                               checked = {head.isActive}\n                               disabled = {head.disabled}\n                            onChange = {()=>stateChange(head.id)}\n                            \n                        />\n                   <h3 style={{fontWeight: \"500\" }}>{head.name}</h3></Grid>)}\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid style={{ display: \"flex\", justifyContent: \"space-between\", margin: \"10px auto\", width: \"90%\" }}>\n                <Grid>\n                    <Button size=\"large\" onClick={()=>resetButton()}>RESET</Button>\n                </Grid>\n                <Grid style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                    <Button size=\"small\" onClick={()=>props.columnclose()}>cancel</Button>\n                    <Button  size=\"small\" color=\"primary\" onClick={()=>saveaction()}  backgroundColor=\"secondary\" size=\"large\" variant=\"contained\" className={classes.margin}>\n                        SAVE\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n        \n    );\n}\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Columns from './columns';\nimport Popover from '@material-ui/core/Popover';\n\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        color:\"#06847B\",\n        border: \"1px solid #7bbcb7\",\n        '&:hover':{\n            backgroundColor: \"rgba(6, 132, 123, 0.1)\",\n            border: \"1px solid #06847B\",\n        }\n      },\n\n}));\n\nfunction SortHeader(props){\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [options, setOptions] = React.useState(props.columnnames);\n\n    const handleClick = event => {\n        setAnchorEl(event.currentTarget);\n      };\n      const handleClose = () => {\n        setAnchorEl(false);\n      };\n      const open = Boolean(anchorEl);\n      const id = open ? 'simple-popover' : undefined;\n    \n     \n        return(\n            <Grid container lg={12} md={12} sm={12} xs={12} >\n                <Grid xl={8} lg={9} md={8} sm={7} xs={12}>\n                     {/* <h4 className=\"products\">Variants Table</h4>    */}\n                </Grid>\n                <Grid container xl={4} lg={3} md={4} sm={5} xs={12} style={{display: 'flex', justifyContent: 'flex-end'}}>\n                    <Grid className=\"column-btn\" lg={5} md={5} sm={5} xs={5} style={{display: 'flex', justifyContent: 'flex-end'}}>\n                        {/* <Button className=\"product\" size=\"small\" id=\"one\" color=\"primary\" backgroundColor=\"secondary\"  onClick={handleClick} variant=\"outlined\"  color=\"primary\" >\n                            COLUMNS<ArrowDownwardIcon fontSize=\"inherit\" />\n                        </Button> */}\n                        <Button className=\"product\" fullWidth size=\"large\" id=\"one\" color=\"primary\" backgroundColor=\"secondary\"  onClick={handleClick} variant=\"outlined\"  color=\"primary\" >\n                            COLUMNS<ArrowDownwardIcon fontSize=\"inherit\" />\n                        </Button>\n                        <Popover\n                            id={id}\n                            open={open}\n                            anchorEl={anchorEl}\n                            onClose={handleClose}\n                            anchorOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'center',\n                            }}\n                            transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'center',\n                            }}\n                        >\n                            <Columns columns={options} getColumnnames={props.getColumnnames} displytype={props.displytype} columnclose={handleClose}/>\n                        </Popover>\n\n\n\n                    </Grid>\n                    {/* <Grid className=\"column-btn\" lg={7} md={7} sm={7} xs={7}>\n                        <Button id=\"create\"  className=\"product\" variant=\"contained\" size=\"large\" color=\"primary\" backgroundColor=\"secondary\">\n                        CREATE PRODUCT\n                        </Button>\n                    </Grid> */}\n                </Grid>\n            </Grid>\n        ) \n\n}\nexport default SortHeader","import React,{useState} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Grid, Typography, Button } from '@material-ui/core';\n// import {  SnackBarContext } from '../../../../context';\nimport SortHeader from './SortHeader';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Header = props => {\n  const { className, ...rest } = props;\n  const [openApplication, setOpenApplication] = useState(false);\n  // const showSnackbar = React.useContext(SnackBarContext);\n\n  const handleApplicationOpen = () => {\n    setOpenApplication(true);\n  };\n\n  const handleApplicationClose = () => {\n    setOpenApplication(false);\n  };\n  const handleApplicationsave = () => {\n   // showSnackbar.setSnack({ open: true, type: 'success', msg: 'New Category Added Successfully' })\n    setOpenApplication(false);\n\n  };\n  const classes = useStyles();\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Grid\n        alignItems=\"flex-end\"\n        container\n        justify=\"space-between\"\n        spacing={3}\n      >\n        <Grid item>\n          {/* <Typography\n            component=\"h2\"\n            gutterBottom\n            variant=\"overline\"\n          >\n            Management\n          </Typography> */}\n           <Typography\n            component=\"h1\"\n            variant=\"h5\"\n          >\n             Order List\n          </Typography> \n        </Grid>\n        <Grid item>\n\n          <SortHeader columnnames={props.columns} getColumnnames={props.getColumnnames}/>\n         \n        </Grid>\n      </Grid>\n      \n    </div>\n   \n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\n// import moment from 'moment';\nimport PropTypes from 'prop-types';\n// import PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport CreateIcon from '@material-ui/icons/Create';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Moment from 'react-moment';\n\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Divider,\n  IconButton,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  colors\n} from '@material-ui/core';\n\nimport { Label, ReviewStars } from '../../../../components';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  filterButton: {\n    marginRight: theme.spacing(2)\n  },\n  table: {\n    minWidth: 500,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 1150\n  },\n  actions: {\n    padding: theme.spacing(0, 1),\n    justifyContent: 'flex-end'\n  }\n}));\n\nconst Results = props => {\n  const { className, orders, ...rest } = props;\n\n  const classes = useStyles();\n\n  const [selectedOrders, setSelectedOrders] = useState([]);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(50);\n\n  const handleSelectAll = event => {\n    const selectedOrders = event.target.checked\n      ? orders.map(order => order.id)\n      : [];\n\n    setSelectedOrders(selectedOrders);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedOrders.indexOf(id);\n    let newSelectedOrders = [];\n\n    if (selectedIndex === -1) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders, id);\n    } else if (selectedIndex === 0) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders.slice(1));\n    } else if (selectedIndex === selectedOrders.length - 1) {\n      newSelectedOrders = newSelectedOrders.concat(selectedOrders.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedOrders = newSelectedOrders.concat(\n        selectedOrders.slice(0, selectedIndex),\n        selectedOrders.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelectedOrders(newSelectedOrders);\n  };\n\n  const handleChangePage = (event, page) => {\n    setPage(page);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(event.target.value);\n  };\n\n  const paymentStatusColors = {\n    canceled: colors.grey[600],\n    pending: colors.orange[600],\n    completed: colors.green[600],\n    rejected: colors.red[600]\n  };\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      {/* <Typography\n        color=\"textSecondary\"\n        gutterBottom\n        variant=\"body2\"\n      >\n        {orders.length} Records found. Page {page + 1} of{' '}\n        {Math.ceil(orders.length / rowsPerPage)}\n      </Typography> */}\n      <Card>\n        \n        <CardContent className={classes.content}>\n          {/* <PerfectScrollbar> */}\n            <div className={classes.tableWrapper}>\n              <Table className={classes.table} border={1} borderColor={\"#ddd\"} size=\"small\">\n                <TableHead>\n                  <TableRow>\n                  {props.columnobjs.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.name}\n                </TableCell>\n              ))}\n                    {/* <TableCell>Order ID</TableCell>\n                    \n                    <TableCell align=\"left\">Order Date</TableCell>\n                    <TableCell align=\"center\">Customer Name</TableCell>\n                    <TableCell align=\"center\">Email</TableCell>\n                    <TableCell align=\"center\">Mobile</TableCell>\n                    <TableCell align=\"center\">Shipping Address</TableCell>\n                    <TableCell align=\"center\">Gift Message</TableCell>\n                    <TableCell align=\"center\">Payment Type</TableCell>\n                    <TableCell align=\"center\">Payment Status</TableCell> */}\n                    {/* <TableCell align=\"center\">Waybill No</TableCell>\n                    <TableCell align=\"center\">Comments</TableCell>\n                    <TableCell align=\"center\">PG Response</TableCell> */}\n\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {orders.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(order => (\n                    <TableRow\n                      // key={order.id}\n                      // selected={selectedOrders.indexOf(order.id) !== -1}\n                    >\n                      \n                     \n\n                      {props.showcolumns.indexOf('Order ID') > -1 ? <TableCell >{order.id}</TableCell> : null }\n                      {props.showcolumns.indexOf('Order Date') > -1 ? <TableCell align=\"left\" style = {{width: 120}}>            \n                                  <Moment format=\"DD MMM YYYY hh:mm a\">\n                                  {order.createdAt}\n                                  </Moment>\n                                  </TableCell> : null }\n                      {props.showcolumns.indexOf('Customer Name') > -1 ? <TableCell align=\"left\">{order.shoppingCartByCartId.userProfileByUserprofileId ? order.shoppingCartByCartId.userProfileByUserprofileId.firstName : ''}</TableCell> :  null}\n                      {props.showcolumns.indexOf('Email') > -1 ? <TableCell align=\"left\" style = {{width: 40}}>{order.shoppingCartByCartId.userProfileByUserprofileId ? order.shoppingCartByCartId.userProfileByUserprofileId.email : ''}</TableCell> : null}\n                      {props.showcolumns.indexOf('Phone Number') > -1 ? <TableCell align=\"left\" style = {{width: 40}}>{order.shoppingCartByCartId.userProfileByUserprofileId ? order.shoppingCartByCartId.userProfileByUserprofileId.mobile : ''}</TableCell> : null }\n                      {props.showcolumns.indexOf('Shipping Address') > -1 ?  <TableCell align=\"left\">{order.shoppingCartByCartId.cartAddressesByCartId.nodes.length > 0 ? order.shoppingCartByCartId.cartAddressesByCartId.nodes[0].addressline1 : ''}</TableCell> : null }\n                      {props.showcolumns.indexOf('Gift Message') > -1 ? <TableCell align=\"left\">{order.shoppingCartByCartId.giftwrapsByCartId.nodes.length > 0 ? order.shoppingCartByCartId.giftwrapsByCartId.nodes[0].message : ''}</TableCell> : null }\n                      {props.showcolumns.indexOf('Payment Type') > -1 ? <TableCell >{order.paymentMode}</TableCell> : null }\n                      {props.showcolumns.indexOf('Payment Status') > -1 ? <TableCell >{order.paymentStatus}</TableCell> : null }\n                      {props.showcolumns.indexOf('Waybill No') > -1 ? <TableCell >{order.waybill}</TableCell> : null }\n                      {props.showcolumns.indexOf('Comments') > -1 ? <TableCell >{order.comments}</TableCell> : null }\n                      {props.showcolumns.indexOf('Pg Response') > -1 ? <TableCell >{order.pgresponse}</TableCell> : null }\n                      {props.showcolumns.indexOf('SKUs') > -1 ? <TableCell >{order.skus}</TableCell> : null }\n\n                      {/* <TableCell align=\"center\">\n                      <IconButton aria-label=\"add to favorites\">\n                        <CreateIcon />\n                        </IconButton>\n                        <IconButton aria-label=\"add to favorites\">\n                        <DeleteIcon />\n                        </IconButton>\n                      </TableCell> */}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          {/* </PerfectScrollbar> */}\n        </CardContent>\n        <CardActions className={classes.actions}>\n          <TablePagination\n            component=\"div\"\n            count={orders.length}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n            page={page}\n            rowsPerPage={rowsPerPage}\n            rowsPerPageOptions={[50, 100, 250]}\n          />\n        </CardActions>\n      </Card>\n      {/* <TableEditBar selected={selectedOrders} /> */}\n    </div>\n  );\n};\n\nResults.propTypes = {\n  className: PropTypes.string,\n  orders: PropTypes.array.isRequired\n};\n\nResults.defaultProps = {\n  orders: []\n};\n\nexport default Results;\n","import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { OrderContext } from '../../context';\n\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport uuid from 'uuid/v1';\nimport Page from '../../components/Page'\nimport { Header, Results } from './components';\nimport Columns from './components/columnnames.json';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n  //  padding: theme.spacing(3)\n  },\n  results: {\n    marginTop: theme.spacing(3)\n  }\n}));\n  \nexport default function Producttypecontent() {\n  const classes = useStyles();\n  const [orders, setOrders] = useState([]);\n  const { orderCtx, setOrderCtx ,orderMaster} = React.useContext(OrderContext);\n  const [columnnames, setColumnnames] = useState(Columns.columns);\n  const [displaycolumnnames, setDisplaycolumnnames] = useState(Columns.defaultcolumns);\n  const [displaycolumns, setDisplaycolumns] = useState(Columns.defaultcolumnnames);\n\n  function columnchanged(columnnames){\n    let displycolumns = [];\n    columnnames.forEach(element => {\n      displycolumns.push(element.name)\n    })\n    setDisplaycolumns(columnnames)\n    setDisplaycolumnnames(displycolumns)\n  }\n  useEffect(() => {\n    let mounted = true;\n    const fetchOrders = () => {\n\n      setOrders( [\n        {\n          id: uuid(),\n          created_at: \"test\",\n          customer: {\n            name: 'Ekaterina Tankova'\n          },\n          payment: {\n            ref: 'FAD103',\n            method: 'CreditCard',\n            total: '500.00',\n            currency: '$',\n            status: 'pending'\n          },\n          status: 'inactive'\n        }])\n    };\n   \n    fetchOrders();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <Page\n    className={classes.root}\n    title=\"Orders Management List\"\n  >\n    <Header getColumnnames={columnchanged} columns={columnnames}/>\n    <Results\n      className={classes.results}\n     orders={orderCtx.orderMaster.orders}\n     showcolumns={displaycolumnnames}\n     columnobjs={displaycolumns}\n\n\n    />\n    \n  </Page>\n  );\n}","import React from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { OrderProvider } from '../../context';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\n\nimport { useQuery } from 'react-apollo';\nimport { orderList } from '../../services/mapper';\nimport Component from './Orderlistcontent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nconst useStyles = makeStyles(theme => ({\n    progress: {\n      margin: theme.spacing(2)\n    },\n  }));\nexport const OrderList = withRouter(props => {\n    const classes = useStyles();\n\n    const { data, loading, error } = useQuery(orderList.query);\n\n    if(loading) return <div><CircularProgress className={classes.progress} />\n    </div>\n    if(error) return <div>error</div>\n    return (\n        \n        <OrderProvider value={{ data, mapper: orderList.mapper, mappertype:  \"orderMaster\" }} >\n            \n    <Component {...props} />\n    </OrderProvider>\n\n)});\nexport default OrderList;","import React,{ useEffect, useContext, useState }  from 'react';\nimport clsx from 'clsx';\nimport {lighten, makeStyles, useTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TableHead from '@material-ui/core/TableHead';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Input, Grid, Card} from '@material-ui/core';\nimport { Link as RouterLink } from 'react-router-dom'\nimport Link from '@material-ui/core/Link'\nimport { Query, withApollo } from 'react-apollo';\nimport {GOLDPRICELIST,ALLPRODUCTLIST,PRODUCTLISTSTATUSEDIT} from '../../../graphql/query';\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Switch } from '@material-ui/core';\nimport { useMutation,useQuery } from '@apollo/react-hooks';\nimport { NetworkContext } from '../../../context/NetworkContext';\nimport Moment from 'react-moment';\nimport CancelIcon from '@material-ui/icons/CancelOutlined';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n \n  Chip,\n  TextField\n} from '@material-ui/core';\nimport {BASE_URL} from '../../../config'\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Filterandsearch from './../../../screens/Productlist/filterandsearch';\nconst columns = [\n  { id: 'Metal', label: 'Metal' },\n  { id: 'Purity', label: 'Purity' },\n  { id: 'Cost Price', label: 'Cost Price' },\n  { id: 'Selling Price', label: 'Selling Price' },\n  { id: 'Selling Price Type', label: 'Selling Price Type' },\n  { id: 'updatedAt', label: 'updatedAt' },\n  { id: 'Edit', label: 'Edit' }\n\n];\n\nconst useStyles1 = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\nfunction createData(name, calories, fat) {\n  return { name, calories, fat };\n}\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  function handleFirstPageButtonClick(event) {\n    onChangePage(event, 0);\n  }\n\n  function handleBackButtonClick(event) {\n    onChangePage(event, page - 1);\n  }\n\n  function handleNextButtonClick(event) {\n    onChangePage(event, page + 1);\n  }\n\n  function handleLastPageButtonClick(event) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\n  { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\n  { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\n  { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\n  { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = property => event => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n       \n        {columns.map(headCell => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            {/* <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? '' : ''}\n                </span>\n              ) : null}\n            </TableSortLabel> */}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles(theme => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = props => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n          Nutrition\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n          \n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\n\n\n\n\nconst useStyles2 = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  table: {\n    minWidth: 500,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n}));\n\nconst   AddContact=(props)=> {\n  let history = useHistory();\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(50);\n  const [pageCount,setPageCount] = React.useState(0);\n  const [offsetValue,setOffsetValue] = React.useState(0)\n  const [editdiamond,setEditdiamond] = React.useState({})\n  const [goldpricelist,setGoldpricelist] = React.useState({})\n  const { sendNetworkRequest } = React.useContext(NetworkContext);\n\n  // const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.contactlist.length - page * rowsPerPage);\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('Product Id');\n  const [btnEdit, setBtnEdit] = React.useState({\n    action: false,\n    id: ''\n  })\n  function handleChangePage(event, newPage) {\n    setPage(newPage);\n    setOffsetValue(newPage*rowsPerPage)\n  }\n  function CancelEdit(diamondData) {\n    setBtnEdit({ ...btnEdit, id:'', action: false })\n\n  }\n  function handleEdit(diamondData) {\n        setEditdiamond({\n          ...editdiamond,\n          priceid: diamondData.id,\n          costPrice : diamondData.costPrice,\n          sellingPriceType : diamondData.sellingPriceType,\n          sellingPrice : diamondData.sellingPrice,\n          updatedAt : new Date()\n\n\n        })\n    // setProductCtx({\n    //   ...productCtx,\n    //   editleadtime:diamondData.vendorDeliveryTime,\n    //   editreadytoship: diamondData.isReadyToShip,\n    //   editisdefault:diamondData.isdefault,\n    //   editisactive:diamondData.isActive\n    // })\n    setBtnEdit({ ...btnEdit, id:diamondData.id, action: true })\n\n  }\n  async function handleSave(id, refetch){\n    var bodydata = {}\n   bodydata = {\n    priceid: editdiamond.priceid,\n    costprice : editdiamond.costPrice,\n    sellingprice : editdiamond.sellingPrice,\n    pricetype: editdiamond.sellingPriceType.label\n   }\n  await sendNetworkRequest('/updatemetalprice', {}, bodydata)\n\n    setBtnEdit({ ...btnEdit, id:\"\", action: false })\n    refetch()\n\n  }\n  const handleoptionChange = type => (event, value) => {\n    setEditdiamond({ ...editdiamond, [type]: value})\n}\n  const handleinputChange =type => e => {\n   setEditdiamond({\n     ...editdiamond,\n     [type]: e.target.value\n   })\n     // setProductCtx({ ...productCtx, [type]: e.target.value})\n   \n  }\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }\n  function ProductEdit(id){\n    // localStorage.setItem('productEditId',id);\n    history.push(`product_attributes/${id}`)\n  }\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n  useEffect(() => {\n    const query = props.client.query\n      query({\n        query: ALLPRODUCTLIST,\n        fetchPolicy: \"network-only\"\n      }).then((data) => {\n        // if (data) {\n        // setProductlists(data.data.allProductLists.nodes)\n        // setAllProductlists(data.data.allProductLists.nodes)\n        // setPageCount( data.data.allProductLists.totalCount )\n        // }else{\n        //   alert(\"success\")\n        // }\n      })\n    .catch((error) => {console.log(\"smbcj\")})\n    }, [])\n  // function productItemStatusChange(id,isactive){\n    // let variable = {\n    //   \"productId\": id\n    // };\n    // let status = isactive ? variable.isActive = false :variable.isActive = true;\n    async function productItemStatusChange(id,isactive,refetch){\n      let variables ={\n        productId:id,\n        isActive:isactive ?false:true\n      }\n      await props.client.mutate({mutation:PRODUCTLISTSTATUSEDIT,variables}).then(res=>{\n\n        if(res!==null){\n          refetch();\n        }\n      }).catch(console.error)\n    \n    }\n    // const [productItemStatusChange,{ data }] = useMutation(PRODUCTLISTSTATUSEDIT);\n  // }\n  return (\n      <>\n    <Card className={classes.cardcontent} > \n    <Grid container justify=\"left\"   alignItems=\"center\" className={classes.cardroot} spacing={4}>\n      <Grid item> \n      <Typography variant=\"h6\"> \n        {\"Diamond Price Setup\"}\n      </Typography> \n      </Grid>\n      <Grid item> \n      <TextField\n          variant=\"outlined\"\n          margin=\"dense\"\n          label=\"Diamond Price Setup\"\n          className={classes.helperinput}\n          onChange={handleinputChange('weight_start')}\n          id=\"productvendorcode\"\n          name=\"Cost Price\"\n      />\n      </Grid>\n      <Grid item>\n        <Button color=\"primary\" variant=\"outlined\"  size=\"small\">\n              Add New\n        </Button>\n      </Grid>\n\n      </Grid>\n    </Card>\n    <Paper className={classes.root}>\n      \n      <div className={classes.tableWrapper}>\n      \n        <Table className={classes.table} border={1} borderColor={\"#ddd\"} size=\"small\" stickyHeader>\n        <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n          <Query\n              query={GOLDPRICELIST}\n              onCompleted={data => setPageCount( data.allGoldPriceSettings.totalCount )}\n              variables={{ \"vendorCode\": props.vendor}}>\n              {\n                  ({ data, loading, error, refetch }) => {\n                    debugger\n                      if (loading) {\n                          // return <Loader />\n                      }\n                      if (error) {\n                        return <div>{error}</div>\n                          // return false\n                      }\n                      if (data) {\n                        setGoldpricelist(data)\n                          return <>\n                              { data.allGoldPriceSettings.nodes.map((row, index) => (\n                                  <TableRow key={row.material}>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                     {row.material}\n                                    \n                                  </TableCell>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                  {row.purity}\n                                    \n                                  </TableCell>\n                                  <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ? <Input\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Cost Price\"\n                                    fullWidth\n                                    className={classes.helperinput}\n                                    value= {editdiamond.costPrice}\n                                    onChange={handleinputChange('costPrice')}\n                                    id=\"productvendorcode\"\n\n                                    name=\"Cost Price\"\n                                    /> : \n                                    <Typography className={classes.heading}> \n                                    {row.costPrice} </Typography>  }\n                                    </TableCell>\n                                  <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ? <Input\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Cost Price\"\n                                    fullWidth\n                                    className={classes.helperinput}\n                                    value= {editdiamond.sellingPrice}\n                                    onChange={handleinputChange('sellingPrice')}\n                                    id=\"productvendorcode\"\n                                    name=\"Cost Price\"\n                                    /> : \n                                    <Typography className={classes.heading}> \n                                    {row.sellingPrice} </Typography>  }\n                                    </TableCell>\n\n                                    <TableCell align=\"center\">\n                                    {\n                                    btnEdit.action && btnEdit.id == row.id ?  <Autocomplete\n                                      id=\"free-solo-2-demo\"\n                                      fullWidth\n                                      disableClearable\n                                      className={classes.fixedTag}\n                                      onChange={handleoptionChange('sellingPriceType')}\n                                      getOptionLabel={option => option.name}\n                                      options={[{label: 1,name:\"Flat\"},{label:2,name:\"Percentage\"}]}\n                                      renderTags={(value, getTagProps) =>\n                                      value.map((option, index) => (\n                                      <Chip variant=\"outlined\" size=\"small\" label={option.name} {...getTagProps({ index })} />\n                                      ))\n                                      }\n                                      renderInput={params => (\n                                      <TextField\n                                      {...params}\n                                      label=\"Price Type\"\n                                      margin=\"dense\"\n                                      variant=\"outlined\"\n                                      fullWidth\n                                      InputProps={{ ...params.InputProps, readOnly: true, type: 'search' }}\n                                      />\n                                      )}\n                                      /> : <Typography className={classes.heading}> \n                                      {row.sellingPriceType === 1 ? 'Flat' : 'Percentage'} </Typography>  }\n\n                                    </TableCell>\n\n\n\n\n                                  <TableCell align=\"left\">            \n                                  <Moment format=\"DD MMM YYYY hh:mm a\">\n                                  { btnEdit.action && btnEdit.id == row.id ? editdiamond.updatedAt : row.updatedAt}\n                                  </Moment>\n                                  </TableCell>\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ?\n                                      <TableCell  style = {{width: 20}} align=\"center\">\n                                        <Button onClick={(e) => handleSave(row.generatedSku, refetch)}><SaveIcon />\n                                        </Button>\n                                        <Button onClick={(e) => CancelEdit(row)}><CancelIcon />\n                                        </Button>\n                                      </TableCell> :\n                                      <TableCell align=\"center\" style = {{width: 20}}>\n                                        <Button onClick={(e) => handleEdit(row)}><EditIcon />\n                                        </Button>\n                                      </TableCell>\n                                  }\n                                </TableRow>\n                              ))}\n                          </>\n                      }\n                      else{\n                      return <div>{\"Fetch Products\"}</div>\n                      }\n                  }}\n          </Query>\n            {/* {emptyRows > 0 && (\n              <TableRow style={{ height: 48 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )} */}\n          </TableBody>\n          {/* <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[50,100,200,500]}\n                colSpan={5}\n                count={pageCount}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                // ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>*/}\n        </Table> \n      </div>\n    </Paper>\n    </>\n  );\n}\nexport default withApollo(AddContact);\n","import React from 'react';\nimport clsx from 'clsx';\nimport {lighten, makeStyles, useTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { Input} from '@material-ui/core';\nimport {Grid, Card} from '@material-ui/core';\n\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TableHead from '@material-ui/core/TableHead';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Link as RouterLink } from 'react-router-dom'\nimport Link from '@material-ui/core/Link'\nimport { Query, withApollo } from 'react-apollo';\nimport {DIAMONDPRICELIST,PRODUCTLISTSTATUSEDIT} from '../../../graphql/query';\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Switch } from '@material-ui/core';\nimport { useMutation,useQuery } from '@apollo/react-hooks';\nimport Moment from 'react-moment';\nimport {BASE_URL} from '../../../config'\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Filterandsearch from './../../../screens/Productlist/filterandsearch';\nimport CancelIcon from '@material-ui/icons/CancelOutlined';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { NetworkContext } from '../../../context/NetworkContext';\n\nimport {\n \n  Chip,\n  TextField\n} from '@material-ui/core';\nconst columns = [\n  { id: 'Diamond Colour', label: 'Diamond Colour' },\n  { id: 'Diamond Clarity', label: 'Diamond Clarity' },\n  { id: 'Cost Price', label: 'Cost Price' },\n  { id: 'Selling Price', label: 'Selling Price' },\n  { id: 'Selling Price Type', label: 'Selling Price Type' },\n  { id: 'updatedAt', label: 'updatedAt' },\n  { id: 'Edit', label: 'Edit' }\n\n];\n\nconst useStyles1 = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\nfunction createData(name, calories, fat) {\n  return { name, calories, fat };\n}\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  function handleFirstPageButtonClick(event) {\n    onChangePage(event, 0);\n  }\n\n  function handleBackButtonClick(event) {\n    onChangePage(event, page - 1);\n  }\n\n  function handleNextButtonClick(event) {\n    onChangePage(event, page + 1);\n  }\n\n  function handleLastPageButtonClick(event) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\n  { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\n  { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\n  { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\n  { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = property => event => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n       \n        {columns.map(headCell => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            {/* <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? '' : ''}\n                </span>\n              ) : null}\n            </TableSortLabel> */}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles(theme => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = props => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n          Nutrition\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n          \n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\n\n\n\n\nconst useStyles2 = makeStyles(theme => ({\n  root: {\n    width: '100%',\n   \n  },\n  cardroot: {\n    flexGrow: 1,\n  },\n  cardcontent: {\n    padding: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  },\n  table: {\n    minWidth: 500,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n}));\n\nconst   AddContact=(props)=> {\n  let history = useHistory();\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(50);\n  const [pageCount,setPageCount] = React.useState(0);\n  const [offsetValue,setOffsetValue] = React.useState(0)\n  const [editdiamond,setEditdiamond] = React.useState({})\n  const { sendNetworkRequest } = React.useContext(NetworkContext);\n\n  // const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.contactlist.length - page * rowsPerPage);\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('Product Id');\n  const [btnEdit, setBtnEdit] = React.useState({\n    action: false,\n    id: ''\n  })\n  function handleChangePage(event, newPage) {\n    setPage(newPage);\n    setOffsetValue(newPage*rowsPerPage)\n  }\n\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }\n  function ProductEdit(id){\n    // localStorage.setItem('productEditId',id);\n    history.push(`product_attributes/${id}`)\n  }\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n  function CancelEdit(diamondData) {\n    setBtnEdit({ ...btnEdit, id:'', action: false })\n\n  }\n  function handleEdit(diamondData) {\n      setEditdiamond({\n        ...editdiamond,\n        priceid : diamondData.id,\n        costPrice : diamondData.costPrice,\n        sellingPriceType : diamondData.sellingPriceType,\n        sellingPrice : diamondData.sellingPrice,\n        updatedAt : new Date()\n\n      })\n    // setProductCtx({\n    //   ...productCtx,\n    //   editleadtime:diamondData.vendorDeliveryTime,\n    //   editreadytoship: diamondData.isReadyToShip,\n    //   editisdefault:diamondData.isdefault,\n    //   editisactive:diamondData.isActive\n    // })\n    setBtnEdit({ ...btnEdit, id:diamondData.id, action: true })\n\n  }\n  async function handleSave(id,refetch){\n    var bodydata = {}\n    bodydata = {\n      priceid: editdiamond.priceid,\n      costprice : editdiamond.costPrice,\n      sellingprice : editdiamond.sellingPrice,\n      pricetype: editdiamond.sellingPriceType.label\n     }\n    await sendNetworkRequest('/updatediamondprice', {}, bodydata)\n  \n      setBtnEdit({ ...btnEdit, id:\"\", action: false })\n      refetch()\n\n\n  }\n\n  const handleoptionChange = type => (event, value) => {\n    setEditdiamond({ ...editdiamond, [type]: value})\n}\n  const handleinputChange =type => e => {\n   setEditdiamond({\n     ...editdiamond,\n     [type]: e.target.value\n   })\n  }\n  // function productItemStatusChange(id,isactive){\n    // let variable = {\n    //   \"productId\": id\n    // };\n    // let status = isactive ? variable.isActive = false :variable.isActive = true;\n    async function productItemStatusChange(id,isactive,refetch){\n      let variables ={\n        productId:id,\n        isActive:isactive ?false:true\n      }\n      await props.client.mutate({mutation:PRODUCTLISTSTATUSEDIT,variables}).then(res=>{\n\n        if(res!==null){\n          refetch();\n        }\n      }).catch(console.error)\n    \n    }\n    // const [productItemStatusChange,{ data }] = useMutation(PRODUCTLISTSTATUSEDIT);\n  // }\n  return (\n    <>\n    <Card className={classes.cardcontent} > \n    <Grid container justify=\"left\"   alignItems=\"center\" className={classes.cardroot} spacing={4}>\n      <Grid item> \n      <Typography variant=\"h6\"> \n        {\"Diamond Price Setup\"}\n      </Typography> \n      </Grid>\n      <Grid item> \n      <TextField\n          variant=\"outlined\"\n          margin=\"dense\"\n          label=\"Diamond Price Setup\"\n          className={classes.helperinput}\n          onChange={handleinputChange('weight_start')}\n          id=\"productvendorcode\"\n          name=\"Cost Price\"\n      />\n      </Grid>\n      <Grid item>\n        <Button color=\"primary\" variant=\"outlined\"  size=\"small\">\n              Add New\n        </Button>\n      </Grid>\n\n      </Grid>\n    </Card>\n    <Paper className={classes.root}>\n    \n      <div className={classes.tableWrapper}>\n      \n        <Table className={classes.table} border={1} borderColor={\"#ddd\"} size=\"small\" stickyHeader>\n        <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n          <Query\n              query={DIAMONDPRICELIST}\n              onCompleted={data => setPageCount( data.allDiamondPriceSettings.totalCount )}\n              variables={{ \"vendorCode\": 'STYPA 010'}}>\n              {\n                  ({ data, loading, error, refetch }) => {\n                    debugger\n                      if (loading) {\n                          // return <Loader />\n                      }\n                      if (error) {\n                        return <div>{error}</div>\n                          // return false\n                      }\n                      if (data) {\n                          return <>\n                              {data.allDiamondPriceSettings.nodes.map((row, index) => (\n                                  <TableRow key={row.diamondClarity}>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                     {row.diamondClarity}\n                                    \n                                  </TableCell>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                  {row.diamondColour}\n                                    \n                                  </TableCell>\n                                  <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ? <Input\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Cost Price\"\n                                    fullWidth\n                                    className={classes.helperinput}\n                                    value= {editdiamond.costPrice}\n                                    onChange={handleinputChange('costPrice')}\n                                    id=\"productvendorcode\"\n                                    name=\"Cost Price\"\n                                    /> : \n                                    <Typography className={classes.heading}> \n                                    {row.costPrice} </Typography>  }\n                                    </TableCell>\n                                  <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ? <Input\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Cost Price\"\n                                    fullWidth\n                                    className={classes.helperinput}\n                                    value= {editdiamond.sellingPrice}\n                                    onChange={handleinputChange('sellingPrice')}\n                                    id=\"productvendorcode\"\n                                    name=\"Cost Price\"\n                                    /> : \n                                    <Typography className={classes.heading}> \n                                    {row.sellingPrice} </Typography>  }\n                                    </TableCell>\n                                  <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ?  <Autocomplete\n                                      id=\"free-solo-2-demo\"\n                                      fullWidth\n                                      disableClearable\n                                      className={classes.fixedTag}\n                                      getOptionLabel={option => option.name}\n                                      options={[{label: 1,name:\"Flat\"},{label:2,name:\"Percentage\"}]}\n                                      onChange={handleoptionChange('sellingPriceType')}\n                                      renderTags={(value, getTagProps) =>\n                                      value.map((option, index) => (\n                                      <Chip variant=\"outlined\" size=\"small\" label={option.name} {...getTagProps({ index })} />\n                                      ))\n                                      }\n                                      renderInput={params => (\n                                      <TextField\n                                      {...params}\n                                      label=\"Price Type\"\n                                      margin=\"dense\"\n                                      variant=\"outlined\"\n                                      fullWidth\n                                      InputProps={{ ...params.InputProps, readOnly: true, type: 'search' }}\n                                      />\n                                      )}\n                                      /> : <Typography className={classes.heading}> \n                                      {row.sellingPriceType === 1 ? 'Flat' : 'Percentage'} </Typography>  }\n\n                                  </TableCell>\n\n                                  <TableCell align=\"left\">            \n                                  <Moment format=\"DD MMM YYYY hh:mm a\">\n                                  {row.updatedAt}\n                                  </Moment>\n                                  </TableCell>\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ?\n                                      <TableCell  style = {{width: 20}} align=\"center\">\n                                        <Button onClick={(e) => handleSave(row.generatedSku, refetch)}><SaveIcon />\n                                        </Button>\n                                        <Button onClick={(e) => CancelEdit(row)}><CancelIcon />\n                                        </Button>\n                                      </TableCell> :\n                                      <TableCell align=\"center\" style = {{width: 20}}>\n                                        <Button onClick={(e) => handleEdit(row)}><EditIcon />\n                                        </Button>\n                                      </TableCell>\n                                  }\n                                </TableRow>\n                              ))}\n                          </>\n                      }\n                      else{\n                      return <div>{\"Fetch Products\"}</div>\n                      }\n                  }}\n          </Query>\n            {/* {emptyRows > 0 && (\n              <TableRow style={{ height: 48 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )} */}\n          </TableBody>\n          {/* <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[50,100,200,500]}\n                colSpan={5}\n                count={pageCount}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                // ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>*/}\n        </Table> \n      </div>\n    </Paper>\n  </>\n  );\n}\nexport default withApollo(AddContact);\n","import React,{ useEffect} from 'react';\nimport clsx from 'clsx';\nimport {lighten, makeStyles, useTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { Input} from '@material-ui/core';\nimport {Card,CardContent} from '@material-ui/core';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TableHead from '@material-ui/core/TableHead';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {Grid} from '@material-ui/core';\nimport { Link as RouterLink } from 'react-router-dom'\nimport Link from '@material-ui/core/Link'\nimport { Query, withApollo } from 'react-apollo';\nimport {GEMPRICELIST,PRODUCTLISTSTATUSEDIT} from '../../../graphql/query';\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Switch } from '@material-ui/core';\nimport { useMutation,useQuery } from '@apollo/react-hooks';\nimport Moment from 'react-moment';\nimport {BASE_URL} from '../../../config'\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Filterandsearch from './../../../screens/Productlist/filterandsearch';\nimport { NetworkContext } from '../../../context/NetworkContext';\n\nimport CancelIcon from '@material-ui/icons/CancelOutlined';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n \n  Chip,\n  TextField\n} from '@material-ui/core';\nconst columns = [\n  { id: 'Gemstone Type', label: 'Gemstone Type' },\n  { id: 'From weight', label: 'From weight' },\n  { id: 'To Weight', label: 'To Weight' },\n  { id: 'Cost Price', label: 'Cost Price' },\n  { id: 'Selling Price', label: 'Selling Price' },\n  { id: 'Selling Price Type', label: 'Selling Price Type' },\n  { id: 'updatedAt', label: 'updatedAt' },\n  { id: 'Edit', label: 'Edit' }\n\n];\n\nconst useStyles1 = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\nfunction createData(name, calories, fat) {\n  return { name, calories, fat };\n}\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  function handleFirstPageButtonClick(event) {\n    onChangePage(event, 0);\n  }\n\n  function handleBackButtonClick(event) {\n    onChangePage(event, page - 1);\n  }\n\n  function handleNextButtonClick(event) {\n    onChangePage(event, page + 1);\n  }\n\n  function handleLastPageButtonClick(event) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\n  { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\n  { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\n  { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\n  { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = property => event => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n       \n        {columns.map(headCell => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            {/* <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? '' : ''}\n                </span>\n              ) : null}\n            </TableSortLabel> */}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles(theme => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = props => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n          Nutrition\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n          \n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\n\n\n\n\nconst useStyles2 = makeStyles(theme => ({\n  root: {\n    width: '100%',\n\n  },\n  cardroot: {\n    flexGrow: 1,\n  },\n  cardcontent: {\n    padding: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  },\n  table: {\n    minWidth: 500,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n}));\n\nconst   AddContact=(props)=> {\n  let history = useHistory();\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [pageCount,setPageCount] = React.useState(0);\n  const [offsetValue,setOffsetValue] = React.useState(0)\n  // const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.contactlist.length - page * rowsPerPage);\n  const { sendNetworkRequest } = React.useContext(NetworkContext);\n  const [vendorid,setVendorid] = React.useState(props.vendor);\n\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('Product Id');\n  const [editgem,setEditgem] = React.useState({})\n  const [gemlist,setgemlist] = React.useState([])\n\n  const [btnEdit, setBtnEdit] = React.useState({\n    action: false,\n    id: ''\n  })\n  function handleChangePage(event, newPage) {\n    setPage(newPage);\n    setOffsetValue(newPage*rowsPerPage)\n  }\n\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }\n  function ProductEdit(id){\n    // localStorage.setItem('productEditId',id);\n    history.push(`product_attributes/${id}`)\n  }\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n  function CancelEdit(diamondData) {\n    setBtnEdit({ ...btnEdit, id:'', action: false })\n\n  }\n  function handleEdit(diamondData) {\n      setEditgem({\n        ...editgem,\n        cost_price_id : diamondData.costprice.id,\n        weight_start : diamondData.costprice.weight_start,\n        weight_end : diamondData.costprice.weight_end,\n        cost_price : diamondData.costprice.price,\n         selling_price : diamondData.sellprice.price,\n         selling_price_id : diamondData.sellprice.id,\n\n        updatedAt : new Date()\n\n\n      })\n    // setProductCtx({\n    //   ...productCtx,\n    //   editleadtime:diamondData.vendorDeliveryTime,\n    //   editreadytoship: diamondData.isReadyToShip,\n    //   editisdefault:diamondData.isdefault,\n    //   editisactive:diamondData.isActive\n    // })\n    setBtnEdit({ ...btnEdit, id:diamondData.costprice.id, action: true })\n\n  }\n\n async function handleSave(id){\n    var bodydata = {}\n   \n   await sendNetworkRequest('/updategemstoneprice', {}, editgem)\n\n    getgemlist()\n    setBtnEdit({ ...btnEdit, id:\"\", action: false })\n\n  }\n  async function getgemlist()\n  {\n    let bodydata = {\n      vendorid : props.vendor,\n      ratetype : props.viewtype\n    }\n   \n    let response =  await sendNetworkRequest('/getvendorgemprice', {}, bodydata)\n   // setProductlists(response.products)\n   setgemlist(response.gems)\n\n  }\n  useEffect( () => {\n    getgemlist()\n  }, [vendorid])\n\n\n  const handleinputChange =type => e => {\n    setEditgem({\n      ...editgem,\n      [type]: e.target.value\n    })\n      // setProductCtx({ ...productCtx, [type]: e.target.value})\n    \n   }\n  // function productItemStatusChange(id,isactive){\n    // let variable = {\n    //   \"productId\": id\n    // };\n    // let status = isactive ? variable.isActive = false :variable.isActive = true;\n    async function productItemStatusChange(id,isactive,refetch){\n      let variables ={\n        productId:id,\n        isActive:isactive ?false:true\n      }\n      await props.client.mutate({mutation:PRODUCTLISTSTATUSEDIT,variables}).then(res=>{\n\n        if(res!==null){\n          refetch();\n        }\n      }).catch(console.error)\n    \n    }\n    // const [productItemStatusChange,{ data }] = useMutation(PRODUCTLISTSTATUSEDIT);\n  // }\n  return (\n    <>\n   <Card className={classes.cardcontent} > \n    <Grid container justify=\"left\"   alignItems=\"center\" className={classes.cardroot} spacing={4}>\n      <Grid item> \n      <Typography variant=\"h6\"> \n        {props.title}\n      </Typography> \n      </Grid>\n      <Grid item> \n      <TextField\n          variant=\"outlined\"\n          margin=\"dense\"\n          label=\"Search By Purity\"\n          className={classes.helperinput}\n          onChange={handleinputChange('weight_start')}\n          id=\"productvendorcode\"\n          name=\"Cost Price\"\n      />\n      </Grid>\n      <Grid item>\n        <Button color=\"primary\" variant=\"outlined\"  size=\"small\">\n              Add New\n        </Button>\n      </Grid>\n\n      </Grid>\n    </Card>\n    <Paper className={classes.root}>\n       \n      {/* <div className={classes.tableWrapper} style={{marginTop:16,marginBottom:16,textAlign: \"right\"} }>\n        \n      </div> */}\n      <div className={classes.tableWrapper}>\n      \n        <Table className={classes.table} border={1} borderColor={\"#ddd\"} size=\"small\" stickyHeader>\n        <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n          {/* <Query\n              query={GEMPRICELIST}\n              onCompleted={data => setPageCount( data.allGemstonePriceSettings.totalCount )}\n              variables={{ \"vendorCode\": 'STYPA 010',\"rateType\": 1}}>\n              {\n                  ({ data, loading, error, refetch }) => {\n                    debugger\n                      if (loading) {\n                          // return <Loader />\n                      }\n                      if (error) {\n                        return <div>{error}</div>\n                          // return false\n                      }\n                      if (data) {\n                          return <> */}\n                               {stableSort(gemlist, getComparator(order, orderBy)).map((row, index) => (\n                                  <TableRow key={row.gemstoneType}>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                     {row.costprice.gemstone_type}\n                                    \n                                  </TableCell>\n                                  <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.costprice.id ? <Input\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Cost Price\"\n                                    fullWidth\n                                    className={classes.helperinput}\n                                    value= {editgem.weight_start}\n                                    onChange={handleinputChange('weight_start')}\n                                    id=\"productvendorcode\"\n                                    name=\"Cost Price\"\n                                    /> : \n                                    <Typography className={classes.heading}> \n                                    {row.costprice.weight_start}\n                                   </Typography>  }\n                                    </TableCell>\n                                    <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.costprice.id ? <Input\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Cost Price\"\n                                    fullWidth\n                                    className={classes.helperinput}\n                                    value= {editgem.weight_end}\n                                    onChange={handleinputChange('weight_end')}\n                                    id=\"productvendorcode\"\n                                    name=\"Cost Price\"\n                                    /> : \n                                    <Typography className={classes.heading}> \n                                    {row.costprice.weight_end}\n                                   </Typography>  }\n                                    </TableCell>\n\n                                    <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.costprice.id ? <Input\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Cost Price\"\n                                    fullWidth\n                                    className={classes.helperinput}\n                                    value= {editgem.cost_price}\n                                    onChange={handleinputChange('cost_price')}\n                                    id=\"productvendorcode\"\n                                    name=\"Cost Price\"\n                                    /> : \n                                    <Typography className={classes.heading}> \n                                    {row.costprice.price}\n                                   </Typography>  }\n                                    </TableCell>\n                                    <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.costprice.id ? <Input\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Cost Price\"\n                                    fullWidth\n                                    className={classes.helperinput}\n                                    value= {editgem.selling_price}\n                                    onChange={handleinputChange('selling_price')}\n                                    id=\"productvendorcode\"\n                                    name=\"Cost Price\"\n                                    /> : \n                                    <Typography className={classes.heading}> \n                                    {row.sellprice.price}\n                                   </Typography>  }\n                                    </TableCell>\n\n                                  <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.costprice.id ?  <Autocomplete\n                                      id=\"free-solo-2-demo\"\n                                      fullWidth\n                                      disableClearable\n                                      className={classes.fixedTag}\n                                      getOptionLabel={option => option.name}\n                                      options={[{label: 1,name:\"Flat\"},{label:2,name:\"Percentage\"}]}\n                                      renderTags={(value, getTagProps) =>\n                                      value.map((option, index) => (\n                                      <Chip variant=\"outlined\" size=\"small\" label={option.name} {...getTagProps({ index })} />\n                                      ))\n                                      }\n                                      renderInput={params => (\n                                      <TextField\n                                      {...params}\n                                      label=\"Price Type\"\n                                      margin=\"dense\"\n                                      variant=\"outlined\"\n                                      fullWidth\n                                      InputProps={{ ...params.InputProps, readOnly: true, type: 'search' }}\n                                      />\n                                      )}\n                                      /> : <Typography className={classes.heading}> \n                                      {row.sellprice.selling_price_type === 1 ? 'Flat' : 'Percentage'} </Typography>  }\n\n                                    </TableCell>\n\n                                  <TableCell align=\"left\">            \n                                  <Moment format=\"DD MMM YYYY hh:mm a\">\n                                  {row.updatedAt}\n                                  </Moment>\n                                  </TableCell>\n                                  {\n                                    btnEdit.action && btnEdit.id == row.costprice.id ?\n                                      <TableCell  style = {{width: 20}} align=\"center\">\n                                        <Button onClick={(e) => handleSave(row.generatedSku)}><SaveIcon />\n                                        </Button>\n                                        <Button onClick={(e) => CancelEdit(row)}><CancelIcon />\n                                        </Button>\n                                      </TableCell> :\n                                      <TableCell align=\"center\" style = {{width: 20}}>\n                                        <Button onClick={(e) => handleEdit(row)}><EditIcon />\n                                        </Button>\n                                      </TableCell>\n                                  }\n                                </TableRow>\n                              ))}\n                          {/* </>\n                      }\n                      else{\n                      return <div>{\"Fetch Products\"}</div>\n                      } \n                  }}*/}\n          {/* </Query> */}\n            {/* {emptyRows > 0 && (\n              <TableRow style={{ height: 48 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )} */}\n          </TableBody>\n        {/* <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[10,20,200,500]}\n                count={pageCount}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                // ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter> */}\n        </Table> \n      </div>\n    </Paper>\n    </>\n  );\n}\nexport default withApollo(AddContact);\n","import React,{ useEffect} from 'react';\nimport clsx from 'clsx';\nimport {lighten, makeStyles, useTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport {Grid,Card} from '@material-ui/core';\n\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TableHead from '@material-ui/core/TableHead';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Link as RouterLink } from 'react-router-dom'\nimport Link from '@material-ui/core/Link'\nimport { Input} from '@material-ui/core';\nimport { Query, withApollo } from 'react-apollo';\nimport {MAKINGCHARGEPRICELIST,PRODUCTLISTSTATUSEDIT} from '../../../graphql/query';\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Switch } from '@material-ui/core';\nimport { useMutation,useQuery } from '@apollo/react-hooks';\nimport Moment from 'react-moment';\nimport {BASE_URL} from '../../../config'\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Filterandsearch from './../../../screens/Productlist/filterandsearch';\nimport CancelIcon from '@material-ui/icons/CancelOutlined';\n\nimport SaveIcon from '@material-ui/icons/Save';\nimport { NetworkContext } from '../../../context/NetworkContext';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n \n  Chip,\n  TextField\n} from '@material-ui/core';\nconst columns = [\n  { id: 'Metal', label: 'Metal' },\n  { id: 'Purity', label: 'Purity' },\n  { id: 'From Weight', label: 'From Weight' },\n  { id: 'To weight', label: 'To weight' },\n  { id: 'Cost Price', label: 'Cost Price' },\n\n  { id: 'updatedAt', label: 'updatedAt' },\n  { id: 'Edit', label: 'Edit' }\n\n];\n\nconst useStyles1 = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\nfunction createData(name, calories, fat) {\n  return { name, calories, fat };\n}\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  function handleFirstPageButtonClick(event) {\n    onChangePage(event, 0);\n  }\n\n  function handleBackButtonClick(event) {\n    onChangePage(event, page - 1);\n  }\n\n  function handleNextButtonClick(event) {\n    onChangePage(event, page + 1);\n  }\n\n  function handleLastPageButtonClick(event) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\n  { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\n  { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\n  { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\n  { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = property => event => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n       \n        {columns.map(headCell => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            {/* <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? '' : ''}\n                </span>\n              ) : null}\n            </TableSortLabel> */}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles(theme => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = props => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n          Nutrition\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n          \n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\n\n\n\n\nconst useStyles2 = makeStyles(theme => ({\n  root: {\n    width: '100%',\n  },\n  cardroot: {\n    flexGrow: 1,\n  },\n  cardcontent: {\n    padding: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  },\n  table: {\n    minWidth: 500,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n}));\n\nconst   AddContact=(props)=> {\n  let history = useHistory();\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [pageCount,setPageCount] = React.useState(0);\n  const [offsetValue,setOffsetValue] = React.useState(0)\n  const { sendNetworkRequest } = React.useContext(NetworkContext);\n  const [vendorid,setVendorid] = React.useState(props.vendor);\n  const [editmc,setEditmc] = React.useState({})\n\n  // const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.contactlist.length - page * rowsPerPage);\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('Product Id');\n  const [editdiamond,setEditdiamond] = React.useState({})\n  const [mchargelist,setMchargelist]= React.useState([])\n  const [btnEdit, setBtnEdit] = React.useState({\n    action: false,\n    id: '',\n    add: false\n  })\n\n  function CancelEdit(diamondData) {\n    setBtnEdit({ ...btnEdit, id:'', action: false, add: true })\n\n  }\n  function handleAdd() {\n    setBtnEdit({ ...btnEdit, id:'', action: true })\n\n  }\n  function handleEdit(diamondData) {\n      setEditmc({\n        ...editmc,\n        price : diamondData.price,\n        updatedAt : new Date()\n\n\n      })\n    // setProductCtx({\n    //   ...productCtx,\n    //   editleadtime:diamondData.vendorDeliveryTime,\n    //   editreadytoship: diamondData.isReadyToShip,\n    //   editisdefault:diamondData.isdefault,\n    //   editisactive:diamondData.isActive\n    // })\n    setBtnEdit({ ...btnEdit, id:diamondData.id, action: true })\n\n  }\n  async function getmclist()\n  {\n    let bodydata = {\n      vendorid : props.vendor\n    }\n\n    let response =  await sendNetworkRequest('/getvendormakingprice', {}, bodydata)\n   setMchargelist(response.gems)\n\n  }\n  useEffect( () => {\n    getmclist()\n  }, [vendorid])\n  async function handleSave(id){\n    var bodydata = {}\n   \n\n   await sendNetworkRequest('/updatemakingcharge', {}, editmc)\n\n    setBtnEdit({ ...btnEdit, id:\"\", action: false })\n    getmclist()\n  }\n  function handleChangePage(event, newPage) {\n    setPage(newPage);\n    setOffsetValue(newPage*rowsPerPage)\n  }\n\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }\n  function ProductEdit(id){\n    // localStorage.setItem('productEditId',id);\n    history.push(`product_attributes/${id}`)\n  }\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n  const handleinputChange =type => e => {\n    setEditmc({\n      ...editmc,\n      [type]: e.target.value\n    })\n      // setProductCtx({ ...productCtx, [type]: e.target.value})\n    \n   }\n  // function productItemStatusChange(id,isactive){\n    // let variable = {\n    //   \"productId\": id\n    // };\n    // let status = isactive ? variable.isActive = false :variable.isActive = true;\n    async function productItemStatusChange(id,isactive,refetch){\n      let variables ={\n        productId:id,\n        isActive:isactive ?false:true\n      }\n      await props.client.mutate({mutation:PRODUCTLISTSTATUSEDIT,variables}).then(res=>{\n\n        if(res!==null){\n          refetch();\n        }\n      }).catch(console.error)\n    \n    }\n    // const [productItemStatusChange,{ data }] = useMutation(PRODUCTLISTSTATUSEDIT);\n  // }\n  return (\n    <>\n    <Card className={classes.cardcontent} > \n    <Grid container justify=\"left\"   alignItems=\"center\" className={classes.cardroot} spacing={4}>\n      <Grid item > \n      <Typography variant=\"h6\"> \n        {props.title}\n      </Typography> \n      </Grid>\n      <Grid item > \n      <TextField\n          variant=\"outlined\"\n          margin=\"dense\"\n          label=\"Search By Purity\"\n          className={classes.helperinput}\n          onChange={handleinputChange('weight_start')}\n          id=\"productvendorcode\"\n          name=\"Cost Price\"\n      />\n      </Grid>\n      <Grid item>\n        <Button color=\"primary\" variant=\"outlined\" onClick={(e) => handleAdd()} size=\"small\">\n                        Add New\n        </Button>\n      </Grid>\n\n      </Grid>\n    </Card>\n    <Paper className={classes.root}>\n     \n      \n\n\n      <div className={classes.tableWrapper}>\n      \n        <Table className={classes.table} border={1} borderColor={\"#ddd\"} size=\"small\" stickyHeader>\n        <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label === 'Cost Price' ? props.ratetype == 1 ? \"Cost Price\" : \"Selling Price\"  : column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n          <Query\n              query={MAKINGCHARGEPRICELIST}\n              onCompleted={data => setPageCount( data.allMakingChargeSettings.totalCount )}\n              variables={{ \"vendorCode\": props.vendor, \"ratetype\": props.ratetype}}>\n              {\n                  ({ data, loading, error, refetch }) => {\n                    debugger\n                      if (loading) {\n                          // return <Loader />\n                      }\n                      if (error) {\n                        return <div>{error}</div>\n                          // return false\n                      }\n                      if (data) {\n                          return <>\n                              {data.allMakingChargeSettings.nodes.map((row, index) => (\n                                  <TableRow key={row.material}>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                     {row.material}\n                                    \n                                  </TableCell>\n                                  <TableCell align=\"left\">{row.purity}</TableCell>\n\n                                  <TableCell align=\"left\">\n                                  {/* {\n                                    btnEdit.action && btnEdit.id == row.id ? <Input\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Cost Price\"\n                                    fullWidth\n                                    className={classes.helperinput}\n                                    value= {editmc.weight_start}\n                                    onChange={handleinputChange('weight_start')}\n                                    id=\"productvendorcode\"\n                                    name=\"Cost Price\"\n                                    /> :  */}\n                                    <Typography className={classes.heading}> \n                                    {row.weightStart}\n                                   </Typography>  \n                                    </TableCell>\n\n                                    <TableCell align=\"left\">\n                                  {/* {\n                                    btnEdit.action && btnEdit.id == row.id ? <Input\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label={props.ratetype == 1 ? \"Cost Price\" : \"Selling Price\"}\n                                    fullWidth\n                                    className={classes.helperinput}\n                                    value= {editmc.weight_end}\n                                    onChange={handleinputChange('weight_end')}\n                                    id=\"productvendorcode\"\n                                    name=\"Cost Price\"\n                                    /> :  */}\n                                    <Typography className={classes.heading}> \n                                    {row.weightEnd}\n                                   </Typography>  \n                                    </TableCell>\n\n                                  \n\n\n                                    <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ? <Input\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Cost Price\"\n                                    fullWidth\n                                    className={classes.helperinput}\n                                    value= {editmc.price}\n                                    onChange={handleinputChange('selling_price')}\n                                    id=\"productvendorcode\"\n                                    name=\"Cost Price\"\n                                    /> : \n                                    <Typography className={classes.heading}> \n                                    {row.price}\n                                   </Typography>  }\n                                    </TableCell>\n\n                                    {/* <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ?  <Autocomplete\n                                      id=\"free-solo-2-demo\"\n                                      fullWidth\n                                      disableClearable\n                                      className={classes.fixedTag}\n                                      getOptionLabel={option => option.name}\n                                      options={[{label: 1,name:\"Flat\"},{label:2,name:\"Percentage\"}]}\n                                      renderTags={(value, getTagProps) =>\n                                      value.map((option, index) => (\n                                      <Chip variant=\"outlined\" size=\"small\" label={option.name} {...getTagProps({ index })} />\n                                      ))\n                                      }\n                                      renderInput={params => (\n                                      <TextField\n                                      {...params}\n                                      label=\"Price Type\"\n                                      margin=\"dense\"\n                                      variant=\"outlined\"\n                                      fullWidth\n                                      InputProps={{ ...params.InputProps, readOnly: true, type: 'search' }}\n                                      />\n                                      )}\n                                      /> : <Typography className={classes.heading}> \n                                      {row.selling_price_type === 0 ? 'Flat' : 'Percentage'} </Typography>  }\n\n                                    </TableCell> */}\n\n\n                                  <TableCell align=\"left\">            \n                                  <Moment format=\"DD MMM YYYY hh:mm a\">\n                                  {row.updatedAt}\n                                  </Moment>\n                                  </TableCell>\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ?\n                                      <TableCell  style = {{width: 170}} align=\"left\">\n                                        <Button onClick={(e) => handleSave(row.id)}><SaveIcon />\n                                        </Button>\n                                        <Button onClick={(e) => CancelEdit(row)}><CancelIcon />\n                                        </Button>\n                                      </TableCell> :\n                                      <TableCell align=\"left\" style = {{width: 170}}>\n                                        <Button onClick={(e) => handleEdit(row)}><EditIcon />\n                                        </Button>\n                                        <Button onClick={(e) => handleEdit(row)}><DeleteIcon />\n                                        </Button>\n                                      </TableCell>\n                                  }\n                                </TableRow>\n                              ))}\n                          </>\n                      }\n                      else{\n                      return <div>{\"Fetch Products\"}</div>\n                      }\n                  }}\n          </Query>\n            {/* {emptyRows > 0 && (\n              <TableRow style={{ height: 48 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )} */}\n          </TableBody>\n         {/* <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[10,100,200,500]}\n                \n                count={pageCount}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                // ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter> */}\n        </Table> \n      </div>\n    </Paper>\n    </>\n  );\n}\nexport default withApollo(AddContact);\n","import React, { useEffect, useContext, useState } from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { Link as RouterLink } from 'react-router-dom'\nimport Link from '@material-ui/core/Link'\nimport Product from './components/Product'\nimport Diamonds from './components/Diamonds'\nimport Gemstones from './components/Gemstones'\nimport Makingcharge from './components/Makingcharge'\nimport { API_URL, GRAPHQL_DEV_CLIENT } from '../../config';\nimport { VENDORLIST, PRODUCTDIAMONDTYPES } from '../../graphql/query';\n\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n \n  Chip,\n  TextField\n} from '@material-ui/core';\n\n\nconst useStyle = makeStyles(theme => ({\n}))\nexport const Vendorprice = withRouter(props => {\n  const [vendorcode, setVendorcode] = React.useState(0);\n  const [vendorlist, setVendorlist] = React.useState(0);\n\n   \n  const classes = useStyle();\n\n  const handlevendorchange = type => (event, value) => { \n    setVendorcode(value.shortCode)\n\n  }\n  useEffect(() => {\n    const url = GRAPHQL_DEV_CLIENT;\n    const opts = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ query: VENDORLIST, variables: { } })\n    };\n    // console.log(\"helo\",setProductCtx)\n    fetch(url, opts)\n      .then(res => res.json())\n      .then(fatchvalue => {\n\n\n        setVendorlist({ \n          ...vendorlist,\n          vendors : fatchvalue.data.allMasterVendors.nodes\n        })\n\n      })\n      .catch(console.error)\n  }, [])\n\n   \n  return (\n    <Grid container  spacing={1}>  \n          <Grid item xs={12} sm={12}>\n\n          <Typography component=\"h6\" variant=\"h6\">\n            Vendor Based Price List\n          </Typography>\n          </Grid>\n\n          <Grid item xs={4} sm={4}>\n\n                    <Autocomplete\n                      id=\"free-solo-2-demo\"\n                      fullWidth\n                      disableClearable\n                      className={classes.fixedTag}\n                      getOptionLabel={option => option.name}\n                      options={vendorlist.vendors}\n                      onChange={handlevendorchange('vendor')}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option.name} {...getTagProps({ index })} />\n                      ))\n                      }\n                      renderInput={params => (\n                      <TextField\n                      {...params}\n                      label=\"Product Materials\"\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                      InputProps={{ ...params.InputProps, readOnly: true, type: 'search' }}\n                      />\n                      )}\n                      />\n    </Grid>\n         \n         {vendorcode ? <>\n          <Grid item xs={12} sm={12}>\n\n            <Typography component=\"h6\" variant=\"h6\">\n           Gold Price Setup\n          </Typography>\n          </Grid>\n          <Grid item xs={12} sm={12}>\n\n          <Product vendor={vendorcode} />\n          </Grid>\n    {/* <Grid item xs={12} sm={12}>\n    <Typography component=\"h6\" variant=\"h6\">\n           Diamond Price Setup\n          </Typography>\n          </Grid> */}\n          <Grid item xs={12} sm={12}>\n\n    <Diamonds />\n    </Grid>\n\n    {/* <Grid item xs={12} sm={12}>\n    <Typography component=\"h6\" variant=\"h6\">\n           Gemstone Price Setup By weight\n          </Typography>\n          </Grid> */}\n          <Grid item xs={12} sm={12}>\n\n  <Gemstones title={'Gemstone Price Setup By Weight'} vendor={vendorcode} viewtype={1}/> \n    </Grid>\n\n    {/* <Grid item xs={12} sm={12}>\n    <Typography component=\"h6\" variant=\"h6\">\n           \n          </Typography>\n          </Grid> */}\n          <Grid item xs={12} sm={12}>\n\n  <Gemstones title={'Gemstone Price Setup By No of Stones'} vendor={vendorcode} viewtype={2}/> \n    </Grid>\n\n\n    {/* <Grid item xs={12} sm={12}>\n    <Typography component=\"h6\" variant=\"h6\">\n           Makingcharge Cost Price Setup\n          </Typography>\n          </Grid> */}\n          <Grid item xs={12} sm={12}>\n\n    <Makingcharge title={\"Makingcharge Cost Price Setup\"} ratetype={1} vendor={vendorcode} />\n    </Grid>\n\n    {/* <Grid item xs={12} sm={12}>\n    <Typography component=\"h6\" variant=\"h6\">\n           Makingcharge Selling Price Setup\n          </Typography>\n          </Grid> */}\n          <Grid item xs={12} sm={12}>\n\n    <Makingcharge title={\"Makingcharge Selling Price Setup\"} ratetype={2} vendor={vendorcode} />\n    </Grid>\n          </> : null }\n    </Grid>\n\n    \n  )\n});\n\nexport default withRouter(Vendorprice);","import React from 'react';\nimport clsx from 'clsx';\nimport {lighten, makeStyles, useTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { NetworkContext } from '../../../context/NetworkContext';\n\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TableHead from '@material-ui/core/TableHead';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Input} from '@material-ui/core';\nimport { Link as RouterLink } from 'react-router-dom'\nimport Link from '@material-ui/core/Link'\nimport { Query, withApollo } from 'react-apollo';\nimport {DIAMONDMARKUP,PRODUCTLISTSTATUSEDIT} from '../../../graphql/query';\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Switch } from '@material-ui/core';\nimport { useMutation,useQuery } from '@apollo/react-hooks';\nimport Moment from 'react-moment';\nimport CancelIcon from '@material-ui/icons/CancelOutlined';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n \n  Chip,\n  TextField\n} from '@material-ui/core';\nimport {BASE_URL} from '../../../config'\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Filterandsearch from './../../../screens/Productlist/filterandsearch';\nconst columns = [\n  { id: 'Selling Price Min', label: 'Selling Price Min' },\n  { id: 'Selling Price Max', label: 'Selling Price Max' },\n  { id: 'Markup Type', label: 'Markup Type' },\n  { id: 'Markup value', label: 'Markup value' },\n\n  { id: 'updatedAt', label: 'updatedAt' },\n  { id: 'Edit', label: 'Edit' }\n\n];\n\nconst useStyles1 = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\nfunction createData(name, calories, fat) {\n  return { name, calories, fat };\n}\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  function handleFirstPageButtonClick(event) {\n    onChangePage(event, 0);\n  }\n\n  function handleBackButtonClick(event) {\n    onChangePage(event, page - 1);\n  }\n\n  function handleNextButtonClick(event) {\n    onChangePage(event, page + 1);\n  }\n\n  function handleLastPageButtonClick(event) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\n  { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\n  { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\n  { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\n  { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = property => event => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n       \n        {columns.map(headCell => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            {/* <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? '' : ''}\n                </span>\n              ) : null}\n            </TableSortLabel> */}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles(theme => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = props => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n          Nutrition\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n          \n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\n\n\n\n\nconst useStyles2 = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  table: {\n    minWidth: 500,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n}));\n\nconst   AddContact=(props)=> {\n  let history = useHistory();\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(50);\n  const [pageCount,setPageCount] = React.useState(0);\n  const [offsetValue,setOffsetValue] = React.useState(0)\n  const [editmarkup,setEditmarkup] = React.useState({})\n  const [goldpricelist,setGoldpricelist] = React.useState({})\n  const { sendNetworkRequest } = React.useContext(NetworkContext);\n\n  // const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.contactlist.length - page * rowsPerPage);\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('Product Id');\n  const [btnEdit, setBtnEdit] = React.useState({\n    action: false,\n    id: ''\n  })\n  function handleChangePage(event, newPage) {\n    setPage(newPage);\n    setOffsetValue(newPage*rowsPerPage)\n  }\n  function CancelEdit(diamondData) {\n    setBtnEdit({ ...btnEdit, id:'', action: false })\n\n  }\n  function handleEdit(diamondData) {\n    setEditmarkup({\n          ...editmarkup,\n          markupid : diamondData.id,\n          sellingPriceMin : diamondData.sellingPriceMin,\n          sellingPriceMax : diamondData.sellingPriceMax,\n          markupValue : diamondData.markupValue,\n          updatedAt : new Date()\n\n\n        })\n    // setProductCtx({\n    //   ...productCtx,\n    //   editleadtime:diamondData.vendorDeliveryTime,\n    //   editreadytoship: diamondData.isReadyToShip,\n    //   editisdefault:diamondData.isdefault,\n    //   editisactive:diamondData.isActive\n    // })\n    setBtnEdit({ ...btnEdit, id:diamondData.id, action: true })\n\n  }\n  async function handleSave(id, refetch){\n    var bodydata = {}\n    \n   await sendNetworkRequest('/updatemarkup', {}, editmarkup)\n\n    setBtnEdit({ ...btnEdit, id:\"\", action: false })\n    refetch()\n  }\n  const handleoptionChange = type => (event, value) => {\n    setEditmarkup({ ...editmarkup, [type]: value})\n}\n  const handleinputChange =type => e => {\n   setEditmarkup({\n     ...editmarkup,\n     [type]: e.target.value\n   })\n     // setProductCtx({ ...productCtx, [type]: e.target.value})\n   \n  }\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }\n  function ProductEdit(id){\n    // localStorage.setItem('productEditId',id);\n    history.push(`product_attributes/${id}`)\n  }\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  // function productItemStatusChange(id,isactive){\n    // let variable = {\n    //   \"productId\": id\n    // };\n    // let status = isactive ? variable.isActive = false :variable.isActive = true;\n    async function productItemStatusChange(id,isactive,refetch){\n      let variables ={\n        productId:id,\n        isActive:isactive ?false:true\n      }\n      await props.client.mutate({mutation:PRODUCTLISTSTATUSEDIT,variables}).then(res=>{\n\n        if(res!==null){\n          refetch();\n        }\n      }).catch(console.error)\n    \n    }\n    // const [productItemStatusChange,{ data }] = useMutation(PRODUCTLISTSTATUSEDIT);\n  // }\n  return (\n    <Paper className={classes.root}>\n      <div className={classes.tableWrapper}>\n      \n        <Table className={classes.table} border={1} borderColor={\"#ddd\"} size=\"small\" stickyHeader>\n        <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n          <Query\n              query={DIAMONDMARKUP}\n              onCompleted={data => setPageCount( data.allPricingMarkups.totalCount )}\n              variables={{ \"vendorCode\": props.vendor}}>\n              {\n                  ({ data, loading, error, refetch }) => {\n                    debugger\n                      if (loading) {\n                          // return <Loader />\n                      }\n                      if (error) {\n                        return <div>{error}</div>\n                          // return false\n                      }\n                      if (data) {\n                        setGoldpricelist(data)\n                          return <>\n                              { data.allPricingMarkups.nodes.map((row, index) => (\n                                  <TableRow key={row.material}>\n                                  {/* <TableCell component=\"th\" scope=\"row\">\n                                     {row.material}\n                                    \n                                  </TableCell> */}\n                                \n                                  <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ? <Input\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Cost Price\"\n                                    fullWidth\n                                    className={classes.helperinput}\n                                    value= {editmarkup.sellingPriceMin}\n                                    onChange={handleinputChange('sellingPriceMin')}\n\n                                    id=\"productvendorcode\"\n                                    name=\"Cost Price\"\n                                    /> : \n                                    <Typography className={classes.heading}> \n                                    {row.sellingPriceMin} </Typography>  }\n                                    </TableCell>\n                                  <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ? <Input\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Cost Price\"\n                                    fullWidth\n                                    className={classes.helperinput}\n                                    value= {editmarkup.sellingPriceMax}\n                                    onChange={handleinputChange('sellingPriceMax')}\n                                    id=\"productvendorcode\"\n                                    name=\"Cost Price\"\n                                    /> : \n                                    <Typography className={classes.heading}> \n                                    {row.sellingPriceMax} </Typography>  }\n                                    </TableCell>\n\n                                    <TableCell align=\"center\">\n                                    {\n                                    btnEdit.action && btnEdit.id == row.id ?  <Autocomplete\n                                      id=\"free-solo-2-demo\"\n                                      fullWidth\n                                      disableClearable\n                                      className={classes.fixedTag}\n                                      getOptionLabel={option => option.name}\n                                      onChange={handleoptionChange('sellingPriceType')}\n                                      options={[{label: 1,name:\"Flat\"},{label:2,name:\"Percentage\"}]}\n                                      renderTags={(value, getTagProps) =>\n                                      value.map((option, index) => (\n                                      <Chip variant=\"outlined\" size=\"small\" label={option.name} {...getTagProps({ index })} />\n                                      ))\n                                      }\n                                      renderInput={params => (\n                                      <TextField\n                                      {...params}\n                                      label=\"Price Type\"\n                                      margin=\"dense\"\n                                      variant=\"outlined\"\n                                      fullWidth\n                                      InputProps={{ ...params.InputProps, readOnly: true, type: 'search' }}\n                                      />\n                                      )}\n                                      /> : <Typography className={classes.heading}> \n                                      {row.markupType === 1 ? 'Flat' : 'Percentage'} </Typography>  }\n\n                                    </TableCell>\n\n                                    <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ? <Input\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Cost Price\"\n                                    fullWidth\n                                    className={classes.helperinput}\n                                    value= {editmarkup.markupValue}\n                                    onChange={handleinputChange('markupValue')}\n\n                                    id=\"productvendorcode\"\n                                    name=\"Cost Price\"\n                                    /> : \n                                    <Typography className={classes.heading}> \n                                    {row.markupValue} </Typography>  }\n                                    </TableCell>\n\n\n                                  <TableCell align=\"left\">            \n                                  <Moment format=\"DD MMM YYYY hh:mm a\">\n                                  { btnEdit.action && btnEdit.id == row.id ? editmarkup.updatedAt : row.updatedAt}\n                                  </Moment>\n                                  </TableCell>\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ?\n                                      <TableCell  style = {{width: 20}} align=\"center\">\n                                        <Button onClick={(e) => handleSave(row.id, refetch)}><SaveIcon />\n                                        </Button>\n                                        <Button onClick={(e) => CancelEdit(row)}><CancelIcon />\n                                        </Button>\n                                      </TableCell> :\n                                      <TableCell align=\"center\" style = {{width: 20}}>\n                                        <Button onClick={(e) => handleEdit(row)}><EditIcon />\n                                        </Button>\n                                      </TableCell>\n                                  }\n                                </TableRow>\n                              ))}\n                          </>\n                      }\n                      else{\n                      return <div>{\"Fetch Products\"}</div>\n                      }\n                  }}\n          </Query>\n            {/* {emptyRows > 0 && (\n              <TableRow style={{ height: 48 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )} */}\n          </TableBody>\n          {/* <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[50,100,200,500]}\n                colSpan={5}\n                count={pageCount}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                // ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>*/}\n        </Table> \n      </div>\n    </Paper>\n  );\n}\nexport default withApollo(AddContact);\n","import React from 'react';\nimport clsx from 'clsx';\nimport {lighten, makeStyles, useTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { Input} from '@material-ui/core';\n\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TableHead from '@material-ui/core/TableHead';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Link as RouterLink } from 'react-router-dom'\nimport Link from '@material-ui/core/Link'\nimport { Query, withApollo } from 'react-apollo';\nimport {DIAMONDPRICELIST,PRODUCTLISTSTATUSEDIT} from '../../../graphql/query';\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Switch } from '@material-ui/core';\nimport { useMutation,useQuery } from '@apollo/react-hooks';\nimport Moment from 'react-moment';\nimport {BASE_URL} from '../../../config'\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Filterandsearch from './../../../screens/Productlist/filterandsearch';\nimport CancelIcon from '@material-ui/icons/CancelOutlined';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n \n  Chip,\n  TextField\n} from '@material-ui/core';\nconst columns = [\n  { id: 'Diamond Colour', label: 'Diamond Colour' },\n  { id: 'Diamond Clarity', label: 'Diamond Clarity' },\n  { id: 'Cost Price', label: 'Cost Price' },\n  { id: 'Selling Price', label: 'Selling Price' },\n  { id: 'Selling Price Type', label: 'Selling Price Type' },\n  { id: 'updatedAt', label: 'updatedAt' },\n  { id: 'Edit', label: 'Edit' }\n\n];\n\nconst useStyles1 = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\nfunction createData(name, calories, fat) {\n  return { name, calories, fat };\n}\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  function handleFirstPageButtonClick(event) {\n    onChangePage(event, 0);\n  }\n\n  function handleBackButtonClick(event) {\n    onChangePage(event, page - 1);\n  }\n\n  function handleNextButtonClick(event) {\n    onChangePage(event, page + 1);\n  }\n\n  function handleLastPageButtonClick(event) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\n  { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\n  { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\n  { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\n  { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = property => event => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n       \n        {columns.map(headCell => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            {/* <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? '' : ''}\n                </span>\n              ) : null}\n            </TableSortLabel> */}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles(theme => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = props => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n          Nutrition\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n          \n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\n\n\n\n\nconst useStyles2 = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  table: {\n    minWidth: 500,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n}));\n\nconst   AddContact=(props)=> {\n  let history = useHistory();\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(50);\n  const [pageCount,setPageCount] = React.useState(0);\n  const [offsetValue,setOffsetValue] = React.useState(0)\n  const [editdiamond,setEditdiamond] = React.useState({})\n\n  // const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.contactlist.length - page * rowsPerPage);\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('Product Id');\n  const [btnEdit, setBtnEdit] = React.useState({\n    action: false,\n    id: ''\n  })\n  function handleChangePage(event, newPage) {\n    setPage(newPage);\n    setOffsetValue(newPage*rowsPerPage)\n  }\n\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }\n  function ProductEdit(id){\n    // localStorage.setItem('productEditId',id);\n    history.push(`product_attributes/${id}`)\n  }\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n  function CancelEdit(diamondData) {\n    setBtnEdit({ ...btnEdit, id:'', action: false })\n\n  }\n  function handleEdit(diamondData) {\n      setEditdiamond({\n        ...editdiamond,\n        costPrice : diamondData.costPrice,\n        sellingPriceType : diamondData.sellingPriceType,\n        sellingPrice : diamondData.sellingPrice,\n        updatedAt : new Date()\n\n\n      })\n    // setProductCtx({\n    //   ...productCtx,\n    //   editleadtime:diamondData.vendorDeliveryTime,\n    //   editreadytoship: diamondData.isReadyToShip,\n    //   editisdefault:diamondData.isdefault,\n    //   editisactive:diamondData.isActive\n    // })\n    setBtnEdit({ ...btnEdit, id:diamondData.id, action: true })\n\n  }\n  function handleSave(id){\n    var bodydata = {}\n   \n\n  //  sendNetworkRequest('/updateskuinfo', {}, bodydata)\n\n    setBtnEdit({ ...btnEdit, id:\"\", action: false })\n\n  }\n  // function productItemStatusChange(id,isactive){\n    // let variable = {\n    //   \"productId\": id\n    // };\n    // let status = isactive ? variable.isActive = false :variable.isActive = true;\n    async function productItemStatusChange(id,isactive,refetch){\n      let variables ={\n        productId:id,\n        isActive:isactive ?false:true\n      }\n      await props.client.mutate({mutation:PRODUCTLISTSTATUSEDIT,variables}).then(res=>{\n\n        if(res!==null){\n          refetch();\n        }\n      }).catch(console.error)\n    \n    }\n    // const [productItemStatusChange,{ data }] = useMutation(PRODUCTLISTSTATUSEDIT);\n  // }\n  return (\n    <Paper className={classes.root}>\n      <div className={classes.tableWrapper}>\n      \n        <Table className={classes.table} border={1} borderColor={\"#ddd\"} size=\"small\" stickyHeader>\n        <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n          <Query\n              query={DIAMONDPRICELIST}\n              onCompleted={data => setPageCount( data.allDiamondPriceSettings.totalCount )}\n              variables={{ \"vendorCode\": 'STYPA 010'}}>\n              {\n                  ({ data, loading, error, refetch }) => {\n                    debugger\n                      if (loading) {\n                          // return <Loader />\n                      }\n                      if (error) {\n                        return <div>{error}</div>\n                          // return false\n                      }\n                      if (data) {\n                          return <>\n                              {data.allDiamondPriceSettings.nodes.map((row, index) => (\n                                  <TableRow key={row.diamondClarity}>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                     {row.diamondClarity}\n                                    \n                                  </TableCell>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                  {row.diamondColour}\n                                    \n                                  </TableCell>\n                                  <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ? <Input\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Cost Price\"\n                                    fullWidth\n                                    className={classes.helperinput}\n                                    value= {editdiamond.costPrice}\n                                    id=\"productvendorcode\"\n                                    name=\"Cost Price\"\n                                    /> : \n                                    <Typography className={classes.heading}> \n                                    {row.costPrice} </Typography>  }\n                                    </TableCell>\n                                  <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ? <Input\n                                    variant=\"outlined\"\n                                    margin=\"dense\"\n                                    label=\"Cost Price\"\n                                    fullWidth\n                                    className={classes.helperinput}\n                                    value= {editdiamond.sellingPrice}\n                                    id=\"productvendorcode\"\n                                    name=\"Cost Price\"\n                                    /> : \n                                    <Typography className={classes.heading}> \n                                    {row.sellingPrice} </Typography>  }\n                                    </TableCell>\n                                  <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ?  <Autocomplete\n                                      id=\"free-solo-2-demo\"\n                                      fullWidth\n                                      disableClearable\n                                      className={classes.fixedTag}\n                                      getOptionLabel={option => option.name}\n                                      options={[{label: 1,name:\"Flat\"},{label:2,name:\"Percentage\"}]}\n                                      renderTags={(value, getTagProps) =>\n                                      value.map((option, index) => (\n                                      <Chip variant=\"outlined\" size=\"small\" label={option.name} {...getTagProps({ index })} />\n                                      ))\n                                      }\n                                      renderInput={params => (\n                                      <TextField\n                                      {...params}\n                                      label=\"Price Type\"\n                                      margin=\"dense\"\n                                      variant=\"outlined\"\n                                      fullWidth\n                                      InputProps={{ ...params.InputProps, readOnly: true, type: 'search' }}\n                                      />\n                                      )}\n                                      /> : <Typography className={classes.heading}> \n                                      {row.sellingPriceType === 1 ? 'Flat' : 'Percentage'} </Typography>  }\n\n                                  </TableCell>\n\n                                  <TableCell align=\"left\">            \n                                  <Moment format=\"DD MMM YYYY hh:mm a\">\n                                  {row.updatedAt}\n                                  </Moment>\n                                  </TableCell>\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ?\n                                      <TableCell  style = {{width: 20}} align=\"center\">\n                                        <Button onClick={(e) => handleSave(row.generatedSku)}><SaveIcon />\n                                        </Button>\n                                        <Button onClick={(e) => CancelEdit(row)}><CancelIcon />\n                                        </Button>\n                                      </TableCell> :\n                                      <TableCell align=\"center\" style = {{width: 20}}>\n                                        <Button onClick={(e) => handleEdit(row)}><EditIcon />\n                                        </Button>\n                                      </TableCell>\n                                  }\n                                </TableRow>\n                              ))}\n                          </>\n                      }\n                      else{\n                      return <div>{\"Fetch Products\"}</div>\n                      }\n                  }}\n          </Query>\n            {/* {emptyRows > 0 && (\n              <TableRow style={{ height: 48 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )} */}\n          </TableBody>\n          {/* <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[50,100,200,500]}\n                colSpan={5}\n                count={pageCount}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                // ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>*/}\n        </Table> \n      </div>\n    </Paper>\n  );\n}\nexport default withApollo(AddContact);\n","import React from 'react';\nimport clsx from 'clsx';\nimport {lighten, makeStyles, useTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TableHead from '@material-ui/core/TableHead';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Link as RouterLink } from 'react-router-dom'\nimport Link from '@material-ui/core/Link'\nimport { Query, withApollo } from 'react-apollo';\nimport {GEMPRICELIST,PRODUCTLISTSTATUSEDIT} from '../../../graphql/query';\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Switch } from '@material-ui/core';\nimport { useMutation,useQuery } from '@apollo/react-hooks';\nimport Moment from 'react-moment';\nimport {BASE_URL} from '../../../config'\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Filterandsearch from './../../../screens/Productlist/filterandsearch';\n\nimport CancelIcon from '@material-ui/icons/CancelOutlined';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n \n  Chip,\n  TextField\n} from '@material-ui/core';\nconst columns = [\n  { id: 'Diamond Colour', label: 'Diamond Colour' },\n  { id: 'Diamond Clarity', label: 'Diamond Clarity' },\n  { id: 'Cost Price', label: 'Cost Price' },\n  { id: 'Selling Price', label: 'Selling Price' },\n  { id: 'Selling Price Type', label: 'Selling Price Type' },\n  { id: 'updatedAt', label: 'updatedAt' },\n  { id: 'Edit', label: 'Edit' }\n\n];\n\nconst useStyles1 = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\nfunction createData(name, calories, fat) {\n  return { name, calories, fat };\n}\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  function handleFirstPageButtonClick(event) {\n    onChangePage(event, 0);\n  }\n\n  function handleBackButtonClick(event) {\n    onChangePage(event, page - 1);\n  }\n\n  function handleNextButtonClick(event) {\n    onChangePage(event, page + 1);\n  }\n\n  function handleLastPageButtonClick(event) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\n  { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\n  { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\n  { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\n  { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = property => event => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n       \n        {columns.map(headCell => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            {/* <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? '' : ''}\n                </span>\n              ) : null}\n            </TableSortLabel> */}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles(theme => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = props => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n          Nutrition\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n          \n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\n\n\n\n\nconst useStyles2 = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  table: {\n    minWidth: 500,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n}));\n\nconst   AddContact=(props)=> {\n  let history = useHistory();\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [pageCount,setPageCount] = React.useState(0);\n  const [offsetValue,setOffsetValue] = React.useState(0)\n  // const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.contactlist.length - page * rowsPerPage);\n\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('Product Id');\n  const [editdiamond,setEditdiamond] = React.useState({})\n\n  const [btnEdit, setBtnEdit] = React.useState({\n    action: false,\n    id: ''\n  })\n  function handleChangePage(event, newPage) {\n    setPage(newPage);\n    setOffsetValue(newPage*rowsPerPage)\n  }\n\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }\n  function ProductEdit(id){\n    // localStorage.setItem('productEditId',id);\n    history.push(`product_attributes/${id}`)\n  }\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n  function CancelEdit(diamondData) {\n    setBtnEdit({ ...btnEdit, id:'', action: false })\n\n  }\n  function handleEdit(diamondData) {\n      setEditdiamond({\n        ...editdiamond,\n        costPrice : diamondData.costPrice,\n        sellingPriceType : diamondData.sellingPriceType,\n        sellingPrice : diamondData.sellingPrice,\n        updatedAt : new Date()\n\n\n      })\n    // setProductCtx({\n    //   ...productCtx,\n    //   editleadtime:diamondData.vendorDeliveryTime,\n    //   editreadytoship: diamondData.isReadyToShip,\n    //   editisdefault:diamondData.isdefault,\n    //   editisactive:diamondData.isActive\n    // })\n    setBtnEdit({ ...btnEdit, id:diamondData.id, action: true })\n\n  }\n\n  function handleSave(id){\n    var bodydata = {}\n   \n\n  //  sendNetworkRequest('/updateskuinfo', {}, bodydata)\n\n    setBtnEdit({ ...btnEdit, id:\"\", action: false })\n\n  }\n  // function productItemStatusChange(id,isactive){\n    // let variable = {\n    //   \"productId\": id\n    // };\n    // let status = isactive ? variable.isActive = false :variable.isActive = true;\n    async function productItemStatusChange(id,isactive,refetch){\n      let variables ={\n        productId:id,\n        isActive:isactive ?false:true\n      }\n      await props.client.mutate({mutation:PRODUCTLISTSTATUSEDIT,variables}).then(res=>{\n\n        if(res!==null){\n          refetch();\n        }\n      }).catch(console.error)\n    \n    }\n    // const [productItemStatusChange,{ data }] = useMutation(PRODUCTLISTSTATUSEDIT);\n  // }\n  return (\n    <Paper className={classes.root}>\n      <div className={classes.tableWrapper}>\n      \n        <Table className={classes.table} border={1} borderColor={\"#ddd\"} size=\"small\" stickyHeader>\n        <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n          <Query\n              query={GEMPRICELIST}\n              onCompleted={data => setPageCount( data.allGemstonePriceSettings.totalCount )}\n              variables={{ \"vendorCode\": 'STYPA 010'}}>\n              {\n                  ({ data, loading, error, refetch }) => {\n                    debugger\n                      if (loading) {\n                          // return <Loader />\n                      }\n                      if (error) {\n                        return <div>{error}</div>\n                          // return false\n                      }\n                      if (data) {\n                          return <>\n                               {stableSort(data.allGemstonePriceSettings.nodes, getComparator(order, orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => (\n                                  <TableRow key={row.gemstoneType}>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                     {row.gemstoneType}\n                                    \n                                  </TableCell>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                  {row.weightStart}\n                                    \n                                  </TableCell>\n                                  <TableCell align=\"left\">{row.weightEnd}</TableCell>\n                                  <TableCell align=\"left\">{row.price}</TableCell>\n                                  <TableCell align=\"left\">\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ?  <Autocomplete\n                                      id=\"free-solo-2-demo\"\n                                      fullWidth\n                                      disableClearable\n                                      className={classes.fixedTag}\n                                      getOptionLabel={option => option.name}\n                                      options={[{label: 1,name:\"Flat\"},{label:2,name:\"Percentage\"}]}\n                                      renderTags={(value, getTagProps) =>\n                                      value.map((option, index) => (\n                                      <Chip variant=\"outlined\" size=\"small\" label={option.name} {...getTagProps({ index })} />\n                                      ))\n                                      }\n                                      renderInput={params => (\n                                      <TextField\n                                      {...params}\n                                      label=\"Price Type\"\n                                      margin=\"dense\"\n                                      variant=\"outlined\"\n                                      fullWidth\n                                      InputProps={{ ...params.InputProps, readOnly: true, type: 'search' }}\n                                      />\n                                      )}\n                                      /> : <Typography className={classes.heading}> \n                                      {row.sellingPriceType === 1 ? 'Flat' : 'Percentage'} </Typography>  }\n\n                                    </TableCell>\n\n                                  <TableCell align=\"left\">            \n                                  <Moment format=\"DD MMM YYYY hh:mm a\">\n                                  {row.updatedAt}\n                                  </Moment>\n                                  </TableCell>\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ?\n                                      <TableCell  style = {{width: 20}} align=\"center\">\n                                        <Button onClick={(e) => handleSave(row.generatedSku)}><SaveIcon />\n                                        </Button>\n                                        <Button onClick={(e) => CancelEdit(row)}><CancelIcon />\n                                        </Button>\n                                      </TableCell> :\n                                      <TableCell align=\"center\" style = {{width: 20}}>\n                                        <Button onClick={(e) => handleEdit(row)}><EditIcon />\n                                        </Button>\n                                      </TableCell>\n                                  }\n                                </TableRow>\n                              ))}\n                          </>\n                      }\n                      else{\n                      return <div>{\"Fetch Products\"}</div>\n                      }\n                  }}\n          </Query>\n            {/* {emptyRows > 0 && (\n              <TableRow style={{ height: 48 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )} */}\n          </TableBody>\n        <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[10,20,200,500]}\n                count={pageCount}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                // ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>\n        </Table> \n      </div>\n    </Paper>\n  );\n}\nexport default withApollo(AddContact);\n","import React from 'react';\nimport clsx from 'clsx';\nimport {lighten, makeStyles, useTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TableHead from '@material-ui/core/TableHead';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Link as RouterLink } from 'react-router-dom'\nimport Link from '@material-ui/core/Link'\nimport { Query, withApollo } from 'react-apollo';\nimport {MAKINGCHARGEPRICELIST,PRODUCTLISTSTATUSEDIT} from '../../../graphql/query';\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Switch } from '@material-ui/core';\nimport { useMutation,useQuery } from '@apollo/react-hooks';\nimport Moment from 'react-moment';\nimport {BASE_URL} from '../../../config'\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Filterandsearch from './../../../screens/Productlist/filterandsearch';\nimport CancelIcon from '@material-ui/icons/CancelOutlined';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n \n  Chip,\n  TextField\n} from '@material-ui/core';\nconst columns = [\n  { id: 'Diamond Colour', label: 'Diamond Colour' },\n  { id: 'Diamond Clarity', label: 'Diamond Clarity' },\n  { id: 'Cost Price', label: 'Cost Price' },\n  { id: 'Selling Price', label: 'Selling Price' },\n  { id: 'Selling Price Type', label: 'Selling Price Type' },\n  { id: 'updatedAt', label: 'updatedAt' },\n  { id: 'Edit', label: 'Edit' }\n\n];\n\nconst useStyles1 = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\nfunction createData(name, calories, fat) {\n  return { name, calories, fat };\n}\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  function handleFirstPageButtonClick(event) {\n    onChangePage(event, 0);\n  }\n\n  function handleBackButtonClick(event) {\n    onChangePage(event, page - 1);\n  }\n\n  function handleNextButtonClick(event) {\n    onChangePage(event, page + 1);\n  }\n\n  function handleLastPageButtonClick(event) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\n  { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\n  { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\n  { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\n  { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = property => event => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n       \n        {columns.map(headCell => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            {/* <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? '' : ''}\n                </span>\n              ) : null}\n            </TableSortLabel> */}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles(theme => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = props => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n          Nutrition\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n          \n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\n\n\n\n\nconst useStyles2 = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  table: {\n    minWidth: 500,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n}));\n\nconst   AddContact=(props)=> {\n  let history = useHistory();\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [pageCount,setPageCount] = React.useState(0);\n  const [offsetValue,setOffsetValue] = React.useState(0)\n  // const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.contactlist.length - page * rowsPerPage);\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('Product Id');\n  const [editdiamond,setEditdiamond] = React.useState({})\n\n  const [btnEdit, setBtnEdit] = React.useState({\n    action: false,\n    id: ''\n  })\n\n  function CancelEdit(diamondData) {\n    setBtnEdit({ ...btnEdit, id:'', action: false })\n\n  }\n  function handleEdit(diamondData) {\n      setEditdiamond({\n        ...editdiamond,\n        costPrice : diamondData.costPrice,\n        sellingPriceType : diamondData.sellingPriceType,\n        sellingPrice : diamondData.sellingPrice,\n        updatedAt : new Date()\n\n\n      })\n    // setProductCtx({\n    //   ...productCtx,\n    //   editleadtime:diamondData.vendorDeliveryTime,\n    //   editreadytoship: diamondData.isReadyToShip,\n    //   editisdefault:diamondData.isdefault,\n    //   editisactive:diamondData.isActive\n    // })\n    setBtnEdit({ ...btnEdit, id:diamondData.id, action: true })\n\n  }\n\n  function handleSave(id){\n    var bodydata = {}\n   \n\n  //  sendNetworkRequest('/updateskuinfo', {}, bodydata)\n\n    setBtnEdit({ ...btnEdit, id:\"\", action: false })\n\n  }\n  function handleChangePage(event, newPage) {\n    setPage(newPage);\n    setOffsetValue(newPage*rowsPerPage)\n  }\n\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }\n  function ProductEdit(id){\n    // localStorage.setItem('productEditId',id);\n    history.push(`product_attributes/${id}`)\n  }\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  // function productItemStatusChange(id,isactive){\n    // let variable = {\n    //   \"productId\": id\n    // };\n    // let status = isactive ? variable.isActive = false :variable.isActive = true;\n    async function productItemStatusChange(id,isactive,refetch){\n      let variables ={\n        productId:id,\n        isActive:isactive ?false:true\n      }\n      await props.client.mutate({mutation:PRODUCTLISTSTATUSEDIT,variables}).then(res=>{\n\n        if(res!==null){\n          refetch();\n        }\n      }).catch(console.error)\n    \n    }\n    // const [productItemStatusChange,{ data }] = useMutation(PRODUCTLISTSTATUSEDIT);\n  // }\n  return (\n    <Paper className={classes.root}>\n      <div className={classes.tableWrapper}>\n      \n        <Table className={classes.table} border={1} borderColor={\"#ddd\"} size=\"small\" stickyHeader>\n        <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n          <Query\n              query={MAKINGCHARGEPRICELIST}\n              onCompleted={data => setPageCount( data.allMakingChargeSettings.totalCount )}\n              variables={{ \"vendorCode\": 'STYPA 010'}}>\n              {\n                  ({ data, loading, error, refetch }) => {\n                    debugger\n                      if (loading) {\n                          // return <Loader />\n                      }\n                      if (error) {\n                        return <div>{error}</div>\n                          // return false\n                      }\n                      if (data) {\n                          return <>\n                              {data.allMakingChargeSettings.nodes.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => (\n                                  <TableRow key={row.material}>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                     {row.material}\n                                    \n                                  </TableCell>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                  {row.weightStart}\n                                    \n                                  </TableCell>\n                                  <TableCell align=\"left\">{row.weightEnd}</TableCell>\n                                  <TableCell align=\"left\">{row.purity}</TableCell>\n                                  <TableCell align=\"left\">{row.sellingPriceType === 1 ? 'Flat' : 'Percentage'}</TableCell>\n\n                                  <TableCell align=\"left\">            \n                                  <Moment format=\"DD MMM YYYY hh:mm a\">\n                                  {row.updatedAt}\n                                  </Moment>\n                                  </TableCell>\n                                  {\n                                    btnEdit.action && btnEdit.id == row.id ?\n                                      <TableCell  style = {{width: 20}} align=\"center\">\n                                        <Button onClick={(e) => handleSave(row.generatedSku)}><SaveIcon />\n                                        </Button>\n                                        <Button onClick={(e) => CancelEdit(row)}><CancelIcon />\n                                        </Button>\n                                      </TableCell> :\n                                      <TableCell align=\"center\" style = {{width: 20}}>\n                                        <Button onClick={(e) => handleEdit(row)}><EditIcon />\n                                        </Button>\n                                      </TableCell>\n                                  }\n                                </TableRow>\n                              ))}\n                          </>\n                      }\n                      else{\n                      return <div>{\"Fetch Products\"}</div>\n                      }\n                  }}\n          </Query>\n            {/* {emptyRows > 0 && (\n              <TableRow style={{ height: 48 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )} */}\n          </TableBody>\n         <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[10,100,200,500]}\n                \n                count={pageCount}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                // ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>\n        </Table> \n      </div>\n    </Paper>\n  );\n}\nexport default withApollo(AddContact);\n","import React, { useEffect, useContext, useState } from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { Link as RouterLink } from 'react-router-dom'\nimport Link from '@material-ui/core/Link'\nimport Product from './components/Product'\nimport Diamonds from './components/Diamonds'\nimport Gemstones from './components/Gemstones'\nimport Makingcharge from './components/Makingcharge'\nimport { API_URL, GRAPHQL_DEV_CLIENT } from '../../config';\nimport { VENDORLIST, PRODUCTDIAMONDTYPES } from '../../graphql/query';\n\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {\n \n  Chip,\n  TextField\n} from '@material-ui/core';\n\n\nconst useStyle = makeStyles(theme => ({\n}))\nexport const Markupprice = withRouter(props => {\n  const [vendorcode, setVendorcode] = React.useState(0);\n  const [vendorlist, setVendorlist] = React.useState(0);\n\n   \n  const classes = useStyle();\n\n  const handlevendorchange = type => (event, value) => { \n    setVendorcode(value.shortCode)\n\n  }\n  useEffect(() => {\n    const url = GRAPHQL_DEV_CLIENT;\n    const opts = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ query: VENDORLIST, variables: { } })\n    };\n    // console.log(\"helo\",setProductCtx)\n    fetch(url, opts)\n      .then(res => res.json())\n      .then(fatchvalue => {\n\n\n        setVendorlist({ \n          ...vendorlist,\n          vendors : fatchvalue.data.allMasterVendors.nodes\n        })\n\n      })\n      .catch(console.error)\n  }, [])\n\n   \n  return (\n    <Grid container  spacing={1}>  \n          {/* <Grid item xs={12} sm={12}>\n\n          <Typography component=\"h6\" variant=\"h6\">\n            Vendor Based Price List\n          </Typography>\n          </Grid>\n\n          <Grid item xs={4} sm={4}>\n\n                    <Autocomplete\n                      id=\"free-solo-2-demo\"\n                      fullWidth\n                      disableClearable\n                      className={classes.fixedTag}\n                      getOptionLabel={option => option.name}\n                      options={vendorlist.vendors}\n                      onChange={handlevendorchange('vendor')}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option.name} {...getTagProps({ index })} />\n                      ))\n                      }\n                      renderInput={params => (\n                      <TextField\n                      {...params}\n                      label=\"Product Materials\"\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                      InputProps={{ ...params.InputProps, readOnly: true, type: 'search' }}\n                      />\n                      )}\n                      />\n    </Grid> */}\n         \n          <Grid item xs={12} sm={12}>\n\n            <Typography component=\"h6\" variant=\"h6\">\n           Diamond Markup Setup\n          </Typography>\n          </Grid>\n          <Grid item xs={12} sm={12}>\n\n          <Product vendor={\"Diamond\"} />\n          </Grid>\n          <Grid item xs={12} sm={12}>\n\n          <Typography component=\"h6\" variant=\"h6\">\n          Gem Stone Markup Setup\n          </Typography>\n          </Grid>\n          <Grid item xs={12} sm={12}>\n\n          <Product vendor={\"Gem Stone\"} />\n          </Grid>\n          <Grid item xs={12} sm={12}>\n\n          <Typography component=\"h6\" variant=\"h6\">\n          Gold Markup Setup\n          </Typography>\n          </Grid>\n          <Grid item xs={12} sm={12}>\n\n          <Product vendor={\"Gold\"} />\n          </Grid>\n          <Grid item xs={12} sm={12}>\n\n          <Typography component=\"h6\" variant=\"h6\">\n          Making Charge Markup Setup\n          </Typography>\n          </Grid>\n          <Grid item xs={12} sm={12}>\n\n          <Product vendor={\"Making Charge\"} />\n          </Grid>\n    {/* <Grid item xs={12} sm={12}>\n    <Typography component=\"h6\" variant=\"h6\">\n           Diamond Price Setup\n          </Typography>\n          </Grid>\n          <Grid item xs={12} sm={12}>\n\n    <Diamonds />\n    </Grid> */}\n\n    {/* <Grid item xs={12} sm={12}>\n    <Typography component=\"h6\" variant=\"h6\">\n           Gemstone Price Setup\n          </Typography>\n          </Grid>\n          <Grid item xs={12} sm={12}>\n\n  <Gemstones /> \n    </Grid> */}\n\n{/* \n    <Grid item xs={12} sm={12}>\n    <Typography component=\"h6\" variant=\"h6\">\n           Makingcharge Price Setup\n          </Typography>\n          </Grid>\n          <Grid item xs={12} sm={12}>\n\n    <Makingcharge />\n    </Grid> */}\n    </Grid>\n  )\n});\n\nexport default withRouter(Markupprice);","import { makeStyles, fade } from '@material-ui/core/styles';\nconst drawerWidth = 240;\n\nexport const useStyles = makeStyles(theme => ({\n    grow: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n\n    },\n    title: {\n      display: 'none',\n      color: 'red',\n      [theme.breakpoints.up('sm')]: {\n        display: 'block',\n      },\n    },\n    search: {\n      position: 'relative',\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      '&:hover': {\n        backgroundColor: fade(theme.palette.common.white, 0.25),\n      },\n      marginRight: theme.spacing(2),\n      marginLeft: 0,\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(3),\n        width: 'auto',\n      },\n    },\n    searchIcon: {\n      width: theme.spacing(7),\n      height: '100%',\n      position: 'absolute',\n      pointerEvents: 'none',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    inputRoot: {\n      color: 'inherit',\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 7),\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('md')]: {\n        width: 200,\n      },\n    },\n    sectionDesktop: {\n      display: 'none',\n      [theme.breakpoints.up('md')]: {\n        display: 'flex',\n      },\n    },\n    sectionMobile: {\n      display: 'flex',\n      [theme.breakpoints.up('md')]: {\n        display: 'none',\n      },\n    },\n    root: {\n      display: 'flex',\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n      transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      marginLeft: drawerWidth,\n      width: `calc(100% - ${drawerWidth}px)`,\n      transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      [theme.breakpoints.down('md')]: {\n        marginLeft: \"0px\",\n        width:\"100%\"\n      },\n    },\n \n    hide: {\n      display: 'none',\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n      whiteSpace: 'nowrap',\n    },\n    drawerOpen: {\n      width: drawerWidth,\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    drawerClose: {\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      overflowX: 'hidden',\n      width: theme.spacing(7) + 1,\n      [theme.breakpoints.up('sm')]: {\n        width: theme.spacing(9) + 1,\n      },\n    },\n    toolbar: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-end',\n      padding: '0 8px',\n      ...theme.mixins.toolbar,\n    },\n    content: {\n      flexGrow: 1,\n      width:\"100%\",\n      overflow:\"auto\",\n      padding: theme.spacing(3),\n    },\n  }));","import { makeStyles } from '@material-ui/core/styles';\nconst drawerWidth = 240;\n\nexport const useStyles = makeStyles(theme => ({\n    root: {\n      display: 'flex',\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n      transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      marginLeft: drawerWidth,\n      width: `calc(100% - ${drawerWidth}px)`,\n      transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    menuButton: {\n      marginRight: 36,\n     \n    },\n    hide: {\n      display: 'none',\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n      whiteSpace: 'nowrap',\n    },\n    drawerOpen: {\n      width: drawerWidth,\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      [theme.breakpoints.down('md')]: {\n        flex: \"1 0 auto\",\n        height: \"100%\",\n        display: \"flex\",\n        outline: 0,\n        zIndex: 1200,\n        position: \"fixed\",\n        overflowY: \"auto\",\n        flexDirection: \"column\",\n       \n      },\n    },\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n    drawerClose: {\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      overflowX: 'hidden',\n      width: theme.spacing(7) + 1,\n      [theme.breakpoints.up('sm')]: {\n        width: theme.spacing(9) + 1,\n      },\n    },\n    toolbar: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-end',\n      padding: '0 8px',\n      ...theme.mixins.toolbar,\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n    profile: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      minHeight: 'fit-content'\n    },\n    avatar: {\n      width: 60,\n      height: 60\n    },\n    name: {\n      marginTop: theme.spacing(1)\n    },\n    divider: {\n      marginTop: theme.spacing(2)\n    },\n  }));","import React from 'react';\nimport clsx from 'clsx';\nimport {  useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\n  import ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport { withRouter } from 'react-router-dom';\nimport { useStyles } from './styles';\nimport Collapse from '@material-ui/core/Collapse';\nimport StarBorder from '@material-ui/icons/StarBorder';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { ProductContext } from '../../context';\nimport { Link as RouterLink } from 'react-router-dom'\nimport Link from '@material-ui/core/Link'\nimport { GlobalContext } from '../../context';\nimport {  Paper, Avatar, Typography } from '@material-ui/core';\n\n\nfunction SideBar() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { globalCtx, setGlobalCtx } = React.useContext(GlobalContext);\n  const { productCtx, setProductCtx } = React.useContext(ProductContext);\n\n  const handleDrawer = () => {\n    setGlobalCtx({ ...globalCtx, sideBarOpen: !globalCtx.sideBarOpen })\n  }\n  const handleClick = type => e => {\n    setGlobalCtx({ ...globalCtx, \"optionname\": type , isExpand: !globalCtx.isExpand})\n\n  }\n  // const handleClick  = type => e => {\n      \n  //     setGlobalCtx({ ...globalCtx,optionname: isExpand: !globalCtx.isExpand })\n\n  // }\n  function handleListItemClick(event, index)\n  {\n    setGlobalCtx({ ...globalCtx, selectedIndex: index,isExpand: !globalCtx.isExpand})\n\n  }\n\n  return (\n      <>\n     \n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: globalCtx.sideBarOpen,\n          [classes.drawerClose]: !globalCtx.sideBarOpen,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: globalCtx.sideBarOpen,\n            [classes.drawerClose]: !globalCtx.sideBarOpen,\n          }),\n        }}\n        open={globalCtx.sideBarOpen}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawer}>\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n       \n        <List>\n          \n          <Link underline='none' component={RouterLink} to={'/productlist'}>\n\n            <ListItem button key={\"Product List\"}  >\n            <ListItemIcon><InboxIcon /> </ListItemIcon>\n\n              <ListItemText primary={\"Product List\"} />\n            </ListItem>\n            </Link>\n            <ListItem button onClick={handleClick('Pricing')}>\n              <ListItemIcon>\n                <InboxIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Pricing\" />\n              {globalCtx.isExpand && globalCtx.optionname === 'Pricing' ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n            <Collapse in={globalCtx.isExpand  && globalCtx.optionname === 'Pricing'} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n        <Link underline='none' component={RouterLink} to={'/vendorpricesetup'}>\n\n          <ListItem button className={classes.nested} selected={globalCtx.selectedIndex === 1} onClick={event => handleListItemClick(event, 1)}>\n            <ListItemIcon>\n              <StarBorder />\n            </ListItemIcon>\n            <ListItemText primary=\"Vendor Price Setup\" />\n          </ListItem>\n          </Link>\n          <Link underline='none' component={RouterLink} to={'/markuppricesetup'}>\n\n          <ListItem button className={classes.nested} selected={globalCtx.selectedIndex === 2} onClick={event => handleListItemClick(event, 2)}>\n            <ListItemIcon>\n              <StarBorder />\n            </ListItemIcon>\n            <ListItemText primary=\"Markup Setup\" />\n          </ListItem>\n          </Link>\n          <Link underline='none' component={RouterLink} to={'/voucherdiscount'}>\n\n          <ListItem button className={classes.nested} selected={globalCtx.selectedIndex === 3} onClick={event => handleListItemClick(event, 3)}>\n            <ListItemIcon>\n              <StarBorder />\n            </ListItemIcon>\n            <ListItemText primary=\"Discount Setup\" />\n          </ListItem>\n          </Link>\n          <Link underline='none' component={RouterLink} to={'/priceupdate'}>\n\n          <ListItem button className={classes.nested} selected={globalCtx.selectedIndex === 4} onClick={event => handleListItemClick(event, 4)}>\n            <ListItemIcon>\n              <StarBorder />\n            </ListItemIcon>\n            <ListItemText primary=\"Price Run\" />\n          </ListItem>\n          </Link>\n        </List>\n      </Collapse>\n          <Link underline='none' component={RouterLink} to={'/vendorlist'}>\n            <ListItem button key={\"Vendorlist\"}  >\n            <ListItemIcon><InboxIcon /> </ListItemIcon>\n\n              <ListItemText primary={\"Vendorlist\"} />\n            </ListItem>\n            </Link>\n            <Link underline='none' component={RouterLink} to={'/orderlist'}>\n\n            <ListItem button key={\"Order List\"}  >\n            <ListItemIcon><InboxIcon /> </ListItemIcon>\n\n              <ListItemText primary={\"Order List\"} />\n            </ListItem>\n            </Link>\n          <Link underline='none' component={RouterLink} to={'/configuration'}>\n\n            <ListItem button key={\"Configuration\"}  >\n            <ListItemIcon><InboxIcon /> </ListItemIcon>\n\n              <ListItemText primary={\"Configuration\"} />\n            </ListItem>\n            </Link>\n\n       <ListItem button onClick={handleClick('Discounts')}>\n        <ListItemIcon>\n          <InboxIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Discounts\" />\n        {globalCtx.isExpand && globalCtx.optionname === 'Discounts' ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={globalCtx.isExpand && globalCtx.optionname === 'Discounts'} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n        <Link underline='none' component={RouterLink} to={'/voucherdiscount'}>\n\n          <ListItem button className={classes.nested} selected={globalCtx.selectedIndex === 1} onClick={event => handleListItemClick(event, 1)}>\n            <ListItemIcon>\n              <StarBorder />\n            </ListItemIcon>\n            <ListItemText primary=\"Sales Discount\" />\n          </ListItem>\n          </Link>\n          <Link underline='none' component={RouterLink} to={'/voucherdiscount'}>\n\n          <ListItem button className={classes.nested} selected={globalCtx.selectedIndex === 2} onClick={event => handleListItemClick(event, 2)}>\n            <ListItemIcon>\n              <StarBorder />\n            </ListItemIcon>\n            <ListItemText primary=\"Voucher Discount\" />\n          </ListItem>\n          </Link>\n        </List>\n      </Collapse>\n\n\n        </List>\n      </Drawer>\n    </>\n  );\n}\n\nexport default withRouter(SideBar);","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Badge from '@material-ui/core/Badge';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MailIcon from '@material-ui/icons/Mail';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport MoreIcon from '@material-ui/icons/MoreVert';\nimport { useStyles } from './styles';\nimport { withRouter } from 'react-router-dom';\nimport SideBar from '../SideBar';\nimport { GlobalContext } from '../../context';\nimport { CssBaseline } from '@material-ui/core';\nimport clsx from 'clsx';\nimport './style.css'\n\n\nfunction PAppBar() {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\n  const { globalCtx, setGlobalCtx } = React.useContext(GlobalContext);\n\n  const isMenuOpen = Boolean(anchorEl);\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n  function handleProfileMenuOpen(event) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleMobileMenuClose() {\n    setMobileMoreAnchorEl(null);\n  }\n\n  function handleMenuClose() {\n    setAnchorEl(null);\n    handleMobileMenuClose();\n  }\n\n  function handleDrawer(){\n    setGlobalCtx({ ...globalCtx, sideBarOpen: !globalCtx.sideBarOpen })\n  }\n\n  function handleMobileMenuOpen(event) {\n    setMobileMoreAnchorEl(event.currentTarget);\n\n  }\n\n  const menuId = 'primary-search-account-menu';\n  const renderMenu = (\n    <Menu\n      anchorEl={anchorEl}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      id={menuId}\n      keepMounted\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n      open={isMenuOpen}\n      onClose={handleMenuClose}\n    >\n      <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\n      <MenuItem onClick={handleMenuClose}>My account</MenuItem>\n    </Menu>\n  );\n\n  const mobileMenuId = 'primary-search-account-menu-mobile';\n  const renderMobileMenu = (\n    <Menu\n      anchorEl={mobileMoreAnchorEl}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      id={mobileMenuId}\n      keepMounted\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n      open={isMobileMenuOpen}\n      onClose={handleMobileMenuClose}\n    >\n      <MenuItem>\n        <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\n          <Badge badgeContent={4} color=\"secondary\">\n            <MailIcon />\n          </Badge>\n        </IconButton>\n        <p>Messages</p>\n      </MenuItem>\n      <MenuItem>\n        <IconButton aria-label=\"show 11 new notifications\" color=\"inherit\">\n          <Badge badgeContent={11} color=\"secondary\">\n            <NotificationsIcon />\n          </Badge>\n        </IconButton>\n        <p>Notifications</p>\n      </MenuItem>\n      <MenuItem onClick={handleProfileMenuOpen}>\n        <IconButton\n          aria-label=\"account of current user\"\n          aria-controls=\"primary-search-account-menu\"\n          aria-haspopup=\"true\"\n          color=\"inherit\"\n        >\n          <AccountCircle />\n        </IconButton>\n        <p>Profile</p>\n      </MenuItem>\n    </Menu>\n  );\n\n  return (\n    <>\n      <AppBar position=\"fixed\" className={clsx(classes.appBar, {\n              [classes.appBarShift]: globalCtx.sideBarOpen,\n            })} >\n        <Toolbar>\n          <IconButton\n            className=\"hide\"\n            edge=\"start\"\n            className={classes.hide}\n            className={clsx(classes.menuButton, {\n              [classes.hide]: globalCtx.sideBarOpen,\n            })}\n            onClick={handleDrawer}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography  variant=\"h6\" noWrap>\n            NAC Jewellers\n          </Typography>\n          \n          <div className={classes.grow} />\n          <div className={classes.sectionDesktop}>\n            <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\n              <Badge badgeContent={4} color=\"secondary\">\n                <MailIcon />\n              </Badge>\n            </IconButton>\n            <IconButton aria-label=\"show 17 new notifications\" color=\"inherit\">\n              <Badge badgeContent={17} color=\"secondary\">\n                <NotificationsIcon />\n              </Badge>\n            </IconButton>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"account of current user\"\n              aria-controls={menuId}\n              aria-haspopup=\"true\"\n              onClick={handleProfileMenuOpen}\n              color=\"inherit\"\n            >\n              <AccountCircle />\n            </IconButton>\n          </div>\n          <div className={classes.sectionMobile}>\n            <IconButton\n              aria-label=\"show more\"\n              aria-controls={mobileMenuId}\n              aria-haspopup=\"true\"\n              onClick={handleMobileMenuOpen}\n              color=\"inherit\"\n            >\n              <MoreIcon />\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n      {renderMobileMenu}\n      {renderMenu}\n    </>\n  );\n}\n\nconst PrimaryAppBar = withRouter(PAppBar);\n\nconst MainWrapper = props => {\n  const classes = useStyles();\n  let { component: Component, ...rest } = props;\n\n  return(\n    <main className={classes.content} >\n        <div className={classes.toolbar} />\n        <Component {...rest} />\n      </main>\n  )\n}\n\nexport const withAppBar = (component, props) => {\n\n  return(\n    <>\n      <CssBaseline />\n      <PrimaryAppBar {...props} />\n      <SideBar {...props} />\n      <MainWrapper component={component} />\n    </>\n  );\n}\n\nexport default PrimaryAppBar;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport route from './route';\nimport { withAppBar } from '../components/PrimaryAppBar';\n\nconst PrivateRoute = props => {\n    const { component, ...rest } = props;\n\n    const checkAuth = () => {\n        return true;\n    }\n\n    const Component = props => withAppBar(component, props);\n\n    return checkAuth() ? <Component {...rest} /> : <Redirect to={route.login} />\n}\n\n\nexport default PrivateRoute;","import React from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TableHead from '@material-ui/core/TableHead';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Typography, Button, Chip, TextField, Input } from '@material-ui/core';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { ProductContext } from '../../context';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { NetworkContext } from '../../context/NetworkContext';\nimport CancelIcon from '@material-ui/icons/CancelOutlined';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\nconst columns = [\n  { id: 'Diamond', label: 'Diamond' },\n  { id: 'Colour', label: 'Colour' },\n  { id: 'Clarity', label: 'Clarity' },\n  { id: 'Weight', label: 'Weight' },\n  { id: 'Number', label: 'Number' },\n  { id: 'Setting', label: 'Setting' },\n  { id: 'Shape', label: 'Shape' },\n\n  {\n    id: 'Edit',\n    label: 'Edit',\n    minWidth: 80,\n    maxWidth: 80,\n    align: 'center',\n    format: value => value.toFixed(2),\n  }\n];\n\nconst useStyles1 = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n    marginLeft: theme.spacing(2.5),\n  },\n  \n}));\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  function handleFirstPageButtonClick(event) {\n    onChangePage(event, 0);\n  }\n\n  function handleBackButtonClick(event) {\n    onChangePage(event, page - 1);\n  }\n\n  function handleNextButtonClick(event) {\n    onChangePage(event, page + 1);\n  }\n\n  function handleLastPageButtonClick(event) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nfunction createData(name, calories, fat) {\n  return { name, calories, fat };\n}\n\n\n\nconst useStyles2 = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  table: {\n    minWidth: 500,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n  fixedTag: {\n    padding: 0,\n    '& .MuiOutlinedInput-root':{\n      padding: 0,\n    }\n  },\n  root:{\n    marginTop: theme.spacing(2)\n  },\n  table:{\n    //marginTop: theme.spacing(2)\n  },\n  button: {\n    margin: theme.spacing(0),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    width: '100%'\n  },\n  gempapper: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    width: '100%'\n  },\n  leftIcon: {\n    marginRight: theme.spacing(1),\n  },\n  rightIcon: {\n    marginLeft: theme.spacing(1),\n  },\n  iconSmall: {\n    fontSize: 20,\n  },\n}));\n\nexport default function DiamondDetails(props) {\n  const [open, setOpen] = React.useState(false);\n  const [snackMessage,setSnackMessage] = React.useState({\n    message:\"\",\n    severity:\"\"\n  });\n  const { sendNetworkRequest } = React.useContext(NetworkContext);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const { productCtx, setProductCtx} = React.useContext(ProductContext);\n  const [btnEdit, setBtnEdit] = React.useState({\n    action: false,\n    id: ''\n  });\n  let [diamondEditObject,setDiamondEditObject ] = React.useState({\n    edit:''\n  }) ;\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.diamond&&props.diamond.length - page * rowsPerPage);\n  function DiamondEdit(diamondData) {\n    setDiamondEditObject({\n      ...diamondEditObject,\n      edit:JSON.parse(JSON.stringify(diamondData))\n    })\n    setProductCtx({\n      ...productCtx,\n      diamondsettings:productCtx.masterData.diamondsettings.filter((settingData,index)=>settingData.name===diamondData.diamondSettings)[0],\n      diamondshape: productCtx.masterData.diamondshapes.filter((shapeData,index)=>shapeData.name===diamondData.diamondShape)[0],\n      diamondcount:diamondData.stoneCount,\n      diamondweight:diamondData.stoneWeight,\n    })\n    setBtnEdit({ ...btnEdit, id:diamondData.id, action: true })\n  }\n  function DiamondSave(id){\n    // alert(JSON.stringify(productCtx.diamondsettings))\n    // alert(JSON.stringify(productCtx.diamondshape))\n    // alert(JSON.stringify(productCtx.diamondcount))\n    // alert(JSON.stringify(id))\n    var bodydata = {}\n    if(productCtx.diamondsettings && productCtx.diamondshape && productCtx.diamondcount && productCtx.diamondweight){\n      let list_data=props.diamond;\n      let DiamondChangeData = list_data.map((diamondListData,index)=>{\n        if(id===diamondListData.id){\n          diamondListData.diamondSettings=productCtx.diamondsettings.name;\n          diamondListData.diamondShape = productCtx.diamondshape.name;\n          diamondListData.stoneCount = productCtx.diamondcount;\n          diamondListData.stoneWeight = productCtx.diamondweight;\n          bodydata['diamondSettings'] = productCtx.diamondsettings.name\n          bodydata['diamondShape'] = productCtx.diamondshape.name\n          bodydata['stoneCount'] = productCtx.diamondcount;\n          bodydata['stoneWeight'] = productCtx.diamondweight;\n          bodydata['diamondid'] = id;\n          return diamondListData;\n        }\n        return diamondListData;\n      }); \n      sendNetworkRequest('/editproductdiamond', {}, bodydata)\n\n      console.log(\"------******\")\n      console.log(JSON.stringify(bodydata))\n    setBtnEdit({ ...btnEdit, id:\"\", action: false })\n    \n      // let editDiamondList = DiamondChangeData && DiamondChangeData.filter((edit_data,index)=>edit_data.id===id)[0];\n      // let editDiamondLists = productCtx.editDiamondLists;\n      // if(JSON.stringify(editDiamondList)!==JSON.stringify(diamondEditObject.edit)){\n      //   let status = editDiamondLists&& editDiamondLists.some((check_edit,index)=>check_edit.id===editDiamondList.id) ? \n      //   editDiamondLists = editDiamondLists && editDiamondLists\n      //   .map((diamond_list,index)=>{\n      //     if(diamond_list.id === editDiamondList.id){\n      //       return editDiamondList;\n      //     }\n      //     return diamond_list;\n      //   }) \n      //   : editDiamondLists.push(editDiamondList); \n      // }\n      // // console.log(editDiamondLists,'editDiamondList')\n      // setSnackMessage({\n      //   ...snackMessage,\n      //   message:\"This is successfully saved\",\n      //   severity:\"success\"\n      // })\n      // handleClick();\n      // setProductCtx({\n      //   ...productCtx,\n      //   diamondlist:DiamondChangeData,\n      //   editDiamondLists,\n      //   diamondsettings:\"\",\n      //   diamondshape: \"\",\n      //   diamondcount:\"\",\n      //   diamondweight:\"\",\n      // })\n      // setBtnEdit({ ...btnEdit, id:\"\", action: false })\n    }else{\n      setSnackMessage({\n        ...snackMessage,\n        message:\"You are not fill all item\",\n        severity:\"info\"\n      })\n      handleClick();\n    }\n  }\n  function CancelEdit(diamondData) {\n    setBtnEdit({ ...btnEdit, id:'', action: false })\n\n  }\n  function handleChangePage(event, newPage) {\n    setPage(newPage);\n  }\n\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }\n  const handleoptionChange = type => (event, value) => {\n    \n    setProductCtx({ ...productCtx, [type]: value})\n\n}\nconst handleInputChange = type => e => {\n  setProductCtx({ ...productCtx, [type]: e.target.value  })\n}\n  return (\n    <Paper className={classes.root}>\n             <React.Fragment>\n        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity={snackMessage.severity}>\n          {snackMessage.message}\n        </Alert>\n      </Snackbar>\n        </React.Fragment>\n      <div className={classes.tableWrapper}>\n        <Table className={classes.table}  border={1} borderColor={\"#ddd\"} size=\"small\" stickyHeader>\n          <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n\n          <TableBody>\n            {props.diamond&&props.diamond.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => (\n              <TableRow key={row.id}>\n                <TableCell align={\"center\"} style = {{width: 40}} component=\"th\" scope=\"row\">\n                  {row.diamondType}\n                </TableCell>\n                <TableCell align={\"center\"} style = {{width: 40}} component=\"th\" scope=\"row\">\n                  {row.diamondColour}\n                </TableCell>\n                <TableCell align={\"center\"} style = {{width: 40}} component=\"th\" scope=\"row\">\n                  {row.diamondClarity}\n                </TableCell>\n\n                {btnEdit.action && btnEdit.id == row.id ?  \n                 <TableCell align={\"center\"} component=\"th\" scope=\"row\"> \n                <Input\n              variant=\"outlined\"\n              style = {{width: 40}}\n              id=\"size\"\n              margin=\"dense\"\n              label=\"Weight\"\n              name=\"size\"\n              autoComplete=\"size\"\n              onChange={handleInputChange('diamondweight')}\n              value={productCtx.diamondweight}\n              />\n              </TableCell>    :\n                  <TableCell align={\"center\"} style = {{width: 40}} component=\"th\" scope=\"row\">\n                    {row.stoneWeight}\n                  </TableCell>\n                }\n                {btnEdit.action && btnEdit.id == row.id ?     \n                <TableCell component=\"th\" scope=\"row\">\n                <Input\n              variant=\"outlined\"\n              style = {{width: 40}}\n              id=\"size\"\n              margin=\"dense\"\n              label=\"#of Stones\"\n              name=\"size\"\n              type=\"number\"\n              autoComplete=\"size\"\n              onChange={handleInputChange('diamondcount')}\n              value={productCtx.diamondcount}\n              />\n         \n              </TableCell> :\n                  <TableCell  style = {{width: 40}} component=\"th\" scope=\"row\">\n                    {row.stoneCount}\n                   \n                  </TableCell>\n                }\n                {btnEdit.action && btnEdit.id == row.id ?\n                <TableCell component=\"th\" scope=\"row\">\n                  <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    value={productCtx.diamondsettings}\n                    options={productCtx.masterData.diamondsettings}\n                    onChange={handleoptionChange('diamondsettings')}\n                    renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                      ))\n                    }\n                    renderInput={params => (\n                      <TextField\n                        {...params}\n                        label=\"Diamond Setting\"\n                        margin=\"dense\"\n                        variant=\"outlined\"\n                        fullWidth\n                        InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                    )}\n                  /> \n                  </TableCell>:\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.diamondSettings}\n                  </TableCell>\n                }\n                {btnEdit.action && btnEdit.id == row.id ? \n                  <TableCell component=\"th\" scope=\"row\">   \n                <Autocomplete\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    value={productCtx.diamondshape}\n                    options={productCtx.masterData.diamondshapes}\n                    onChange={handleoptionChange('diamondshape')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Diamond Shape\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n                    </TableCell> :\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.diamondShape}\n                  </TableCell>\n                }\n              \n\n                {\n                  btnEdit.action && btnEdit.id == row.id ?\n                    <TableCell align=\"center\" style={{width: 80}}>\n                      <Button onClick={(e) => DiamondSave(row.id)}><SaveIcon />\n                      </Button>\n                      <Button onClick={(e) => CancelEdit(row)}><CancelIcon />\n                      </Button>\n                    </TableCell> :\n                    <TableCell align=\"center\" style={{width: 80}}>\n                      <Button onClick={(e) => DiamondEdit(row)}><EditIcon />\n                      </Button>\n                    </TableCell>\n                }\n              </TableRow>\n            ))}\n            {emptyRows == 0 ? <>\n              <TableRow style={{ height: 1 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n              </> : null\n            }\n          </TableBody>\n          {/* <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                colSpan={5}\n                count={props.diamond&&props.diamond.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter> */}\n        </Table>\n      </div>\n    </Paper>\n  );\n}\n","import React from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TableHead from '@material-ui/core/TableHead';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Typography, Button, Chip, TextField, Input } from '@material-ui/core';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { ProductContext } from '../../context';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { NetworkContext } from '../../context/NetworkContext';\n\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\nconst columns = [\n  { id: 'Gemstone Type', label: 'Gemstone Type' },\n  { id: 'Shape', label: 'Shape' },\n  { id: 'Setting', label: 'Setting' },\n  { id: 'Size', label: 'Size' },\n  { id: 'Weight', label: 'Weight' },\n  { id: 'Number', label: 'Number' },\n  {\n    id: 'Edit',\n    label: 'Edit',\n    minWidth: 120,\n    align: 'center',\n    format: value => value.toFixed(2),\n  }\n];\n\nconst useStyles1 = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n    marginLeft: theme.spacing(2.5),\n  },\n\n}));\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  function handleFirstPageButtonClick(event) {\n    onChangePage(event, 0);\n  }\n\n  function handleBackButtonClick(event) {\n    onChangePage(event, page - 1);\n  }\n\n  function handleNextButtonClick(event) {\n    onChangePage(event, page + 1);\n  }\n\n  function handleLastPageButtonClick(event) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nfunction createData(name, calories, fat) {\n  return { name, calories, fat };\n}\n\n\n\nconst useStyles2 = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  table: {\n    minWidth: 500,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n  fixedTag: {\n    padding: 0,\n    '& .MuiOutlinedInput-root': {\n      padding: 0,\n    }\n  },\n  root: {\n    marginTop: theme.spacing(2)\n  },\n  table: {\n   // marginTop: theme.spacing(2)\n  },\n  button: {\n    margin: theme.spacing(0),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    width: '100%'\n  },\n  gempapper: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    width: '100%'\n  },\n  leftIcon: {\n    marginRight: theme.spacing(1),\n  },\n  rightIcon: {\n    marginLeft: theme.spacing(1),\n  },\n  iconSmall: {\n    fontSize: 20,\n  },\n}));\n\nexport default function GemstoneDetails(props) {\n  const [open, setOpen] = React.useState(false);\n  const [snackMessage,setSnackMessage] = React.useState({\n    message:\"\",\n    severity:\"\"\n  });\n  const { sendNetworkRequest } = React.useContext(NetworkContext);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const { productCtx, setProductCtx } = React.useContext(ProductContext);\n  const [btnEdit, setBtnEdit] = React.useState({\n    action: false,\n    id: ''\n  })\n  let [gemstoneEditObject,setGemstoneEditObject ] = React.useState({\n    edit:''\n  }) ;\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.gemstone && props.gemstone.length - page * rowsPerPage);\n  function GemstoneEdit(gemstoneData) {\n    setGemstoneEditObject({\n      ...gemstoneEditObject,\n      edit:JSON.parse(JSON.stringify(gemstoneData))\n    })\n    setProductCtx({\n      ...productCtx,\n      gemstonesettings: productCtx.masterData.gemstonesettings.filter((settingData, index) => settingData.name === gemstoneData.gemstoneSetting)[0],\n      gemstoneshape: productCtx.masterData.gemstonshapes.filter((shapeData, index) => shapeData.name === gemstoneData.gemstoneShape)[0],\n      gemstonecount: gemstoneData.stoneCount,\n      gemstoneweight: gemstoneData.stoneWeight,\n      gemstonesize: gemstoneData.gemstoneSize\n    })\n    setBtnEdit({ ...btnEdit, id: gemstoneData.id, action: true })\n  }\n async function GemstoneSave(id) {\n    if (productCtx.gemstonesettings && productCtx.gemstoneshape && productCtx.gemstonecount && productCtx.gemstoneweight && productCtx.gemstonesize) {\n      let list_data = props.gemstone;\n      var bodydata = {}\n      let gemstoneChangeData = list_data.map((gemstoneListData, index) => {\n        if (id === gemstoneListData.id) {\n          gemstoneListData.gemstoneSetting = productCtx.gemstonesettings.name;\n          gemstoneListData.gemstoneShape = productCtx.gemstoneshape.name;\n          gemstoneListData.stoneCount = productCtx.gemstonecount;\n          gemstoneListData.stoneWeight = productCtx.gemstoneweight;\n          gemstoneListData.gemstoneSize = productCtx.gemstonesize;\n          bodydata['gemstoneSetting'] = productCtx.gemstonesettings.name\n          bodydata['gemstoneShape'] = productCtx.gemstoneshape.name\n          bodydata['stoneCount'] = productCtx.gemstonecount;\n          bodydata['gemstoneSize'] = productCtx.gemstonesize;\n          bodydata['stoneWeight'] = productCtx.gemstoneweight;\n          bodydata['id'] = id;\n          return gemstoneListData;\n        }\n        return gemstoneListData;\n      });\n\n      let response =  await sendNetworkRequest('/editproductgemstone', {}, bodydata)\n      let editGemstoneList = gemstoneChangeData && gemstoneChangeData.filter((edit_data,index)=>edit_data.id===id)[0];\n      let editGemstoneLists = productCtx.editGemstoneLists;\n      if(JSON.stringify(editGemstoneList)!==JSON.stringify(gemstoneEditObject.edit)){\n        let status = editGemstoneLists&& editGemstoneLists.some((check_edit,index)=>check_edit.id===editGemstoneList.id) ? \n        editGemstoneLists = editGemstoneLists && editGemstoneLists\n        .map((gemstone_list,index)=>{\n          if(gemstone_list.id === editGemstoneList.id){\n            return editGemstoneList;\n          }\n          return gemstone_list;\n        }) \n        : editGemstoneLists.push(editGemstoneList); \n      }\n      setSnackMessage({\n        ...snackMessage,\n        message:\"This is successfully saved\",\n        severity:\"success\"\n      })\n      handleClick();\n      setProductCtx({\n        ...productCtx,\n        gemstonelist: gemstoneChangeData,\n        editGemstoneLists,\n        gemstonesettings: \"\",\n        gemstoneshape: \"\",\n        gemstonecount: \"\",\n        gemstoneweight: \"\",\n        gemstonesize: \"\"\n      })\n      setBtnEdit({ ...btnEdit, id: \"\", action: false })\n    } else {\n      setSnackMessage({\n        ...snackMessage,\n        message:\"You are not fill all item\",\n        severity:\"info\"\n      })\n      handleClick();\n    }\n  }\n  function handleChangePage(event, newPage) {\n    setPage(newPage);\n  }\n\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }\n  const handleoptionChange = type => (event, value) => {\n\n    setProductCtx({ ...productCtx, [type]: value })\n\n  }\n  const handleInputChange = type => e => {\n    setProductCtx({ ...productCtx, [type]: e.target.value })\n  }\n  return (\n    <Paper className={classes.root}>\n          <React.Fragment>\n        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity={snackMessage.severity}>\n          {snackMessage.message}\n        </Alert>\n      </Snackbar>\n        </React.Fragment>\n      <div className={classes.tableWrapper}>\n        <Table className={classes.table}  border={1} borderColor={\"#ddd\"} size=\"small\" stickyHeader>\n          <TableHead>\n            <TableRow>\n              {columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n\n          <TableBody>\n            {props.gemstone && props.gemstone.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => (\n              <TableRow key={row.name}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.gemstoneType}\n                </TableCell>\n                {btnEdit.action && btnEdit.id == row.id ?\n                  <TableCell component=\"th\" scope=\"row\">\n\n                    <Autocomplete\n                      id=\"free-solo-2-demo\"\n                      className={classes.fixedTag}\n                      getOptionLabel={option => option.label}\n                      value={productCtx.gemstoneshape}\n                      options={productCtx.masterData.gemstonshapes}\n                      onChange={handleoptionChange('gemstoneshape')}\n                      renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                          <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                        ))\n                      }\n                      renderInput={params => (\n                        <TextField\n                          {...params}\n                          label=\"Gemstone Shape\"\n                          margin=\"dense\"\n                          variant=\"outlined\"\n                          fullWidth\n                          InputProps={{ ...params.InputProps, type: 'search' }}\n                        />\n                      )}\n                    />\n                  </TableCell> :\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.gemstoneShape}\n                  </TableCell>\n                }\n                {btnEdit.action && btnEdit.id == row.id ?\n                  <TableCell component=\"th\" scope=\"row\">\n                    <Autocomplete\n                      id=\"free-solo-2-demo\"\n                      className={classes.fixedTag}\n                      getOptionLabel={option => option.label}\n                      value={productCtx.gemstonesettings}\n                      options={productCtx.masterData.gemstonesettings}\n                      onChange={handleoptionChange('gemstonesettings')}\n                      renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                          <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                        ))\n                      }\n                      renderInput={params => (\n                        <TextField\n                          {...params}\n                          label=\"Gemstone Setting\"\n                          margin=\"dense\"\n                          variant=\"outlined\"\n                          fullWidth\n                          InputProps={{ ...params.InputProps, type: 'search' }}\n                        />\n                      )}\n                    />\n                  </TableCell> :\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.gemstoneSetting}\n                  </TableCell>\n                }\n                {btnEdit.action && btnEdit.id == row.id ?\n                  <TableCell component=\"th\" scope=\"row\">\n                    <Input\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"size\"\n                      margin=\"dense\"\n                      label=\"Gemstone Size\"\n                      name=\"size\"\n                      onChange={handleInputChange('gemstonesize')}\n                      autoComplete=\"size\"\n                      value={productCtx.gemstonesize}\n                    />\n                  </TableCell> :\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.gemstoneSize}\n                  </TableCell>}\n                {btnEdit.action && btnEdit.id == row.id ?\n                  <TableCell component=\"th\" scope=\"row\">\n                    <Input\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"size\"\n                      margin=\"dense\"\n                      label=\"Weight\"\n                      name=\"size\"\n                      autoComplete=\"size\"\n                      onChange={handleInputChange('gemstoneweight')}\n                      value={productCtx.gemstoneweight}\n                    />\n                  </TableCell> :\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.stoneWeight}\n                  </TableCell>\n                }\n                {btnEdit.action && btnEdit.id == row.id ?\n                  <TableCell component=\"th\" scope=\"row\">\n                    <Input\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"size\"\n                      margin=\"dense\"\n                      label=\"#of Stones\"\n                      name=\"size\"\n                      autoComplete=\"size\"\n                      onChange={handleInputChange('gemstonecount')}\n                      value={productCtx.gemstonecount}\n                    />\n                  </TableCell> :\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.stoneCount}\n                  </TableCell>\n                }\n                {\n                  btnEdit.action && btnEdit.id == row.id ?\n                    <TableCell align=\"center\">\n                      <Button onClick={(e) => GemstoneSave(row.id)}><SaveIcon />\n                      </Button>\n                    </TableCell> :\n                    <TableCell align=\"center\">\n                      <Button onClick={(e) => GemstoneEdit(row)}><EditIcon />\n                      </Button>\n                    </TableCell>\n                }\n              </TableRow>\n            ))}\n            {emptyRows == 0 && (\n              <TableRow style={{ height: 1 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )}\n          </TableBody>\n          <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                colSpan={5}\n                count={props.gemstone && props.gemstone.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </div>\n    </Paper>\n  );\n}\n","import React from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TableHead from '@material-ui/core/TableHead';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Typography, Button, Chip, TextField, Input } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { ProductContext } from '../../context';\nimport Switch from '@material-ui/core/Switch';\nimport { NetworkContext } from '../../context/NetworkContext';\nimport CancelIcon from '@material-ui/icons/CancelOutlined';\nimport SaveIcon from '@material-ui/icons/Save';\n\nconst columns = [\n  { id: 'SKU', label: 'SKU'},\n  { id: 'Metal Colour', label: 'Metal Colour' },\n  { id: 'Metal Purity', label: 'Metal Purity' },\n  { id: 'Gold Weight', label: 'Gold Weight' },\n  { id: 'Size', label: 'Size' },\n  { id: 'Vendor lead Time', label: 'Vendor lead Time' },\n  { id: 'Ready to Ship', label: 'Ready to Ship' },\n  { id: 'Default', label: 'Default' },\n  {\n    id: 'Active',\n    label: 'Active',\n    align: 'center',\n    format: value => value.toFixed(2),\n  },\n  {\n    id: 'Edit',\n    label: 'Edit',\n    align: 'center',\n    format: value => value.toFixed(2),\n  }\n];\n\nconst useStyles1 = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n    marginLeft: theme.spacing(2.5),\n  },\n  \n}));\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  function handleFirstPageButtonClick(event) {\n    onChangePage(event, 0);\n  }\n\n  function handleBackButtonClick(event) {\n    onChangePage(event, page - 1);\n  }\n  \n  function handleNextButtonClick(event) {\n    onChangePage(event, page + 1);\n  }\n \n  function handleLastPageButtonClick(event) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nfunction createData(name, calories, fat) {\n  return { name, calories, fat };\n}\n\n\n\nconst useStyles2 = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  table: {\n    minWidth: 500,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n  fixedTag: {\n    padding: 0,\n    '& .MuiOutlinedInput-root':{\n      padding: 0,\n    }\n  },\n  root:{\n    marginTop: theme.spacing(2)\n  },\n  table:{\n    width: '100%'\n   // marginTop: theme.spacing(2)\n  },\n  button: {\n    margin: theme.spacing(0),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    width: '100%'\n  },\n  gempapper: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    width: '100%'\n  },\n  leftIcon: {\n    marginRight: theme.spacing(1),\n  },\n  rightIcon: {\n    marginLeft: theme.spacing(1),\n  },\n  iconSmall: {\n    fontSize: 20,\n  },\n}));\n\nexport default function Variants(props) {\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  \n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const { productCtx, setProductCtx} = React.useContext(ProductContext);\n  const [btnEdit, setBtnEdit] = React.useState({\n    action: false,\n    id: ''\n  })\n  function CancelEdit(diamondData) {\n    setBtnEdit({ ...btnEdit, id:'', action: false })\n\n  }\n  const { sendNetworkRequest } = React.useContext(NetworkContext);\n\n  const [state, setState] = React.useState({\n    checkedA: true,\n    checkedB: true,\n  });\n  function handleChangeisdefault(variantId) {\n    \n  }\n\n  const handleChangeswitch = name => event => {\n    setProductCtx({ ...productCtx, [name]: event.target.checked})\n\n  //  setState({ ...state, [name]: event.target.checked });\n  };\n  function handleChange(variantId) {\n    let variantslist = productCtx.variants;\n    variantslist = productCtx.variants && productCtx.variants.map((variant,index)=>{\n      if(variant.id===variantId){\n        let status = variant.isActive ? variant.isActive=false : variant.isActive= true;\n      }\n      return variant;\n    })\n    let filterVariant = variantslist&& variantslist.filter((filter_data,index)=>filter_data.id===variantId)[0];\n    let editVaraint = {\n      id:filterVariant.id,\n      isActive:filterVariant.isActive\n    }\n    let editVariants = productCtx.editVariants;\n    let editStatus = editVariants && editVariants.some((check_variant,index)=>check_variant.id===variantId) ?editVariants= editVariants && editVariants.filter((edit_variant_filter,index)=>edit_variant_filter.id!==variantId):editVariants.push(editVaraint);\n    setProductCtx({\n      ...productCtx,\n      variants:variantslist,\n      editVariants\n    })\n  };\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.variants&&props.variants.length - page * rowsPerPage);\n  // function VariantEdit(id) {\n  //   alert(id)\n  //   setBtnEdit({ ...btnEdit, id, action: true })\n  // }\n  function handleChangePage(event, newPage) {\n    setPage(newPage);\n  }\n  const handleinputChange =type => e => {\n    // const re = /^[a-zA-Z \\b]+$/;\n    // if (e.target.value === '' || re.test(e.target.value)) {\n      setProductCtx({ ...productCtx, [type]: e.target.value})\n   // }\n  }\n\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }\n  function DiamondEdit(diamondData) {\n    setProductCtx({\n      ...productCtx,\n      editleadtime:diamondData.vendorDeliveryTime,\n      editreadytoship: diamondData.isReadyToShip,\n      editisdefault:diamondData.isdefault,\n      editisactive:diamondData.isActive\n    })\n    setBtnEdit({ ...btnEdit, id:diamondData.generatedSku, action: true })\n\n  }\n  function DiamondSave(id){\n    var bodydata = {}\n    if(productCtx.editleadtime){\n      let list_data=props.variants;\n      let Skuchangedata = list_data.map((skulistdata,index)=>{\n        if(id===skulistdata.generatedSku){\n          skulistdata.vendorDeliveryTime = productCtx.editleadtime;\n          skulistdata.isdefault = productCtx.editisdefault;\n          skulistdata.isActive =  productCtx.editisactive;\n          skulistdata.isReadyToShip = productCtx.editreadytoship\n          // diamondListData.stoneCount = productCtx.diamondcount;\n          // diamondListData.stoneWeight = productCtx.diamondweight;\n           bodydata['vendorDeliveryTime'] = productCtx.editleadtime\n           bodydata['isdefault'] = productCtx.editisdefault\n           bodydata['isActive'] = productCtx.editisactive;\n           bodydata['isReadyToShip'] = productCtx.editreadytoship;\n           bodydata['generatedSku'] = id;\n          console.log(JSON.stringify(bodydata))\n          return skulistdata;\n        }\n        return skulistdata;\n      });\n    }\n\n    sendNetworkRequest('/updateskuinfo', {}, bodydata)\n\n    setBtnEdit({ ...btnEdit, id:\"\", action: false })\n\n  }\n//   const handleoptionChange = type => (event, value) => {\n    \n//     setProductCtx({ ...productCtx, [type]: value})\n\n// }\n// const handleInputChange = type => e => {\n//   setProductCtx({ ...productCtx, [type]: e.target.value  })\n// }\n  return (\n    <Paper className={classes.root}>\n      <div className={classes.tableWrapper}>\n        <Table className={classes.table}  border={1} borderColor={\"#ddd\"} size=\"small\" stickyHeader>\n          <TableHead>\n            <TableRow>\n              {props.columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.name}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n\n          <TableBody>\n            {props.variants&& props.variants.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => (\n              <TableRow key={row.name}>\n               {props.displycolumns.indexOf('SKU') > -1 ?  <TableCell component=\"th\" scope=\"row\">\n                  {row.generatedSku}\n                </TableCell> : null }\n                {props.displycolumns.indexOf('Metal Colour') > -1 ?  <TableCell align=\"center\" style = {{width: 40}}  scope=\"row\">\n                  {row.metalColor}\n            </TableCell> : null } \n            {props.displycolumns.indexOf('Metal Purity') > -1 ?  <TableCell align=\"center\" style = {{width: 40}} component=\"th\" scope=\"row\">\n                  {row.purity}\n                </TableCell> : null }\n                {props.displycolumns.indexOf('Gold Weight') > -1 ? <TableCell align=\"center\" style = {{width: 40}} component=\"th\" scope=\"row\">\n                    {row.skuWeight}\n                  </TableCell>: null}\n                  {/* <TableCell align=\"center\" style = {{width: 20}} component=\"th\" scope=\"row\">\n                    {row.diamondType}\n                  </TableCell> */}\n                  {props.displycolumns.indexOf('Size') > -1 ? <TableCell align=\"center\" style = {{width: 40}} component=\"th\" scope=\"row\">\n                    {row.skuSize}\n                  </TableCell> : null }\n                  {props.displycolumns.indexOf('Vendor lead Time') > -1 ? <TableCell align=\"center\" style = {{width: 40}} component=\"th\" scope=\"row\">\n                  {btnEdit.action && btnEdit.id == row.generatedSku  ?  <Input\n                    className={classes.helperinput}\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    style = {{width: 40}}\n                    value={productCtx.editleadtime}\n                    id=\"productname\"\n                    error={productCtx && productCtx.error_message && productCtx.error_message.productname}\n                    name=\"productname\"\n                    label=\"Vendor Lead Time\"\n                    //onInput={keyPress.bind(this)}\n                    onChange={handleinputChange('editleadtime')}\n\n                   //onChange={(e)=>handleinputChange(e,'productname')}\n                  /> :\n                    \n                    \n                    <Typography className={classes.heading}>{row.vendorDeliveryTime}</Typography>\n\n                  } </TableCell> : null }\n                {props.displycolumns.indexOf('Ready To Ship') > -1 ? \n                  <TableCell align=\"center\" style = {{width: 40}} component=\"th\" scope=\"row\">\n                  <Switch\n                        checked={(btnEdit.action && btnEdit.id == row.generatedSku) ? productCtx.editreadytoship : row.isReadyToShip}\n                       // onChange={()=>handleChange(row.id)}\n                        value=\"checkedA\"\n                        onChange={handleChangeswitch('editreadytoship')}\n                        disabled={!(btnEdit.action && btnEdit.id == row.generatedSku)}\n                        inputProps={{ 'aria-label': 'secondary checkbox' }}\n                      />\n                  </TableCell> : null }\n                  {props.displycolumns.indexOf('Default') > -1 ? \n                  <TableCell  align=\"center\" style = {{width: 40}} component=\"th\" scope=\"row\">\n                  <Switch\n                        checked={(btnEdit.action && btnEdit.id == row.generatedSku) ? productCtx.editisdefault : row.isdefault}\n                        disabled={!(btnEdit.action && btnEdit.id == row.generatedSku)}\n                        onChange={handleChangeswitch('editisdefault')}\n                        value=\"checkedA\"\n                        inputProps={{ 'aria-label': 'secondary checkbox' }}\n                      />\n                  </TableCell> : null }\n                {props.displycolumns.indexOf('Active') > -1 ?<TableCell  style = {{width: 40}} align=\"center\">\n                       <Switch\n                        checked={row.isActive}\n                        disabled={!(btnEdit.action && btnEdit.id == row.generatedSku)}\n                       checked={(btnEdit.action && btnEdit.id == row.generatedSku) ? productCtx.editisactive : row.isActive}\n                        disabled={!(btnEdit.action && btnEdit.id == row.generatedSku)}\n                        onChange={handleChangeswitch('editisactive')}\n\n                        value=\"checkedA\"\n                        inputProps={{ 'aria-label': 'secondary checkbox' }}\n                      />\n                    </TableCell> : null \n                }\n                    {\n                  btnEdit.action && btnEdit.id == row.generatedSku ?\n                    <TableCell  style = {{width: 20}} align=\"center\">\n                      <Button onClick={(e) => DiamondSave(row.generatedSku)}><SaveIcon />\n                      </Button>\n                      <Button onClick={(e) => CancelEdit(row)}><CancelIcon />\n                      </Button>\n                    </TableCell> :\n                    <TableCell align=\"center\" style = {{width: 20}}>\n                      <Button onClick={(e) => DiamondEdit(row)}><EditIcon />\n                      </Button>\n                    </TableCell>\n                }\n              </TableRow>\n            ))}\n            {emptyRows == 0 && (\n              <TableRow style={{ height: 1 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )}\n          </TableBody>\n          <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                count={props.variants&&props.variants.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </div>\n    </Paper>\n  );\n}\n","import React from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TableHead from '@material-ui/core/TableHead';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Typography, Button, Chip, Input, CircularProgress } from '@material-ui/core';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CancelIcon from '@material-ui/icons/CancelOutlined';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { ProductContext } from '../../context';\nimport Switch from '@material-ui/core/Switch';\nimport { NetworkContext } from '../../context/NetworkContext';\n\nconst columns = [\n  { id: 'SKU', label: 'SKU' },\n  { id: 'Cost Price', label: 'Cost Price' },\n  { id: 'Cost Price Tax', label: 'Cost Price Tax' },\n  { id: 'Selling Price', label: 'Selling Price' },\n  { id: 'Selling Price Tax', label: 'Selling Price Tax' },\n  { id: 'Markup Price', label: 'Markup Price' },\n  { id: 'Markup Price Tax', label: 'Markup Price Tax' },\n  { id: 'Discount Price', label: 'Discount Price' },\n  { id: 'Discount Price Tax', label: 'Discount Price Tax' },\n  { id: 'Margin On Sale', label: 'Margin On Sale' },\n  { id: 'Discount', label: 'Discount' },\n\n  {\n    id: 'Disable',\n    label: 'Price Update',\n    align: 'center',\n    format: value => value.toFixed(2),\n  }\n];\n\nconst useStyles1 = makeStyles(theme => ({\n  root: {\n    flexShrink: 0,\n    color: theme.palette.text.secondary,\n    marginLeft: theme.spacing(2.5),\n  },\n  \n}));\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  function handleFirstPageButtonClick(event) {\n    onChangePage(event, 0);\n  }\n\n  function handleBackButtonClick(event) {\n    onChangePage(event, page - 1);\n  }\n\n  function handleNextButtonClick(event) {\n    onChangePage(event, page + 1);\n  }\n\n  function handleLastPageButtonClick(event) {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  }\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nfunction createData(name, calories, fat) {\n  return { name, calories, fat };\n}\n\n\n\nconst useStyles2 = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  table: {\n    minWidth: 500,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n  fixedTag: {\n    padding: 0,\n    '& .MuiOutlinedInput-root':{\n      padding: 0,\n    }\n  },\n  root:{\n    marginTop: theme.spacing(2)\n  },\n  table:{\n   // marginTop: theme.spacing(2)\n  },\n  button: {\n    margin: theme.spacing(0),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    width: '100%'\n  },\n  gempapper: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    width: '100%'\n  },\n  leftIcon: {\n    marginRight: theme.spacing(1),\n  },\n  rightIcon: {\n    marginLeft: theme.spacing(1),\n  },\n  iconSmall: {\n    fontSize: 20,\n  },\n}));\n\nexport default function Variants(props) {\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const { productCtx, setProductCtx} = React.useContext(ProductContext);\n  const { sendNetworkRequest } = React.useContext(NetworkContext);\n\n  const [btnEdit, setBtnEdit] = React.useState({\n    action: false,\n    pricerun: false,\n    id: ''\n  })\n  const [state, setState] = React.useState({\n    checkedA: true,\n    checkedB: true,\n  });\n\n  function handleChange(variantId) {\n    let variantslist = productCtx.variants;\n    variantslist = productCtx.variants && productCtx.variants.map((variant,index)=>{\n      if(variant.id===variantId){\n        let status = variant.isActive ? variant.isActive=false : variant.isActive= true;\n      }\n      return variant;\n    })\n    let filterVariant = variantslist&& variantslist.filter((filter_data,index)=>filter_data.id===variantId)[0];\n    let editVaraint = {\n      id:filterVariant.id,\n      isActive:filterVariant.isActive\n    }\n    let editVariants = productCtx.editVariants;\n    let editStatus = editVariants && editVariants.some((check_variant,index)=>check_variant.id===variantId) ?editVariants= editVariants && editVariants.filter((edit_variant_filter,index)=>edit_variant_filter.id!==variantId):editVariants.push(editVaraint);\n    setProductCtx({\n      ...productCtx,\n      variants:variantslist,\n      editVariants\n    })\n  };\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.variants&&props.variants.length - page * rowsPerPage);\n  // function VariantEdit(id) {\n  //   alert(id)\n  //   setBtnEdit({ ...btnEdit, id, action: true })\n  // }\n  function handleChangePage(event, newPage) {\n    setPage(newPage);\n  }\n  const handleinputChange =type => e => {\n    // const re = /^[a-zA-Z \\b]+$/;\n    // if (e.target.value === '' || re.test(e.target.value)) {\n      setProductCtx({ ...productCtx, [type]: e.target.value})\n   // }\n  }\n  function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  }\n  function CancelEdit(diamondData) {\n    setBtnEdit({ ...btnEdit, id:'', action: false })\n\n  }\n async function Skupricesync(diamondData) {\n    setBtnEdit({ ...btnEdit, id:diamondData.generatedSku, pricerun: true })\n\n    \n    let bodydata = {\n      req_product_id: diamondData.productId,\n      generatedSku:  diamondData.generatedSku\n    }\nconsole.log(JSON.stringify(bodydata))\n   await sendNetworkRequest('/productpriceupdate',{},bodydata)\n   setBtnEdit({ ...btnEdit, id:'', pricerun: false })\n\n  }\n  function DiamondEdit(diamondData) {\n    setProductCtx({\n      ...productCtx,\n      editcostprice:diamondData.costPrice,\n      editcostpricetax: diamondData.costPriceTax,\n      editsellingprice:diamondData.sellingPrice,\n      editsellingpricetax:diamondData.sellingPriceTax,\n      editmarkupprice: diamondData.markupPrice,\n      editmarkuppricetax : diamondData.markupPriceTax,\n      editdiscountprice: diamondData.discountPrice,\n      editdiscountpricetax: diamondData.discountPriceTax\n    })\n\n    setBtnEdit({ ...btnEdit, id:diamondData.generatedSku, action: true })\n\n  }\n  function DiamondSave(id){\n\n    var bodydata = {}\n      let list_data=props.variants;\n      let Skuchangedata = list_data.map((skulistdata,index)=>{\n        if(id===skulistdata.generatedSku){\n          skulistdata.costPrice = productCtx.editcostprice;\n          skulistdata.costPriceTax = productCtx.editcostpricetax;\n          skulistdata.sellingPrice =  productCtx.editsellingprice;\n          skulistdata.sellingPriceTax = productCtx.editsellingpricetax\n          skulistdata.markupPrice = productCtx.editmarkupprice\n          skulistdata.markupPriceTax = productCtx.editmarkuppricetax\n          skulistdata.discountPrice = productCtx.editdiscountprice\n          skulistdata.discountPriceTax = productCtx.editdiscountpricetax\n\n           bodydata['costPrice'] = parseFloat(productCtx.editcostprice)\n           bodydata['costPriceTax'] = parseFloat(productCtx.editcostpricetax)\n           bodydata['sellingPrice'] = parseFloat(productCtx.editsellingprice)\n           bodydata['sellingPriceTax'] = parseFloat(productCtx.editsellingpricetax)\n           bodydata['markupPrice'] = parseFloat(productCtx.editmarkupprice)\n           bodydata['markupPriceTax'] = parseFloat(productCtx.editmarkuppricetax)\n           bodydata['discountPrice'] = parseFloat(productCtx.editdiscountprice)\n           bodydata['discountPriceTax'] = parseFloat(productCtx.editdiscountpricetax)\n           bodydata['generatedSku'] = id;\n          return skulistdata;\n        }\n        return skulistdata;\n      });\n\n      sendNetworkRequest('/updateskupriceinfo', {}, bodydata)\n\n    setBtnEdit({ ...btnEdit, id:\"\", action: false })\n\n  \n}\n//   const handleoptionChange = type => (event, value) => {\n    \n//     setProductCtx({ ...productCtx, [type]: value})\n\n// }\n// const handleInputChange = type => e => {\n//   setProductCtx({ ...productCtx, [type]: e.target.value  })\n// }\n  return (\n    <Paper className={classes.root}>\n      <div className={classes.tableWrapper}>\n        <Table className={classes.table}  border={1} borderColor={\"#ddd\"} size=\"small\" stickyHeader>\n          <TableHead>\n            <TableRow>\n              {props.columns.map(column => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.name}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n\n          <TableBody>\n            {props.variants&& props.variants.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => (\n              <TableRow key={row.name}>\n                <TableCell   component=\"th\" scope=\"row\">\n                  {row.generatedSku}\n                </TableCell>\n                {props.displycolumns.indexOf('Cost Price') > -1 ? <TableCell component=\"th\" scope=\"row\">\n                {btnEdit.action && btnEdit.id == row.generatedSku ? \n                <Input\n                    className={classes.helperinput}\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    style = {{width: 40}}\n                    value={productCtx.editcostprice}\n                    id=\"productname\"\n                    error={productCtx && productCtx.error_message && productCtx.error_message.productname}\n                    name=\"productname\"\n                    label=\"Cost Price\"\n                    onChange={handleinputChange('editcostprice')}\n\n                    //onInput={keyPress.bind(this)}\n                   // onChange={handleinputChange('productname')}\n\n                   //onChange={(e)=>handleinputChange(e,'productname')}\n                  />\n                 :\n                <Typography className={classes.heading}> {row.costPrice}</Typography> \n                  } </TableCell> : null }\n                  {props.displycolumns.indexOf('Cost Price Tax') > -1 ? <TableCell component=\"th\" scope=\"row\">\n                {btnEdit.action && btnEdit.id == row.generatedSku ?\n                <Input\n                    className={classes.helperinput}\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    fullWidth\n                    value={productCtx.editcostpricetax}\n                    id=\"productname\"\n                    error={productCtx && productCtx.error_message && productCtx.error_message.productname}\n                    name=\"productname\"\n                    label=\"Cost Price Tax\"\n                    onChange={handleinputChange('editcostpricetax')}\n\n                    //onInput={keyPress.bind(this)}\n                   // onChange={handleinputChange('productname')}\n\n                   //onChange={(e)=>handleinputChange(e,'productname')}\n                  /> \n               :\n               <Typography className={classes.heading}> {row.costPriceTax} </Typography>\n                } : </TableCell> : null }\n                {props.displycolumns.indexOf('Selling Price') > -1 ? <TableCell component=\"th\" scope=\"row\">\n                {btnEdit.action && btnEdit.id == row.generatedSku ?\n                <Input\n                    className={classes.helperinput}\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    fullWidth\n                    value={productCtx.editsellingprice}\n                    id=\"productname\"\n                    error={productCtx && productCtx.error_message && productCtx.error_message.productname}\n                    name=\"productname\"\n                    label=\"Selling Price\"\n                    onChange={handleinputChange('editsellingprice')}\n\n                    //onInput={keyPress.bind(this)}\n                   // onChange={handleinputChange('productname')}\n\n                   //onChange={(e)=>handleinputChange(e,'productname')}\n                  /> :\n                  <Typography className={classes.heading}> \n                {row.sellingPrice} </Typography> \n                } </TableCell> : null }\n               \n               {props.displycolumns.indexOf('Selling Price Tax') > -1 ? <TableCell component=\"th\" scope=\"row\">\n\n                {btnEdit.action && btnEdit.id == row.generatedSku ?\n                <Input\n                    className={classes.helperinput}\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    fullWidth\n                    value={productCtx.editsellingpricetax}\n                    id=\"productname\"\n                    error={productCtx && productCtx.error_message && productCtx.error_message.productname}\n                    name=\"productname\"\n                    label=\"Selling Price Tax\"\n                    onChange={handleinputChange('editsellingpricetax')}\n\n                    //onInput={keyPress.bind(this)}\n                    //onChange={handleinputChange('productname')}\n\n                   //onChange={(e)=>handleinputChange(e,'productname')}\n                  />\n                : \n                  <Typography className={classes.heading}> \n                  {row.sellingPriceTax} </Typography> \n                  } </TableCell> : null }\n             \n             {props.displycolumns.indexOf('Markup Price') > -1 ? <TableCell component=\"th\" scope=\"row\">\n\n                {btnEdit.action && btnEdit.id == row.generatedSku ?\n\n                <Input\n                    className={classes.helperinput}\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    fullWidth\n                    value={productCtx.editmarkupprice}\n                    id=\"productname\"\n                    error={productCtx && productCtx.error_message && productCtx.error_message.productname}\n                    name=\"productname\"\n                    label=\"Markup Price\"\n                    onChange={handleinputChange('editmarkupprice')}\n\n                    //onInput={keyPress.bind(this)}\n                   // onChange={handleinputChange('productname')}\n\n                   //onChange={(e)=>handleinputChange(e,'productname')}\n                  />: \n                  <Typography className={classes.heading}> \n                  {row.markupPrice} </Typography> \n                  } </TableCell> : null }\n             \n             {props.displycolumns.indexOf('Markup Price Tax') > -1 ? <TableCell component=\"th\" scope=\"row\">\n                {btnEdit.action && btnEdit.id == row.generatedSku ?\n                <Input\n                    className={classes.helperinput}\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    fullWidth\n                    value={productCtx.editmarkuppricetax}\n                    id=\"productname\"\n                    error={productCtx && productCtx.error_message && productCtx.error_message.productname}\n                    name=\"productname\"\n                    label=\"Markup Price Tax\"\n                    onChange={handleinputChange('editmarkuppricetax')}\n\n                    //onInput={keyPress.bind(this)}\n                   // onChange={handleinputChange('productname')}\n\n                   //onChange={(e)=>handleinputChange(e,'productname')}\n                  />\n                  : \n                  <Typography className={classes.heading}> \n                  {row.markupPriceTax} </Typography> \n                  } </TableCell> : null }\n\n            {props.displycolumns.indexOf('Discount Price') > -1 ? <TableCell component=\"th\" scope=\"row\">\n                {btnEdit.action && btnEdit.id == row.generatedSku ?\n                <Input\n                    className={classes.helperinput}\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    fullWidth\n                    value={productCtx.editdiscountprice}\n                    id=\"productname\"\n                    onChange={handleinputChange('editdiscountprice')}\n\n                    error={productCtx && productCtx.error_message && productCtx.error_message.productname}\n                    name=\"productname\"\n                    label=\"Discount Price\"\n                    //onInput={keyPress.bind(this)}\n                   // onChange={handleinputChange('productname')}\n\n                   //onChange={(e)=>handleinputChange(e,'productname')}\n                  /> : \n                  <Typography className={classes.heading}> \n                  {row.discountPrice} </Typography> \n                  } </TableCell> : null }\n                {props.displycolumns.indexOf('Discount Price Tax') > -1 ? <TableCell component=\"th\" scope=\"row\">\n                {btnEdit.action  && btnEdit.id == row.generatedSku ?\n                <Input\n                    className={classes.helperinput}\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    fullWidth\n                    value={productCtx.editdiscountpricetax}\n                    onChange={handleinputChange('editdiscountpricetax')}\n\n                    id=\"productname\"\n                    error={productCtx && productCtx.error_message && productCtx.error_message.productname}\n                    name=\"productname\"\n                    label=\"Discount Price Tax\"\n                    //onInput={keyPress.bind(this)}\n                   // onChange={handleinputChange('productname')}\n\n                   //onChange={(e)=>handleinputChange(e,'productname')}\n                  /> : \n                  <Typography className={classes.heading}> \n                  {row.discountPriceTax} </Typography> \n                  } </TableCell> : null }\n             \n                  {props.displycolumns.indexOf('Margin on Sale Percentage') > -1 ?\n                <TableCell  style = {{width: 40}} component=\"th\" scope=\"row\">\n                {row.marginOnSalePercentage}\n                </TableCell> : null}\n                {props.displycolumns.indexOf('Discount') > -1 ?\n\n                <TableCell  style = {{width: 40}} component=\"th\" scope=\"row\">\n                {row.discount} \n                </TableCell> : null }\n                \n                {\n                  btnEdit.action && btnEdit.id == row.generatedSku ?\n                    <TableCell  style = {{width: 40}} align=\"center\">\n                      <Button onClick={(e) => Skupricesync(row)} size=\"small\" variant=\"outlined\" color=\"primary\">\n                      ₹ Run\n                      </Button>\n                      <Button onClick={(e) => DiamondSave(row.generatedSku)}><SaveIcon />\n                      </Button>\n                      <Button onClick={(e) => CancelEdit(row)}><CancelIcon />\n                      </Button>\n                    </TableCell> :\n                    <TableCell  style = {{width: 40}} align=\"center\">\n                      {btnEdit.pricerun && btnEdit.id == row.generatedSku ? <CircularProgress size={15}/> : <Button onClick={(e) => Skupricesync(row)} size=\"small\" variant=\"outlined\" color=\"primary\">\n                      ₹ Run\n                      </Button>\n                        } \n                      <Button  onClick={(e) => DiamondEdit(row)}><EditIcon />\n                      </Button>\n                    </TableCell>\n                }\n              </TableRow>\n            ))}\n            {emptyRows == 0 && (\n              <TableRow style={{ height: 1 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )}\n          </TableBody>\n          <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                \n                count={props.variants&&props.variants.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </div>\n    </Paper>\n  );\n}\n","import React, { useState } from 'react';\nimport { Grid, FormGroup, FormControlLabel, Checkbox, TextField, Button } from '@material-ui/core';\nimport { withRouter } from \"react-router-dom\";\nimport { ProductContext, ProductProvider } from '../../context';\nimport axios from 'axios';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { API_URL } from '../../config';\nimport { isString } from 'util';\nimport { makeStyles } from '@material-ui/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FilePond, registerPlugin } from 'react-filepond';\nimport 'filepond/dist/filepond.min.css';\nimport FilePondPluginImageExifOrientation from 'filepond-plugin-image-exif-orientation';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css';\nimport FilePondPluginImageValidateSize from 'filepond-plugin-image-validate-size';\nimport FilePondPluginFileRename from 'filepond-plugin-file-rename';\n import { NetworkContext } from '../../context/NetworkContext';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport {\n  \n  Chip\n  \n} from '@material-ui/core';\n\nregisterPlugin(FilePondPluginImageExifOrientation, FilePondPluginImagePreview, FilePondPluginImageValidateSize, FilePondPluginFileRename);\nconst useStyle = makeStyles(theme => ({\n    helperinput: {\n        '& .MuiFormHelperText-root': {\n            color: \"#e53935\",\n        }\n    },\n    variantFontSize: {\n        fontSize: '.9rem'\n    },\n    variantMarginTop:{\n        marginTop: \"20px\"\n    }\n    \n}))\nexport function CreateVariant(props) {\n    const classes = useStyle();\n    let prod_id = props.productId;\n    let colors = []\n    let purities = []\n    let diamondtypes = []\n    let oldpurity = []\n\n    const TOKEN = 'token'\n    const { productCtx, setProductCtx } = React.useContext(ProductContext);\n    const [metalcolor, setMetalcolor] = useState(productCtx.productMetalColor)\n    productCtx.oldproductMetalColor.forEach(colorobj => {\n        colors.push(colorobj.productColor)\n    })\n    productCtx.oldproductMetalPurity.forEach(colorobj => {\n        purities.push(colorobj.purity)\n        oldpurity.push(colorobj)\n    })\n\n    productCtx.oldproductDiamondTypesArray.forEach(diamondobj => {\n\n        diamondtypes.push(diamondobj.diamondType)\n        \n    })\n    \n  \n    const [variant, setVariant] = useState({\n        metal_color: [],\n        metal_purity: [],\n        diamond_color: [],\n        diamond_clarity: [],\n        variant_diamond_type:[],\n        product_images: {},\n        size: []\n\n    });\n    \n    function handleMetalColor(status_data) {\n        let color = variant.metal_color;\n        color.some(color_data => color_data.id === status_data.id) ? color = color.filter(color_fil => color_fil.id !== status_data.id) : color.push(status_data)\n        setVariant({\n            ...variant,\n            metal_color: color\n        })\n    }\n    const handleoptionChange = type => (event, value) => {\n        let color_arr = []\n        value.map((color, index) => {\n          if(productCtx.productMetalColor.some(item => item.productColor === color.productColor)){\n           }else{ let color_obj = {\n                ...color,\n                metal_color: color.productColor\n            }\n            color_arr.push(color_obj)\n          }\n        })\n        setVariant({\n            ...variant,\n            metal_color: color_arr\n        })\n\n        setProductCtx({\n            ...productCtx,\n            [type]:value\n          })\n      }\n    const sendNetworkRequest = async (url, params, data, auth = false) => {\n        alert(url)\n        url = API_URL + url;\n        console.info('URL', url, data)\n        const method = data ? 'POST' : 'GET',\n            headers = {\n                'Content-Type': 'application/json'\n            };\n        let resdata = null;\n        if (auth) {\n            const token = localStorage.getItem(TOKEN)\n            if (token) headers[\"auth\"] = token\n            else window.location = '/'\n        }\n        const response = await fetch(url, {\n            method, body: isString(data) ? data : JSON.stringify(data), headers\n        })\n\n        if (response.status < 400) {\n            resdata = await response.json();\n        } else {\n            alert(`${response.status}:${response.statusText} - Unable to complete your request to \\n${url}`)\n        }\n        return resdata;\n    }\n\n    const handleMetalPurity = type => (event, value) => {        \n\n        let purity_arr = []\n         setProductCtx({\n            ...productCtx,\n            [type]:value\n          })\n        value.map((color, index) => {\n            let color_obj = {\n                ...color,\n                purity: color.purity\n            }\n            purity_arr.push(color_obj)\n        })\n        setVariant({\n            ...variant,\n            metal_purity: purity_arr\n        })\n\n       \n    }\n    // function handleMetalPurity(status_data) {\n    //     status_data.metal_weight = \"\";\n    //     status_data.error_message = false;\n    //     // alert(JSON.stringify(status_data));\n    //     let purity = variant.metal_purity;\n    //     purity.some(purity_data => purity_data.id === status_data.id) ? purity = purity.filter(purity_fil => purity_fil.id !== status_data.id) : purity.push(status_data)\n    //     setVariant({\n    //         ...variant,\n    //         metal_purity: purity\n    //     })\n    // }\n    const diamondTypeChange = type => (event, value) => {        \n\n        let diamondtype_arr = []\n        value.map((color, index) => {\n                if(color.label)\n                {\n                    let color_obj = {\n                        ...color,\n                        diamondType: color.label\n                    }\n                    diamondtype_arr.push(color_obj)\n                }else{\n                    let color_obj = {\n                        ...color,\n                        diamondType: color.diamondType\n                    }\n                    diamondtype_arr.push(color_obj)\n                }\n                    \n        //   if(productCtx.productDiamondTypes.some(item => item.label === color.label)){\n        //    }else{ let color_obj = {\n        //         ...color,\n        //         diamondType: color.label\n        //     }\n        //     diamondtype_arr.push(color_obj)\n        //   }\n        })\n        setVariant({\n            ...variant,\n            variant_diamond_type: diamondtype_arr\n        })\n        alert(JSON.stringify(value))\n         setProductCtx({\n            ...productCtx,\n            [type]:diamondtype_arr\n          })\n    }\n\n   \n    // function diamondTypeChange(status_data){\n    //     let diamond__type = variant.variant_diamond_type;\n    //     diamond__type.some(diamond_type_data => diamond_type_data.id === status_data.id) ? diamond__type = diamond__type.filter(diamond_type_fil => diamond_type_fil.id !== status_data.id) : diamond__type.push(status_data)\n    //     setVariant({\n    //         ...variant,\n    //         variant_diamond_type: diamond__type\n    //     })\n    // }\n\n    const sizeChange = type => (event, value) => {   \n        let size_arr = []\n        value.map((color, index) => {\n          if(productCtx.productDiamondTypes.some(item => item === color)){\n           }else{ let color_obj = {\n                ...color,\n                label: color\n            }\n            size_arr.push(color_obj)\n          }\n        })\n        setVariant({\n            ...variant,\n            size: size_arr\n        })\n    }\n    // function sizeChange(status_data) {\n    //     let variantSize = variant.size;\n    //     variantSize.some(variant_size_data => variant_size_data === status_data) ? variantSize = variantSize.filter(variant_size_fil => variant_size_fil !== status_data) : variantSize.push(status_data)\n    //     setVariant({\n    //         ...variant,\n    //         size: variantSize\n    //     })\n\n    // }\n  \n    function setMetalWeightInput(e, metalPurityId) {\n        // alert(e.target.value)\n        let metalWeight = variant.metal_purity;\n        metalWeight = metalWeight && metalWeight.map((metal_weight, index) => {\n            if (metalPurityId === metal_weight.id) {\n                metal_weight.metal_weight = e.target.value;\n            }\n            return metal_weight;\n        });\n        setVariant({\n            ...variant,\n            metal_purity: metalWeight\n        })\n    }\n    function saveCreateVariant(){\n        let createVariant={\n            productId: prod_id,\n            productMetalcoloursByProductId:variant.metal_color,\n            productPuritiesByProductId:variant.metal_purity,\n            productDiamondTypes:variant.variant_diamond_type,\n            productSize:variant.size,\n            product_images:variant.product_images\n            // productImage:variant.product_images\n        }\n\n        \n        let metal_color_image_length = Object.entries(variant.product_images);\n        let metal_purity_weight = false;\n        let metal_purity = variant.metal_purity && variant.metal_purity.map((metal_weight_check)=>{\n            if(metal_weight_check.metal_weight === \"\"){\n                metal_weight_check.error_message = true;\n                metal_purity_weight = true;\n            }\n            return metal_weight_check;\n        });\n        variant['metal_purity'] = metal_purity\n        setVariant({\n            ...variant,\n            variant\n        })\n        if(metal_color_image_length.length !== variant.metal_color.length){\n            alert('Select Metal Color Images');\n        }\n        if(variant.metal_color.length>0 && variant.metal_color.length === metal_color_image_length.length || variant.metal_purity.length>0 && metal_purity_weight===false || variant.size.length>0 || variant.variant_diamond_type.length>0 ){\n            let createVariants = productCtx.createVariantList;\n            let editVariants = productCtx.editVariants;\n            let variants = productCtx.variants;\n            let productImages = productCtx.productImages;\n            productImages = [...productImages,variant.product_images];\n            createVariants.push(createVariant);\n            let params = {\n                method:'POST',\n                headers: { \n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(createVariant)\n            }\n          \n            \n        }else{\n            alert('please fill the Create variant');\n        }\n    }\n    function backToProductAttribute(){\n        props.changeVariant();\n    }\n    async function uploadimagetoserver(bodaydata, imageposition, imagecolor, uploadtype) {\n        let prodimages = variant.product_images;\n        // if(true)\n        // {\n        var prodid = prod_id;\n        let imagecolourobj = variant.product_images[imagecolor];\n        var imagecount = 1;\n        if (imagecolourobj) {\n            imagecount = imagecolourobj.length + 1;\n        }\n        \n  \n        let imagename = (prodid + \"_\" + (imagecount) + imagecolor.charAt(0));\n        let responsedata = await sendNetworkRequest('/uploadimage', {}, { image: bodaydata.fileExtension, filename: imagename, product_id: prodid }, false)\n        var returnData = responsedata && responsedata.data && responsedata.data.returnData;\n        var signedRequest = returnData && returnData.signedRequest;\n        var url = returnData && returnData.url;\n        console.log(\"responseurl\" + url);\n        var filepathname = returnData && returnData.filepath;\n        var options = {\n            headers: {\n                'Content-Type': bodaydata.fileExtension,\n                'Access-Control-Allow-Origin': '*'\n            }\n        };\n\n        if (imagecolourobj) {\n            const imageobj = {\n                \"name\": (prodid + \"_\" + (imagecolourobj.length + 1) + imagecolor.charAt(0)),\n                \"position\": imageposition,\n                \"color\": imagecolor,\n                \"image_url\": filepathname,\n                \"url\": 'https://s3.ap-south-1.amazonaws.com/styloribaseimages/' + filepathname\n            }\n            if (uploadtype === 'edit') {\n                imagecolourobj[imageposition] = imageobj;\n\n            } else {\n                imagecolourobj.push(imageobj)\n\n            }\n            prodimages[imagecolor] = imagecolourobj;\n\n        } else {\n            const imageobj = {\n                \"name\": (prodid + \"_1\" + imagecolor.charAt(0)),\n                \"position\": imageposition,\n                \"color\": imagecolor,\n                \"image_url\": filepathname,\n                \"url\": 'https://s3.ap-south-1.amazonaws.com/styloribaseimages/' + filepathname\n            }\n            imagecolourobj = [];\n            imagecolourobj.push(imageobj)\n        }\n        prodimages[imagecolor] = imagecolourobj;\n        setVariant({ ...variant, product_images: prodimages })\n        // setFiles([])\n        // }\n\n        await axios.put(signedRequest, bodaydata.file, options)\n    }\n   \n    return (\n        <Grid container  spacing={2} >\n            <Grid item xs={6} sm={6} md={6} lg={6} >\n            <Autocomplete\n                    multiple\n                    id=\"free-solo-2-demo\"\n                    fullWidth\n                    margin=\"dense\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.productColor}\n                    getOptionDisabled={option => colors.indexOf(option.productColor) > -1 }\n                    defaultValue={productCtx.oldproductMetalColor}\n                    options={productCtx.masterData.metalcolour}\n                    value={productCtx.productMetalColor}\n                    onChange={handleoptionChange('productMetalColor')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.productColor}  {...getTagProps({ index })} disabled={colors.indexOf(option.productColor) > -1}  />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Metal Colours\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n            </Grid>\n                \n            <Grid item xs={6} sm={6} md={6} lg={6}>\n                    \n                      \n                        {/* <Grid item>\n                            <FormGroup row>\n                                {\n                                    productCtx.masterData && productCtx.masterData.metalpurity.map((data, index) => (\n\n                                        productCtx.productMetalColor && productCtx.productMetalPurity.some((prod_metal_purity) => prod_metal_purity.purity === data.name) ?\n                                            <FormControlLabel\n                                                disabled\n                                                control={\n                                                    <Checkbox checked={true} value=\"checkedA\" />\n                                                }\n                                                label={data.name}\n                                            /> :\n                                            <FormControlLabel\n                                                control={\n                                                    <Checkbox checked={variant.metal_purity && variant.metal_purity.some(met_purity => met_purity.id == data.id) ? true : false} onChange={() => handleMetalPurity(data)} value=\"checkedA\" />\n                                                }\n                                                label={data.name}\n                                            />\n\n                                    ))\n                                }\n                            </FormGroup>\n                            {\n                                variant.metal_purity && variant.metal_purity.map(metal_purity => (\n                                    <TextField\n                                        className={classes.helperinput}\n                                        style={{ width: \"124px\" }}\n                                        variant=\"outlined\"\n                                        margin=\"dense\"\n                                        fullWidth\n                                        type=\"number\"\n                                        value={metal_purity.metal_weight}\n                                        id=\"metal_weight\"\n                                        error={metal_purity && metal_purity.error_message }\n                                        name=\"metal_weight\"\n                                        label={`Metal Weight${metal_purity.name}`}\n                                        onChange={(e) => setMetalWeightInput(e, metal_purity.id)}\n                                    />\n                                ))\n                            }\n                        </Grid>\n                     */}\n\n                    <Autocomplete\n                    multiple\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    margin=\"dense\"\n                    getOptionLabel={option => option.name}\n                    getOptionDisabled={option => purities.indexOf(option.name) > -1 }\n                    defaultValue={productCtx.oldproductMetalPurity}\n                    options={productCtx.masterData.metalpurity}\n                    value={productCtx.productMetalPurity}\n                    onChange={handleMetalPurity('productMetalPurity')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.purity}  {...getTagProps({ index })} disabled={purities.indexOf(option.purity) > -1}  />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Metal Purity\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n\n{\n                                productCtx.productMetalPurity && productCtx.productMetalPurity.map(metal_purity => (\n                                    <TextField\n                                        className={classes.helperinput}\n                                        style={{ width: \"100px\", marginLeft: \"8px\" }}\n                                        variant=\"outlined\"\n                                        margin=\"dense\"\n                                        fullWidth\n                                        type=\"number\"\n                                        value={metal_purity.metal_weight}\n                                        id=\"metal_weight\"\n                                        error={metal_purity && metal_purity.error_message }\n                                        name=\"metal_weight\"\n                                        label={`Weight ${metal_purity.purity}`}\n                                        onChange={(e) => setMetalWeightInput(e, metal_purity.id)}\n                                    />\n                                ))\n                            }\n                </Grid>\n\n            <Grid item  xs={6} sm={6} md={6} lg={6}>\n                            <Autocomplete\n                    multiple\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    getOptionDisabled={option => diamondtypes.indexOf(option.label) > -1 }\n                    defaultValue={productCtx.oldproductDiamondTypesArray}\n                    options={productCtx.masterData.diamondtypes}\n                    value={productCtx.productDiamondTypesArray ? productCtx.productDiamondTypesArray : [] }\n                    onChange={diamondTypeChange('productDiamondTypesArray')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.diamondType} {...getTagProps({ index })}  disabled={diamondtypes.indexOf(option.diamondType) > -1}/>\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Diamond Types\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n\n                              \n                           \n                </Grid>\n\n                <Grid item  xs={6} sm={6} md={6} lg={6}>\n                {productCtx.variant_size && productCtx.variant_size.length > 0 ?  <Autocomplete\n                    multiple\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    fullWidth\n                    getOptionLabel={option => option}\n                    options={productCtx.productVariantSize}\n                    value={productCtx.variant_size}\n                    onChange={sizeChange('productSizes')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option} {...getTagProps({ index })} />\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Sizes\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    /> : null }\n                </Grid>\n\n\n                {/* {\n                    productCtx.diamondlist && productCtx.diamondlist.length>0 ?<Grid container className={classes.variantMarginTop}>\n                    <Grid item>\n                       \n                        <Grid item>\n                            <FormGroup row>\n                            <Autocomplete\n                    multiple\n                    id=\"free-solo-2-demo\"\n                    className={classes.fixedTag}\n                    getOptionLabel={option => option.label}\n                    options={productCtx.masterData.diamondtypes}\n                    defaultValue={productCtx.productDiamondTypes}\n                    onChange={handleoptionChange('productMetalColor')}\n                    renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                    <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })}  disabled={index < productCtx.productMetalColor.length}/>\n                    ))\n                    }\n                    renderInput={params => (\n                    <TextField\n                    {...params}\n                    label=\"Diamond Types\"\n                    margin=\"dense\"\n                    variant=\"outlined\"\n                    fullWidth\n                    InputProps={{ ...params.InputProps, type: 'search' }}\n                    />\n                    )}\n                    />\n\n                              \n                            </FormGroup>\n                        </Grid>\n                    </Grid>\n                </Grid> : ''\n                } */}\n                \n            <Grid container>\n                {variant.metal_color === undefined ? null : variant.metal_color.map((value, index) => (\n                    <Grid xs={12} container spacing={1} item>\n                        <Grid xs={12} item>\n\n                            <Typography component=\"h6\" variant=\"h6\" align=\"left\">\n                                {value.productColor}\n                            </Typography>\n                        </Grid>\n                        <Grid xs={12} sm={12} md={12} item>\n                            <FilePond\n                                allowImageValidateSize\n                                imageValidateSizeMinWidth=\"2400\"\n                                imageValidateSizeMinHeight=\"2400\"\n                                imageValidateSizeMeasure={(file) => new Promise((resolve, reject) => {\n\n                                })}\n                                labelIdle=\"Upload Image\"\n                                allowMultiple={true}\n                                //files = {files}\n                                onupdatefiles={fileItem => {\n                                    // Set currently active file objectsfiles to this.state\n\n                                }}\n                                onaddfile={(error, fileItem) => {\n                                    uploadimagetoserver(fileItem, index, value.name, \"add\")\n                                }}\n                                onremovefile={(error, fileItem) => {\n\n                                }}\n                                fileRenameFunction={\n                                    (file) => new Promise(resolve => {\n                                        var prodid = prod_id;\n                                        let imagecolourobj = variant.product_images[value.name];\n                                        var imagecount = 1;\n                                        if (imagecolourobj) {\n                                            imagecount = imagecolourobj.length + 1;\n                                        }\n                                        let imagename = (prodid + \"_\" + (imagecount) + value.name.charAt(0)) + file.extension;\n                                        resolve(imagename)\n\n                                    })\n                                }\n                            >\n                            </FilePond>\n                        </Grid>\n\n                    </Grid>\n                ))}\n            </Grid>\n            { <Grid container style={{display:\"flex\",justifyContent:\"center\", marginTop: \"16px\"}}>\n                    <Grid item >\n                <Button color=\"primary\" variant=\"contained\" onClick={(e) => saveCreateVariant()}>\n                Save\n                </Button>\n                </Grid>\n                <Grid item >\n                {/* <Button  style={{background: \"#ffffff\",marginLeft:\"16px\"}} variant=\"contained\" onClick={(e) => backToProductAttribute()}>\n                Back\n                </Button> */}\n                </Grid>\n            </Grid> }\n        </Grid>\n    )\n}\nexport default CreateVariant;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, Grid } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport './table.css'\n\n\n\nconst useStyles = makeStyles(theme => ({\n    typography: {\n        padding: theme.spacing(2),\n    },\n    conatainerRow:{\n        width:\"300px\",\n        color:\"#6f6f6f\",\n        display: \"grid\",\n    padding: \"16px 24px\",\n    maxHeight:\" 256px\",\n    fontSize:\"9px\",\n    overflowX: \"visible\",\n    overflowY: \"scroll\",\n    gridColumnGap: \"24px\",\n    gridTemplateColumns: \"repeat(2, 1fr)\",\n\n    [theme.breakpoints.up(\"sm\")]: {\n        width:\"500px\",\n        color:\"#6f6f6f\",\n        display: \"grid\",\n    padding: \"16px 24px\",\n    maxHeight:\" 270px\",\n    fontSize:\"14px\",\n    overflowX: \"visible\",\n    overflowY: \"scroll\",\n    gridColumnGap: \"20px\",\n    gridTemplateColumns: \"repeat(2, 1fr)\"\n    }\n\n    }\n}));\n\n\n\nexport default function Columns(props) {\n    const classes = useStyles();\n\n    const checkboxrow = props.columns\n    const [columns,setColumns ] = React.useState({\n        listOfValue:checkboxrow\n    })\n    const [showcolumns,setshowColumns ] = React.useState()\n    \n    function stateChange(id){\n        let listOfValue = columns.listOfValue.map((data,index)=>{\n            if(id===data.id){\n                data.isActive = data.isActive?false:true;\n            }\n            return data;\n        })\n        setColumns({\n            listOfValue\n        })\n    }\n    function resetButton(){\n        let listOfValue = columns.listOfValue.map((data,index)=>{\n            if(!data.disabled)\n            {\n                data.isActive = false;\n            }    \n            \n            return data;\n        })\n        setColumns({\n            listOfValue\n        })\n    }\n    function saveaction(){\n        // let listOfValue = columns.listOfValue.map((data,index)=>{\n        //     if(data.isActive){\n        //               }\n        //               return data;  \n\n        // })\n        let columnnames = []\n        columns.listOfValue.forEach(element => {\n            if(element.isActive)\n            {\n                columnnames.push(element)\n            }\n        });\n        props.selectcolumnfilter(columnnames,props.displytype);\n        props.columnclose()\n    }\n    // const lists = columns.listOfValue.map((head) =>\n    //     (\n    //         <Grid conatiner>\n    //             <Grid item xs={4}><Checkbox\n    //                 value=\"secondary\"\n    //                 color=\"primary\"\n    //                 inputProps={{ 'aria-label': 'secondary checkbox' }}\n    //                 checked = {head.isActive}\n    //                 onChange = {()=>stateChange(head.id)}\n                \n    //             />\n    //                 <h3 style={{ display: \"inline-block\", fontWeight: \"500\" }}>{head}</h3>\n    //             </Grid>\n    //         </Grid>\n    //     )\n\n    // );\n\n   \n\n\n\n\n    return (\n        \n         <div style={{ maxHeight: \"420px\"}}>\n            {/* <Typography style={{ fontWeight: \"400\", color: \"#6f6f6f\", width: \"90%\", margin: \"6px auto\" }} className={classes.typography} variant=\"h5\">(number) columns selected out of (total number)</Typography> */}\n            <Grid style={{ height: \"270px\", borderBottom: \"1px solid #ddd\", width: \"100%\", margin: \"auto\", paddingTop: \"5px\", paddingBottom: \"10px\" }}>\n                <Grid conatiner>\n              <Grid item   className={classes.conatainerRow}>\n                   {columns.listOfValue.map((head) =><Grid container>\n                        <Checkbox\n                            color=\"primary\"\n                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                               checked = {head.isActive}\n                               disabled = {head.disabled}\n                            onChange = {()=>stateChange(head.id)}\n                            \n                        />\n                   <h3 style={{fontWeight: \"500\" }}>{head.name}</h3></Grid>)}\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid style={{ display: \"flex\", justifyContent: \"space-between\", margin: \"10px auto\", width: \"90%\" }}>\n                <Grid>\n                    <Button size=\"large\" onClick={()=>resetButton()}>RESET</Button>\n                </Grid>\n                <Grid style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                    <Button size=\"small\" onClick={()=>props.columnclose()}>cancel</Button>\n                    <Button  size=\"small\" color=\"primary\" onClick={()=>saveaction()}  backgroundColor=\"secondary\" size=\"large\" variant=\"contained\" className={classes.margin}>\n                        SAVE\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n        \n    );\n}\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Columns from './columns';\nimport Popover from '@material-ui/core/Popover';\nimport './table.css';\n\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        color:\"#06847B\",\n        border: \"1px solid #7bbcb7\",\n        '&:hover':{\n            backgroundColor: \"rgba(6, 132, 123, 0.1)\",\n            border: \"1px solid #06847B\",\n        }\n      },\n\n}));\n\nfunction SortHeader(props){\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [options, setOptions] = React.useState(props.columnnames);\n\n    const handleClick = event => {\n        setAnchorEl(event.currentTarget);\n      };\n      const handleClose = () => {\n        setAnchorEl(false);\n      };\n      const open = Boolean(anchorEl);\n      const id = open ? 'simple-popover' : undefined;\n    \n     \n        return(\n            <Grid container lg={12} md={12} sm={12} xs={12} style={{display:\"flex\",justifyContent:\"space-between\"}}>\n                <Grid xl={8} lg={9} md={8} sm={7} xs={12}>\n                     <h4 className=\"products\">Variants Table</h4>   \n                </Grid>\n                <Grid container xl={4} lg={3} md={4} sm={5} xs={12} style={{display: 'flex', justifyContent: 'flex-end'}}>\n                    <Grid className=\"column-btn\" lg={5} md={5} sm={5} xs={5} style={{display: 'flex', justifyContent: 'flex-end'}}>\n                        <Button className=\"product\" size=\"small\" id=\"one\" color=\"primary\" backgroundColor=\"secondary\"  onClick={handleClick} variant=\"outlined\"  color=\"primary\" style={{fontSize:\"15px\",padding:\"6px 6px\"}}>\n                            COLUMNS<ArrowDownwardIcon fontSize=\"inherit\" />\n                        </Button>\n                        <Popover\n                            id={id}\n                            open={open}\n                            anchorEl={anchorEl}\n                            onClose={handleClose}\n                            anchorOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'center',\n                            }}\n                            transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'center',\n                            }}\n                        >\n                            <Columns columns={options} selectcolumnfilter={props.getColumnnames} displytype={props.displytype} columnclose={handleClose}/>\n                        </Popover>\n\n\n\n                    </Grid>\n                    {/* <Grid className=\"column-btn\" lg={7} md={7} sm={7} xs={7}>\n                        <Button id=\"create\"  className=\"product\" variant=\"contained\" size=\"large\" color=\"primary\" backgroundColor=\"secondary\">\n                        CREATE PRODUCT\n                        </Button>\n                    </Grid> */}\n                </Grid>\n            </Grid>\n        ) \n\n}\nexport default SortHeader","import React, { useEffect, useContext, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { Grid, TextField, Button, Fab } from '@material-ui/core';\nimport { Input } from '../../components/Input.js'\nimport { ProductContext, ProductProvider } from '../../context';\nimport { withRouter } from \"react-router-dom\";\nimport DiamondDetails from './DiamondDetails';\nimport GemstoneDetails from './GemstoneDetails';\nimport Variants from './Variants';\nimport Skupricing from './Skupricing';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport { productCategory } from '../../services/mapper';\nimport { useQuery } from 'react-apollo';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport \"../Productupload/Productupload.css\";\nimport AddIcon from '@material-ui/icons/Add';\nimport { PRODUCTEDIT, PRODUCTDIAMONDTYPES } from '../../graphql/query';\nimport CreateVariant from './CreateVariant';\nimport { API_URL, GRAPHQL_DEV_CLIENT } from '../../config';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { NetworkContext } from '../../context/NetworkContext';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SortHeader from './Components/SortHeader';\nimport columnnames from './columnnames.json';\n\nimport {\n  Card,\n  CardHeader,\n  Chip,\n  CardContent,\n  Divider,\n  Switch,\n  RadioGroup,\n  Radio,\n  FormLabel,\n  FormControlLabel,\n  Checkbox\n} from '@material-ui/core';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyle = makeStyles(theme => ({\n  helperinput: {\n    '& .MuiFormHelperText-root': {\n      color: \"#e53935\",\n    }\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: 'bottom',\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: 'center',\n  },\n  column: {\n    flexBasis: '33.33%',\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: theme.spacing(1, 2),\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  },\n}))\n\nexport function Component(props) {\n  const [open, setOpen] = React.useState(false);\n  const [expand, setExpand] = React.useState(false);\n  const [varientcolumns, setVarientcolumns] = React.useState(columnnames.defaultvarients);\n  const [displycolumns, setDisplycolumns] = React.useState(columnnames.defaultvarientnames);\n  const [pricingcolumns, setPricingcolumns] = React.useState(columnnames.defaultpricing);\n  const [displypricingcolumns, setDisplypricingcolumns] = React.useState(columnnames.defaultpricingnames);\n\n  \n  const { sendNetworkRequest } = React.useContext(NetworkContext);\n  const [snackMessage,setSnackMessage] = React.useState({\n    message:\"\",\n    severity:\"\"\n  });\n  const handleClick = () => {\n    setOpen(true);\n  };\n  \n  const handleChange = panel => (event, isExpanded) => {\n    createVariant()\n    setExpand(isExpanded ? true : false);\n    \n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const { productCtx, setProductCtx } = useContext(ProductContext);\n  const [state, setstate] = useState({\n    create_variant: false,\n    duplicate_productName: \"\"\n  })\n  let prod_id = props.location.pathname.split('/')[2];\n  const classes = useStyle();\n  function keyPress(evt) {\n    const productname = (evt.target.validity.valid) ? evt.target.value : productCtx.productname;\n    setProductCtx({ ...productCtx, productname })\n  }\n  function changeVariant() {\n    setstate({ ...state, create_variant: false })\n  }\n  const handleoptionChange = type => (event, value) => {\n      setProductCtx({ ...productCtx, [type]: value})\n}\n\nconst handleinputChange =type => e => {\n  const re = /^[a-zA-Z \\b]+$/;\n  if (e.target.value === '' || re.test(e.target.value)) {\n    setProductCtx({ ...productCtx, [type]: e.target.value})\n  }\n}\n// const handleinputChange = type => (event, value) => {\n//   alert(event.target.value)\n//       setProductCtx({ ...productCtx, [type]: value})\n// }\nfunction getColumnnames(columnnames,displytype) {\n  let displycolumns = [];\n    columnnames.forEach(element => {\n      displycolumns.push(element.name)\n    })\n  if(displytype === 1)\n  {\n    setDisplycolumns(displycolumns)\n    setVarientcolumns(columnnames)\n  }else{\n    setPricingcolumns(columnnames)\n    setDisplypricingcolumns(displycolumns)\n  }\n    \n   \n\n}\n  function createVariant() {\n    let diamondTypesArray = [];\n    // let diamondClaritySku = [];\n    productCtx.diamondlist && productCtx.diamondlist.map(diamond_type => {\n      let diamond_data = {\n        id: diamond_type.id,\n        diamondType: diamond_type.diamondType\n      }\n      let status = diamondTypesArray.some(store_dia => store_dia.diamondType == diamond_type.diamondType) ? '' : diamondTypesArray.push(diamond_data);\n      return diamond_type;\n    })\n    productCtx['productDiamondTypesArray'] = diamondTypesArray\n    productCtx['oldproductDiamondTypesArray'] = diamondTypesArray\n\n    setProductCtx({\n      ...productCtx,\n      productCtx\n    })\n    let params = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ query: PRODUCTDIAMONDTYPES })\n    }\n    fetch(GRAPHQL_DEV_CLIENT, params)\n      .then(res => res.json())\n      .then(diamondtypesData => {\n        console.log(diamondtypesData.data.allMasterDiamondTypes.nodes, 'diamondtypesdata');\n        setProductCtx({\n          ...productCtx,\n          productDiamondTypes: diamondtypesData.data.allMasterDiamondTypes.nodes\n        })\n      })\n      .catch(console.error)\n\n    //setstate({ ...state, create_variant: true })\n  }\nasync function saveProductEditItem() {\n    let productEditItem = {\n      productId: prod_id,\n      productName: productCtx.productname,\n      themes: productCtx.themes,\n      styles: productCtx.prod_styles,\n      occassions : productCtx.occassions,\n      collections : productCtx.collections,\n      stonecount : productCtx.stonecount,\n      stonecolour : productCtx.stonecolour,\n      gender : productCtx.product_gender\n      // productDiamondsByProductSku: productCtx.editDiamondLists,\n      // productGemstonesByProductSku: productCtx.editGemstoneLists,\n      // transSkuListsByProductId: productCtx.editVariants,\n      // productImages:productCtx.productImages,\n      // createVariants: productCtx.createVariantList\n    }\n  let response =  await sendNetworkRequest('/editproduct', {}, productEditItem)\n\n    console.log(\"************\")\n    console.log(JSON.stringify(productEditItem))\n    if (response) {\n      setSnackMessage({\n        ...snackMessage,\n        message:\"This is successfully saved\",\n        severity:\"success\"\n      })\n      handleClick();\n      console.log(JSON.stringify(productEditItem))\n      // setTimeout(()=>{  window.location='/productlist'},1000)\n    } else {\n      setSnackMessage({\n        ...snackMessage,\n        message:\"You are not edit product\",\n        severity:\"info\"\n      })\n      handleClick();\n    }\n    // const opts = {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   body: JSON.stringify(productEditItem)\n    // }\n    // fetch(GRAPHQL_DEV_CLIENT,opts)\n    // .then(res=>res.json())\n    // .then(fetchValue=>{\n\n    // })\n    // .catch(console.error)\n    console.log(JSON.stringify(productEditItem))\n    // props.history.push('/productlist')\n  }\n\n  const handledisableproduct = name => async event => {\n    setProductCtx({ ...productCtx, [name]: event.target.checked });\n    let bodycontent = {\n      \"productid\": prod_id,\n      \"isactive\" : event.target.checked\n    }\n    let response =  await sendNetworkRequest('/disableproduct', {}, bodycontent)\n\n    console.log(\"************\")\n    console.log(JSON.stringify(bodycontent))\n    if (response) {\n      setSnackMessage({\n        ...snackMessage,\n        message:\"This is successfully saved\",\n        severity:\"success\"\n      })\n      handleClick();\n        // setTimeout(()=>{  window.location='/productlist'},1000)\n    } else {\n      setSnackMessage({\n        ...snackMessage,\n        message:\"You are not edit product\",\n        severity:\"info\"\n      })\n      handleClick();\n    }\n  };\n\n  function Skupricesync(diamondData) {\n    let bodydata = {\n      req_product_id: diamondData\n    }\n    sendNetworkRequest('/productpriceupdate',{},bodydata)\n\n  }\n  function backProductList() {\n    window.location='/productlist';\n  }\n  useEffect(() => {\n    const url = GRAPHQL_DEV_CLIENT;\n    const opts = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ query: PRODUCTEDIT, variables: { \"productId\": prod_id }  })\n    };\n    // console.log(\"helo\",setProductCtx)\n    fetch(url, opts)\n      .then(res => res.json())\n      .then(fatchvalue => {\n        var genders = fatchvalue.data.productListByProductId.gender\n        var size_obj = fatchvalue.data.productListByProductId.sizeVarient\n        let sizes_arr = []\n        if(size_obj)\n        {\n          let sizes = size_obj.split(',')\n          sizes.forEach(element => {\n            \n            sizes_arr.push(element)\n          });\n        }\n        genders = genders.split(',')\n        let gender_arr = []\n        genders.forEach(element => {\n          let gender_obj = {\n            label: element\n          }\n          gender_arr.push(gender_obj)\n        });\n        setProductCtx({\n          ...productCtx,\n          productname: fatchvalue.data.productListByProductId.productName,\n          isactive: fatchvalue.data.productListByProductId.isactive,\n          product_type: fatchvalue.data.productListByProductId.productType,\n          product_categoy: fatchvalue.data.productListByProductId.productCategory,\n          gemstonelist: fatchvalue.data.productListByProductId.productGemstonesByProductSku.nodes,\n          diamondlist: fatchvalue.data.productListByProductId.productDiamondsByProductSku.nodes,\n          variants: fatchvalue.data.productListByProductId.transSkuListsByProductId.nodes,\n          product_images: fatchvalue.data.productListByProductId.productImagesByProductId.nodes,\n          productMetalColor: fatchvalue.data.productListByProductId.productMetalcoloursByProductId.nodes,\n          oldproductMetalColor: fatchvalue.data.productListByProductId.productMetalcoloursByProductId.nodes,\n          productMetalPurity: fatchvalue.data.productListByProductId.productPuritiesByProductId.nodes,\n          oldproductMetalPurity: fatchvalue.data.productListByProductId.productPuritiesByProductId.nodes,\n          variant_size: sizes_arr,\n          productmaterials: fatchvalue.data.productListByProductId.productMaterialsByProductSku.nodes,\n          vendorcode:fatchvalue.data.productListByProductId.vendorCode,\n          product_gender:gender_arr,\n          themes: fatchvalue.data.productListByProductId.productThemesByProductId.nodes,\n          prod_styles: fatchvalue.data.productListByProductId.productStylesByProductId.nodes,// productDiamondColor:diamondTypesArray,\n          occassions:fatchvalue.data.productListByProductId.productOccassionsByProductId.nodes,\n          collections:fatchvalue.data.productListByProductId.productCollectionsByProductId.nodes,\n          stonecount:fatchvalue.data.productListByProductId.productStonecountsByProductId.nodes,\n          stonecolour:fatchvalue.data.productListByProductId.productStonecolorsByProductId.nodes\n          // productDiamondClarity:diamondClaritySku,\n        })\n        setstate({\n          ...state,\n          duplicate_productName: JSON.parse(JSON.stringify(fatchvalue.data.productListByProductId.productName))\n        })\n\n      })\n      .catch(console.error)\n  }, [])\n  return (\n    state.create_variant ? <CreateVariant productMetalColor={productCtx.productMetalColor} productMetalPurity={productCtx.productMetalPurity} changeVariant={changeVariant} productId={prod_id} /> :\n      <Grid container>\n             <React.Fragment>\n        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity={snackMessage.severity}>\n          {snackMessage.message}\n        </Alert>\n      </Snackbar>\n        </React.Fragment>\n          <Grid item container spacing={1} >\n          <Grid item xs={12} sm={12} md={3} lg={3} spacing={2} style={{padding:\"15px\",  backgroundColor: \"#FFFFFF\" }}>\n              \n              \n              <TextField\n                    className={classes.helperinput}\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    fullWidth\n                    pattern=\"[a-zA-Z]*\"\n                    value={productCtx.productname}\n                    id=\"productname\"\n                    error={productCtx && productCtx.error_message && productCtx.error_message.productname}\n                    name=\"productname\"\n                    label=\"Product Name\"\n                    //onInput={keyPress.bind(this)}\n                    onChange={handleinputChange('productname')}\n\n                   //onChange={(e)=>handleinputChange(e,'productname')}\n                  />\n                <TextField\n                  className={classes.helperinput}\n                  variant=\"outlined\"\n                  margin=\"dense\"\n                  fullWidth\n                  value={productCtx.product_categoy}\n                  id=\"product_category\"\n                  InputProps={{\n                    readOnly: true,\n                  }}\n                  error={productCtx && productCtx.error_message && productCtx.error_message.product_categoy}\n                  name=\"product_category\"\n                  label=\"Product Category\"\n  \n                />\n                <TextField\n                  className={classes.helperinput}\n                  variant=\"outlined\"\n                  margin=\"dense\"\n                  fullWidth\n                  value={productCtx.product_type}\n                  id=\"product_type\"\n                  error={productCtx && productCtx.error_message && productCtx.error_message.product_type}\n                  InputProps={{\n                    readOnly: true,\n                  }}\n                  name=\"product_type\"\n                  label=\"Product Type\"\n  \n                />\n                  <Input\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        label=\"Vendor Name\"\n                        fullWidth\n                        className={classes.helperinput}\n                        value={productCtx.vendorcode}\n                        id=\"productvendorcode\"\n                        InputProps={{\n                          readOnly: true,\n                        }}\n                        name=\"Vendor Name\"\n                        />\n  \n                 <TextField\n                  className={classes.helperinput}\n                  variant=\"outlined\"\n                  margin=\"dense\"\n                  fullWidth\n                  defaultValue={productCtx.productname}\n                  id=\"seo_text\"\n                  error={productCtx && productCtx.error_message && productCtx.error_message.productname}\n                  \n                  name=\"seo_text\"\n                  label=\"Minimum Order Quantity\"\n  \n                /> \n               <TextField\n                  className={classes.helperinput}\n                  variant=\"outlined\"\n                  margin=\"dense\"\n                  fullWidth\n                  defaultValue={productCtx.productname}\n                  id=\"url\"\n                  error={productCtx && productCtx.error_message && productCtx.error_message.productname}\n                  \n                  name=\"url\"\n                  label=\"Maximum Order Quantity\"\n                /> \n                    <Autocomplete\n                      multiple\n                      id=\"free-solo-2-demo\"\n                      disabled\n                      className={classes.fixedTag}\n                      value={productCtx.productmaterials}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option.materialName} {...getTagProps({ index })} />\n                      ))\n                      }\n                      renderInput={params => (\n                      <TextField\n                      {...params}\n                      label=\"Product Materials\"\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                      InputProps={{ ...params.InputProps, readOnly: true, type: 'search' }}\n                      />\n                      )}\n                      />\n                 <Autocomplete\n                      multiple\n                      id=\"free-solo-2-demo\"\n                      disabled\n                      className={classes.fixedTag}\n                      value={productCtx.productMetalColor}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option.productColor} {...getTagProps({ index })} />\n                      ))\n                      }\n                      renderInput={params => (\n                      <TextField\n                      {...params}\n                      label=\"Metal Colour\"\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                      InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                      )}\n                      />\n                      <Autocomplete\n                      multiple\n                      id=\"free-solo-2-demo\"\n                      disabled\n                      className={classes.fixedTag}\n                      value={productCtx.productMetalPurity}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option.purity} {...getTagProps({ index })} />\n                      ))\n                      }\n                      renderInput={params => (\n                      <TextField\n                      {...params}\n                      label=\"Metal Purity\"\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                      InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                      )}\n                      />\n  \n                    <Autocomplete\n                      multiple\n                      id=\"free-solo-2-demo\"\n                      className={classes.fixedTag}\n                      value={productCtx.product_gender}\n                      getOptionLabel={option => option.label}\n                      onChange={handleoptionChange('product_gender')}\n                      options={productCtx.masterData.gender}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option.label} {...getTagProps({ index })} />\n                      ))\n                      }\n                      renderInput={params => (\n                      <TextField\n                      {...params}\n                      label=\"Gender\"\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                      InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                      )}\n                      />\n  \n                <Autocomplete\n                      multiple\n                      id=\"free-solo-2-demo\"\n                      className={classes.fixedTag}\n                      getOptionLabel={option => option.label}\n                      defaultValue={productCtx.themes}\n                      options={productCtx.masterData.themes}\n                      value={productCtx.themes}\n                      onChange={handleoptionChange('themes')}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option.themeName} {...getTagProps({ index })} />\n                      ))\n                      }\n                      renderInput={params => (\n                      <TextField\n                      {...params}\n                      label=\"Themes\"\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                      InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                      )}\n                      />\n                      <Autocomplete\n                      multiple\n                      id=\"free-solo-2-demo\"\n                      className={classes.fixedTag}\n                      getOptionLabel={option => option.label}\n                      defaultValue={productCtx.prod_styles}\n                      options={productCtx.masterData.styles}\n                      onChange={handleoptionChange('prod_styles')}\n                      value={productCtx.prod_styles}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option.styleName} {...getTagProps({ index })} />\n                      ))\n                      }\n                      renderInput={params => (\n                      <TextField\n                      {...params}\n                      label=\"Styles\"\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                      InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                      )}\n                      />\n  \n                    <Autocomplete\n                      multiple\n                      id=\"free-solo-2-demo\"\n                      className={classes.fixedTag}\n                      value={productCtx.occassions}\n                      getOptionLabel={option => option.label}\n                      defaultValue={productCtx.occassions}\n                      options={productCtx.masterData.occasions}\n                      onChange={handleoptionChange('occassions')}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option.occassionName} {...getTagProps({ index })} />\n                      ))\n                      }\n                      renderInput={params => (\n                      <TextField\n                      {...params}\n                      label=\"Occasions\"\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                      InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                      )}\n                      />\n              <Autocomplete\n                      multiple\n                      id=\"free-solo-2-demo\"\n                      className={classes.fixedTag}\n                      value={productCtx.collections}\n                      getOptionLabel={option => option.label}\n                      defaultValue={productCtx.collections}\n                      options={productCtx.masterData.collections}\n                      onChange={handleoptionChange('collections')}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option.collectionName} {...getTagProps({ index })} />\n                      ))\n                      }\n                      renderInput={params => (\n                      <TextField\n                      {...params}\n                      label=\"Collections\"\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                      InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                      )}\n                      />\n                  <Autocomplete\n                      multiple\n                      id=\"free-solo-2-demo\"\n                      className={classes.fixedTag}\n                      value={productCtx.stonecount}\n                      getOptionLabel={option => option.label}\n                      defaultValue={productCtx.stonecount}\n                      options={productCtx.masterData.stones}\n                      onChange={handleoptionChange('stonecount')}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option.stonecount} {...getTagProps({ index })} />\n                      ))\n                      }\n                      renderInput={params => (\n                      <TextField\n                      {...params}\n                      label=\"No of Stones\"\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                      InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                      )}\n                      />\n  \n                  <Autocomplete\n                      multiple\n                      id=\"free-solo-2-demo\"\n                      className={classes.fixedTag}\n                      value={productCtx.stonecolour}\n                      getOptionLabel={option => option.label}\n                      defaultValue={productCtx.stonecolour}\n                      options={productCtx.masterData.gemstonecolor}\n                      onChange={handleoptionChange('stonecolour')}\n                      renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                      <Chip variant=\"outlined\" size=\"small\" label={option.stonecolor} {...getTagProps({ index })} />\n                      ))\n                      }\n                      renderInput={params => (\n                      <TextField\n                      {...params}\n                      label=\"Stone Colour\"\n                      margin=\"dense\"\n                      variant=\"outlined\"\n                      fullWidth\n                      InputProps={{ ...params.InputProps, type: 'search' }}\n                      />\n                      )}\n                      />\n              \n              <FormControlLabel\n                                label={productCtx.isactive ? \"Disable this product\" : \"Enable this product\"}\n\n                  control={\n                    <Switch checked={productCtx.isactive} onChange={handledisableproduct('isactive')} value=\"checkedA\" />\n                  }\n                />\n              \n              \n              <Grid item container style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              marginTop: \"16px\"\n            }}>\n              <Grid item>\n                <Button color=\"primary\" variant=\"contained\" onClick={(e) => saveProductEditItem()}>\n                  Save\n             </Button>\n                <Button color=\"default\" style={{  marginLeft:\"16px\" }} variant=\"contained\" onClick={(e) => backProductList()}>\n                  Back\n              </Button>\n              </Grid>\n            </Grid>\n              \n              </Grid>\n             \n            <Grid item xs={12} sm={12} md={9} lg={9}  spacing={2} style={{ padding: \"15px\" }}>\n              <Grid container item md={6}>\n                \n              </Grid>\n              <Grid style={{ fontSize: \".9rem\", padding: \"8px\" }}>Diamond Table</Grid>\n              <DiamondDetails diamond={productCtx.diamondlist} />\n              {productCtx.gemstonelist.length > 0 ? <> <Grid style={{ fontSize: \".9rem\", padding: \"8px\", marginTop: \"28px\" }}>Gemstone Table</Grid>\n              <GemstoneDetails gemstone={productCtx.gemstonelist} /> </> : null }\n              <Grid style={{ fontSize: \".9rem\", padding: \"8px\" , marginTop: \"16px\" }}>Variant Creation</Grid>\n\n              <Grid style={{\n                \n              }}>\n                {/* <Grid style={{ fontSize: \".9rem\", display: \"flex\", alignItems: \"center\" }}>Create Variant</Grid> */}\n               \n                  <ExpansionPanel expanded={expand} onChange={handleChange()}>\n                    <ExpansionPanelSummary\n                      expandIcon={expand? <CloseIcon /> : <AddIcon />}\n                      aria-controls=\"panel1c-content\"\n                      id=\"panel1c-header\"\n                    >\n                      <div className={classes.column}>\n                        <Typography className={classes.heading}>Add New variant</Typography>\n                      </div>\n                    \n                    </ExpansionPanelSummary>\n                    <Divider />\n                    <ExpansionPanelDetails className={classes.details}>\n                    <CreateVariant productMetalColor={productCtx.productMetalColor} productMetalPurity={productCtx.productMetalPurity} changeVariant={changeVariant} productId={prod_id} />  \n                    </ExpansionPanelDetails>\n                    <Divider />\n                    {/* <ExpansionPanelActions>\n                      <Button size=\"small\">Cancel</Button>\n                      <Button size=\"small\" color=\"primary\">\n                        Save\n                      </Button>\n                    </ExpansionPanelActions> */}\n                    </ExpansionPanel>\n                    \n                \n                </Grid>\n              <Grid style={{ fontSize: \".9rem\", padding: \"8px\" , marginTop: \"16px\" }}><SortHeader columnnames={columnnames.varients}  getColumnnames={getColumnnames} displytype={1}/>  </Grid>\n\n              <Variants variants={productCtx.variants} columns={varientcolumns} displycolumns={displycolumns} />\n                  \n              <Grid style={{ fontSize: \".9rem\", padding: \"8px\" , marginTop: \"16px\" }}>  \n              <SortHeader columnnames={pricingcolumns} displycolumns={displypricingcolumns}  getColumnnames={getColumnnames} displytype={2}/>\n              <Button onClick={(e) => Skupricesync(prod_id)} size=\"small\" variant=\"outlined\" color=\"primary\">\n                        Price Run For This Product\n              </Button>\n            </Grid>\n\n              <Skupricing variants={productCtx.variants} columns={pricingcolumns} displycolumns={displypricingcolumns} />\n\n            </Grid>\n            \n          </Grid>\n        </Grid>\n\n  )\n}\n\n\n\nconst useStyles2 = makeStyles(theme => ({\n  progress: {\n    margin: 'auto'\n  },\n}));\n\nexport const ProductAttributes = withRouter(props => {\n\n  const classes = useStyles2();\n\n  const { data, loading, error } = useQuery(productCategory.query);\n\n  if (loading) return <div className=\"loaderdiv\"><CircularProgress className={classes.progress} />\n  </div>\n  if (error) return <div>error</div>\n\n  const _content = <ProductProvider value={{ data, mapper: productCategory.mapper, mappertype: \"masterData\" }} >\n    <Component {...props} />\n  </ProductProvider>\n  return _content\n});\nexport default withRouter(ProductAttributes);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, Grid } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport './table.css'\n\n\n\nconst useStyles = makeStyles(theme => ({\n    typography: {\n        padding: theme.spacing(2),\n    },\n    conatainerRow:{\n        width:\"300px\",\n        color:\"#6f6f6f\",\n        display: \"grid\",\n    padding: \"16px 24px\",\n    maxHeight:\" 256px\",\n    fontSize:\"9px\",\n    overflowX: \"visible\",\n    overflowY: \"scroll\",\n    gridColumnGap: \"24px\",\n    gridTemplateColumns: \"repeat(2, 1fr)\",\n\n    [theme.breakpoints.up(\"sm\")]: {\n        width:\"500px\",\n        color:\"#6f6f6f\",\n        display: \"grid\",\n    padding: \"16px 24px\",\n    maxHeight:\" 270px\",\n    fontSize:\"14px\",\n    overflowX: \"visible\",\n    overflowY: \"scroll\",\n    gridColumnGap: \"20px\",\n    gridTemplateColumns: \"repeat(3, 1fr)\"\n    }\n\n    }\n}));\n\n\n\nexport default function Columns(props) {\n    const classes = useStyles();\n\n    const checkboxrow = [\n        {\n            id:1,\n            name:\"Published\",\n            isActive: false,       \n        },\n        {\n            id:2,\n            name:\"AVB\",\n            isActive:false,      \n        },\n        {\n            id:3,\n            name:\"Price\",\n            isActive: false,       \n        },\n        {\n            id:4,\n            name:\"Type\",\n            isActive:  false,      \n        },\n        {\n            id:5,\n            name:\"Flavour\",\n            isActive: false ,     \n        },\n        {\n            id:6,\n            name:\"Flavour\",\n            isActive:false,        \n        },\n        {\n            id:7,\n            name: \"Material\",\n            isActive:false,        \n        },\n        {\n            id:8,\n            name:\"Medium\",\n            isActive:false,        \n        },\n        {\n            id:9,\n            name:\"Shoe size\",\n            isActive:false,        \n        },\n        {\n            id:10,\n            name:\"Shoe size\",\n            isActive:false,        \n        },\n        {\n            id:11,\n            name:\"Shoe size\",\n            isActive:false,        \n        },\n        {\n            id:12,\n            name:\"Shoe size\",\n            isActive:false,        \n        },\n        {\n            id:13,\n            name:\"Shoe size\",\n            isActive:false,        \n        },\n        {\n            id:14,\n            name:\"Shoe size\",\n            isActive:false,        \n        },\n        {\n            id:15,\n            name:\"Shoe size\",\n            isActive:false,        \n        }\n        \n        \n        \n        \n        \n    ]\n    const [columns,setColumns ] = React.useState({\n        listOfValue:checkboxrow\n    })\n    function stateChange(id){\n        let listOfValue = columns.listOfValue.map((data,index)=>{\n            if(id===data.id){\n                data.isActive = data.isActive?false:true;\n            }\n            return data;\n        })\n        setColumns({\n            listOfValue\n        })\n    }\n    function resetButton(){\n        let listOfValue = columns.listOfValue.map((data,index)=>{\n                data.isActive = false;\n            \n            return data;\n        })\n        setColumns({\n            listOfValue\n        })\n    }\n    // const lists = columns.listOfValue.map((head) =>\n    //     (\n    //         <Grid conatiner>\n    //             <Grid item xs={4}><Checkbox\n    //                 value=\"secondary\"\n    //                 color=\"primary\"\n    //                 inputProps={{ 'aria-label': 'secondary checkbox' }}\n    //                 checked = {head.isActive}\n    //                 onChange = {()=>stateChange(head.id)}\n                \n    //             />\n    //                 <h3 style={{ display: \"inline-block\", fontWeight: \"500\" }}>{head}</h3>\n    //             </Grid>\n    //         </Grid>\n    //     )\n\n    // );\n\n   \n\n\n\n\n    return (\n        \n         <div style={{ maxHeight: \"420px\"}}>\n            <Typography style={{ fontWeight: \"400\", color: \"#6f6f6f\", width: \"90%\", margin: \"6px auto\" }} className={classes.typography} variant=\"h5\">(number) columns selected out of (total number)</Typography>\n            <Grid style={{ height: \"270px\", borderBottom: \"1px solid #6f6f6f\", borderTop: \"1px solid #6f6f6f\", width: \"95%\", margin: \"auto\", paddingTop: \"5px\", paddingBottom: \"10px\" }}>\n                <Grid conatiner>\n              <Grid item   className={classes.conatainerRow}>\n                   {columns.listOfValue.map((head) =><Grid container>\n                        <Checkbox\n                            color=\"primary\"\n                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                               checked = {head.isActive}\n                    onChange = {()=>stateChange(head.id)}\n                            \n                        />\n                   <h3 style={{fontWeight: \"500\" }}>{head.name}</h3></Grid>)}\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid style={{ display: \"flex\", justifyContent: \"space-between\", margin: \"10px auto\", width: \"90%\" }}>\n                <Grid>\n                    <Button size=\"large\" onClick={()=>resetButton()}>RESET</Button>\n                </Grid>\n                <Grid style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                    <Button size=\"large\" onClick={()=>props.columnclose()}>cancel</Button>\n                    <Button color=\"primary\" backgroundColor=\"secondary\" size=\"large\" variant=\"contained\" className={classes.margin}>\n                        SAVE\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n        \n    );\n}\n","import React from 'react';\nimport { Form, Grid,Select } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Popover from '@material-ui/core/Popover';\nimport Typography from '@material-ui/core/Typography';\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport Columns from \"./columns\"\nimport './table.css'\n\n\n\n\nconst useStyless = makeStyles(theme => ({\n  button: {\n    color: \"#06847B\",\n    border: \"1px solid #7bbcb7\",\n    '&:hover': {\n      backgroundColor: \"rgba(6, 132, 123, 0.1)\",\n      border: \"1px solid #06847B\",\n    }\n  },\n}));\n\n\nconst useStyles = makeStyles(theme => ({\n  typography: {\n    padding: theme.spacing(2),\n  },\n\n}));\n\nconst options = [\n  \"Show some love to Material-UI\",\n  \"Show all notification content\",\n  \"Hide sensitive notification content\",\n  \"Hide all notification content\"\n];\n\nexport default function FormPropsTextFields() {\n  const classess = useStyless();\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClickListItem = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (event, index) => {\n    setAnchorEl(null);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n\n  return (\n    <div className=\"search\" style={{ display: \"flex\", justifyContent: \"space-around\", background: \"white\", borderTop: \"1px solid #e4e4e4\", borderBottom: \"1px solid #e4e4e4\" }}>\n      <Grid lg={2} md={2} sm={3}>\n        <Button onClick={handleClick} variant=\"outlined\" color=\"primary\" backgroundColor=\"secondary\" size=\"large\"  style={{ fontSize: \"15px\", width: \"95%\", marginLeft: \"15px\", marginTop: \"18px\", marginBottom: \"10px\", padding: \"6px 0px\" }}>\n          ADD FILTER<ArrowDownwardIcon fontSize=\"inherit\" />\n\n        </Button>\n        <Popover\n          id={id}\n          open={open}\n          anchorEl={anchorEl}\n          onClose={handleClose}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n        >\n          <Typography style={{ paddingBottom: \"0px\", FontWeight: \"400\", color: \"#6f6f6f\" }} className={classes.typography} variant=\"h5\">Select all products where:</Typography>\n\n          <div className={classes.root} style={{padding:\"4px 10px 10px 10px\"}}>\n          \n              <Select\n              className={classes.notchedOutline}\n                fullWidth\n                variant=\"outlined\"\n                margin=\"dense\"\n                labelId=\"demo-controlled-open-select-label\"\n                id=\"demo-controlled-open-select\"\n                \n        >\n         \n          <MenuItem style={{backgroundColor:\"white\",color:\"#6f6f6f\",padding:\"15px 20px\",fontSize:\"17px\"}}>Visibility</MenuItem>\n          <MenuItem style={{backgroundColor:\"white\",color:\"#6f6f6f\",padding:\"15px 20px\",fontSize:\"17px\"}}>Stock</MenuItem>\n          <MenuItem style={{backgroundColor:\"white\",color:\"#6f6f6f\",padding:\"15px 20px\",fontSize:\"17px\"}}>Price</MenuItem>\n        </Select>\n         \n            <Menu\n              id=\"lock-menu\"\n              // anchorEl={anchorEl}\n\n              keepMounted\n              // open={Boolean(anchorEl)}\n              onClose={handleClose}\n            >\n              {options.map((option, index) => (\n                <MenuItem\n                  key={option}\n\n\n                  onClick={event => handleMenuItemClick(event, index)}\n                >\n                  {option}\n                </MenuItem>\n              ))}\n            </Menu>\n          </div>\n\n\n\n        </Popover>\n\n      </Grid>\n      <Grid lg={10} md={10} sm={9}>\n        <form noValidate autoComplete=\"off\" style={{ width: \"97%\", margin: \"auto\", marginTop: \"10px\", marginBottom: \"10px\" }}>\n          <TextField fullWidth margin=\"dense\" id=\"outlined-basic\" variant=\"outlined\"  />\n        </form>\n      </Grid>\n    </div>\n  );\n}\n","import React from 'react';\nimport {Grid} from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Columns from './columns';\nimport Popover from '@material-ui/core/Popover';\nimport './table.css';\n\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        color:\"#06847B\",\n        border: \"1px solid #7bbcb7\",\n        '&:hover':{\n            backgroundColor: \"rgba(6, 132, 123, 0.1)\",\n            border: \"1px solid #06847B\",\n        }\n      },\n\n}));\n\nfunction SortHeader(){\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState(null);\n \n    const handleClick = event => {\n        setAnchorEl(event.currentTarget);\n      };\n      const handleClose = () => {\n        setAnchorEl(false);\n      };\n      const open = Boolean(anchorEl);\n      const id = open ? 'simple-popover' : undefined;\n    \n     \n        return(\n            <Grid container lg={12} md={12} sm={12} xs={12} style={{display:\"flex\",justifyContent:\"space-between\",marginBottom:\"17px\",marginTop:\"25px\"}}>\n                <Grid xl={8} lg={9} md={8} sm={7} xs={12}>\n                     <h2 className=\"products\" style={{fontSize:\"24px\",fontWeight:\"400\"}}>Products</h2>   \n                </Grid>\n                <Grid container xl={4} lg={3} md={4} sm={5} xs={12} lassName=\"column\" style={{display:\"flex\",justifyContent:\"space-between\"}}>\n                    <Grid className=\"column-btn\" lg={5} md={5} sm={5} xs={5}>\n                        <Button className=\"product\" id=\"one\" color=\"primary\" backgroundColor=\"secondary\"  onClick={handleClick} variant=\"outlined\" size=\"large\" color=\"primary\" style={{fontSize:\"15px\",padding:\"6px 6px\"}}>\n                            COLUMNS<ArrowDownwardIcon fontSize=\"inherit\" />\n                        </Button>\n                        <Popover\n                            id={id}\n                            open={open}\n                            anchorEl={anchorEl}\n                            onClose={handleClose}\n                            anchorOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'center',\n                            }}\n                            transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'center',\n                            }}\n                        >\n                            <Columns columnclose={handleClose}/>\n                        </Popover>\n\n\n\n                    </Grid>\n                    <Grid className=\"column-btn\" lg={7} md={7} sm={7} xs={7}>\n                        <Button id=\"create\"  className=\"product\" variant=\"contained\" size=\"large\" color=\"primary\" backgroundColor=\"secondary\">\n                        CREATE PRODUCT\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Grid>\n        ) \n\n}\nexport default SortHeader","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport {TableBody,Grid} from '@material-ui/core';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton'; \nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Filterandsearch from './filterandsearch';\nimport SortHeader from './SortHeader';\nimport './table.css';\n\n\nfunction createData(name, calories, fat, carbs, protein, protein1, protein2) {\n  return { name, calories, fat, carbs, protein , protein1, protein2};\n}\n\nconst rows = [\n  createData('Cupcake', 305, 3.7, 67, 4.3, 67, 4.3),\n  createData('Donut', 452, 25.0, 51, 4.9, 67, 4.3),\n  createData('Eclair', 262, 16.0, 24, 6.0, 67, 4.3),\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0, 67, 4.3),\n  createData('Gingerbread', 356, 16.0, 49, 3.9, 67, 4.3),\n  createData('Honeycomb', 408, 3.2, 87, 6.5, 67, 4.3),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3, 67, 4.3),\n  createData('Jelly Bean', 375, 0.0, 94, 0.0, 67, 4.3),\n  createData('KitKat', 518, 26.0, 65, 7.0, 67, 4.3),\n  createData('Lollipop', 392, 0.2, 98, 0.0, 67, 4.3),\n  createData('Marshmallow', 318, 0, 81, 2.0, 67, 4.3),\n  createData('Nougat', 360, 19.0, 9, 37.0, 67, 4.3),\n  createData('Oreo', 437, 18.0, 63, 4.0, 67, 4.3),\n];\n\n\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\n  { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\n  { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\n  { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\n  { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\n  { id: 'protein1', numeric: true, disablePadding: false, label: 'Protein1 (g)' },\n  { id: 'protein2', numeric: true, disablePadding: false, label: 'Protein2 (g)' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = property => event => {\n    onRequestSort(event, property);\n  };\n\n  return (\n\n   <React.Fragment >\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ 'aria-label': 'select all desserts' }}\n          />\n        </TableCell>\n        {headCells.map(headCell => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n    </React.Fragment> \n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles(theme => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = props => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n     \n    <Toolbar\n    \n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} style={{fontWeight:\"400\"}} variant=\"h4\" id=\"tableTitle\">\n          Nutrition\n          \n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            {/* <FilterListIcon /> */}\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(0),\n  },\n  table: {\n    // minWidth: 750,\n    width:\"100%\", \n    overflowX:\"scroll\"\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function EnhancedTable() {\n  const classes = useStyles();\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('calories');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [dense, setDense] = React.useState(false);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = event => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map(n => n.name);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event, name) => {\n    const selectedIndex = selected.indexOf(name);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, newPage) => {\n      \n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChangeDense = event => {\n    setDense(event.target.checked);\n  };    \n\n  const isSelected = name => selected.indexOf(name) !== -1;\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  return (\n    <div className={classes.root}>\n\n        {/* <div className=\"nightmode\" style={{textAlign:\"right\"}}>                \n                <FormControlLabel\n               \n                control={<Switch checked={dense} onChange={handleChangeDense} />}\n                // label=\"Dense padding\"\n            />\n        </div>    */}\n\n\n        <SortHeader lg={12} md={12} sm={12}  />\n\n<Grid container lg={12} md={12} sm={12} xs={12} style={{overflowX:'auto'}}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar numSelected={selected.length} />\n        <TableContainer>\n        <Filterandsearch/>\n\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n            \n                        {stableSort(rows, getComparator(order, orderBy))\n                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                        .map((row, index) => {\n                        const isItemSelected = isSelected(row.name);\n                        const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      onClick={event => handleClick(event, row.name)}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row.name}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isItemSelected}\n                          inputProps={{ 'aria-labelledby': labelId }}\n                        />\n                      </TableCell>\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                        {row.name}\n                      </TableCell>\n                      <TableCell align=\"right\">{row.calories}</TableCell>\n                      <TableCell align=\"right\">{row.fat}</TableCell>\n                      <TableCell align=\"right\">{row.carbs}</TableCell>\n                      <TableCell align=\"right\">{row.protein}</TableCell>\n                      <TableCell align=\"right\">{row.protein1}</TableCell>\n                      <TableCell align=\"right\">{row.protein2}</TableCell>\n                    </TableRow>\n                    \n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n        \n              )}\n                   \n                     \n              \n              \n            </TableBody>\n          </Table>\n        \n        \n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n      </Grid>  \n    </div>\n\n    \n  );\n}\n","import React from 'react';\nimport ProductTable from './ProductTable';\nimport './table.css'\nfunction newmaterial1() {\n    return (\n        <div style={{ width: \"100%\" }}>\n            <ProductTable />\n        </div>\n    )\n}\nexport default newmaterial1","import React from 'react';\nimport { Grid, Typography, TextField, FormGroup } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { withStyles } from '@material-ui/core/styles';\nimport './style.css'\n\n\nconst IOSSwitch = withStyles(theme => ({\n    root: {\n        width: 42,\n        height: 26,\n        padding: 0,\n        margin: theme.spacing(1),\n    },\n    switchBase: {\n        padding: 1,\n        '&$checked': {\n            transform: 'translateX(16px)',\n            color: theme.palette.common.white,\n            '& + $track': {\n                backgroundColor: '#52d869',\n                opacity: 1,\n                border: 'none',\n            },\n        },\n        '&$focusVisible $thumb': {\n            color: '#52d869',\n            border: '6px solid #fff',\n        },\n    },\n    thumb: {\n        width: 24,\n        height: 24,\n    },\n    track: {\n        borderRadius: 26 / 2,\n        border: `1px solid ${theme.palette.grey[400]}`,\n        backgroundColor: theme.palette.grey[50],\n        opacity: 1,\n        transition: theme.transitions.create(['background-color', 'border']),\n    },\n    checked: {},\n    focusVisible: {},\n}))(({ classes, ...props }) => {\n    return (\n        <Switch\n            focusVisibleClassName={classes.focusVisible}\n            disableRipple\n            classes={{\n                root: classes.root,\n                switchBase: classes.switchBase,\n                thumb: classes.thumb,\n                track: classes.track,\n                checked: classes.checked,\n            }}\n            {...props}\n        />\n    );\n});\n\n\n\n\n\nexport default function Editcategory(props) {\n\n    const [state, setState] = React.useState({\n        checkedA: true,\n        checkedB: true,\n        checkedC: true,\n    });\n\n\n    const handleChange = name => event => {\n        setState({ ...state, [name]: event.target.checked });\n    };\n\n\n\n\n    return (\n        <div>\n            <Grid>\n                <Typography variant=\"h2\" style={{ marginTop: \"25px\", marginBottom: \"50px\", fontWeight: \"400\", fontSize: \"22px\" }}>Edit Category Items</Typography>\n            </Grid>\n            <Grid container style={{ width: \"80%\", margin: \"auto\" }} >\n                <Grid container lg={12} md={12} spaceing={2} justify=\"center\" id=\"margin\" style={{ marginBottom: \"75px\" }}>\n                    <Grid lg={4} md={4} sm={6} xs={12}>\n                        <TextField id=\"outlined-basic\" label=\"Name\" margin=\"dense\" variant=\"outlined\" color=\"primary\" />\n                    </Grid>\n                    <Grid lg={4} md={4} sm={6} xs={12}>\n                        <TextField id=\"outlined-basic\" label=\"URL\" margin=\"dense\" variant=\"outlined\" color=\"primary\" />\n                    </Grid>\n                    <Grid lg={4} md={4} sm={12} xs={12}>\n                        <   TextField id=\"outlined-basic\" label=\"SEO Text\" margin=\"dense\" variant=\"outlined\" color=\"primary\" />\n                    </Grid>\n                </Grid>\n                <Grid container className=\"switch\" lg={12} md={12} justify=\"center\">\n                    <Grid style={{margin:\"10px auto\"}} lg={4} md={4} sm={6} xs={12}>\n                        <Typography className=\"filter-head\" variant=\"h4\"  style={{ fontWeight: \"400\", fontSize: \"19px\" }}>For Filters</Typography>\n                        <div className=\"z\">\n                            <h4 style={{display:'inline-block',marginRight:\"10px\"}}>N</h4>\n                            <FormControlLabel\n                                \n                                control={\n                                    <IOSSwitch\n                                        checked={state.checkedA}\n                                        onChange={ handleChange('checkedA')}\n                                        value=\"checkedA\"\n                                        \n                                    />\n                                }\n                                label=\"Y\"\n                            />\n                         </div>  \n\n                        \n                    </Grid>\n                    <Grid  style={{margin:\"7px auto\"}} lg={4} md={4} sm={6} xs={12}>\n                        <Typography className=\"filter-head\" variant=\"h4\"  style={{ fontWeight: \"400\", fontSize: \"19px\" }}>For Search</Typography>\n                        <div className=\"z\">\n                        <h4 style={{display:'inline-block',marginRight:\"10px\"}}>N</h4>\n                            <FormControlLabel\n                                control={\n                                    <IOSSwitch\n                                        checked={state.checkedB}\n                                        onChange={ handleChange('checkedB')}\n                                        value=\"checkedB\"\n                                    />\n                                }\n                                label=\"Y\"\n                            />\n                        </div>\n                    </Grid>\n                    <Grid style={{margin:\"10px auto\"}} lg={4} md={4} sm={12} xs={12}>\n                        <Typography variant=\"h4\" className=\"filter-head\"  style={{ fontWeight: \"400\", fontSize: \"19px\" }}>For Price</Typography>\n                        <div className=\"z\">\n                        <h4 style={{display:'inline-block',marginRight:\"10px\"}}>N</h4>\n                            <FormControlLabel\n                                control={\n                                    <IOSSwitch\n                                        checked={state.checkedC}\n                                        onChange={ handleChange('checkedC')}\n                                        value=\"checkedC\"\n                                    />\n                                }\n                                label=\"Y\"\n                            />\n                        </div>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid style={{ display: \"flex\", justifyContent: \"flex-end\", width: \"80%\", margin: \"auto\", marginTop: \"50px\" }}>\n                        <Button className=\"product\" variant=\"contained\" size=\"medium\" color=\"primary\" backgroundColor=\"secondary\" style={{ margin: \"auto 10px\" }}>\n                            Cancel\n                            </Button>\n                        <Button className=\"product\" variant=\"contained\" size=\"medium\" color=\"primary\" backgroundColor=\"secondary\" style={{ margin: \"auto 10px\" }}>\n                            Save\n                            </Button>\n                    </Grid>\n                    <Grid>\n\n                    </Grid>\n                </Grid>\n            </Grid>\n\n        </div>\n    )\n}","import React from 'react';\nimport {BrowserRouter, Route, Switch } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport route from './route';\nimport { Dashboard, Login, Productupload, Configuration,\n        Priceupdate,Vendorprice, Vendorlist,Markupprice,\n     Productlist, Materiallist, CategoryList, ProducttypeList, Voucherdiscount, OrderList } from '../screens';\nimport PrivateRoute from './PrivateRoute';\nimport {  NetworkProvider } from '../context/NetworkContext';\nimport { GlobalContext } from '../context';\nimport { ApolloProvider } from 'react-apollo';\nimport { ProductAttributes } from '../screens/ProductEdit/ProductAttributes';\nimport { CreateVariant } from '../screens/ProductEdit/CreateVariant';\nimport { ProductContext,ProductProvider } from '../context/ProductuploadContext';\nimport newmaterial from '../screens/CategoryList/components/newmaterial/newmaterial';\nimport Editcategory from '../screens/CategoryList/components/editpage/editcategory';\n\nconst MainApp = () => {\n\n    const { globalCtx } = React.useContext(GlobalContext);\n    const { productCtx } = React.useContext(ProductContext);\n    const client = new ApolloClient({ uri: globalCtx.gqlClient, });\n\n    return(\n        <ApolloProvider client={client} >\n            {/* <ProductProvider > */}\n            <NetworkProvider>\n                <Switch>\n                    <Route exact path=\"/\" component={Login} />\n                    <Route path={route.login} component={Login} />\n                    <PrivateRoute  path={route.dashboard} component={Dashboard} />\n                    <PrivateRoute  path={route.productupload} component={Productupload} />\n                    <PrivateRoute  path={route.configuration} component={Configuration} />\n                    <PrivateRoute  path={route.vendor} component={Vendorlist} />\n                    <PrivateRoute  path={route.productlist} component={Productlist} />\n                    <PrivateRoute  path={route.materiallist} component={CategoryList} />\n                    <PrivateRoute  path={route.editCategory} component={Editcategory} />\n                    <PrivateRoute  path={route.materiallistpage} component={newmaterial}/>\n                    <PrivateRoute  path={route.producttypes} component={ProducttypeList} />\n                    <PrivateRoute  path={route.voucherdiscount} component={Voucherdiscount} />\n                    <PrivateRoute  path={route.priceupdate} component={Priceupdate} />\n                    <PrivateRoute  path={route.orderlist} component={OrderList} />\n                    <PrivateRoute  path={route.vendorPrice} component={Vendorprice} />\n                    <PrivateRoute  path={route.markupPrice} component={Markupprice} />\n\n                    \n                    \n                     <PrivateRoute exact path={`${route.productAttributes}/:id`} component={ProductAttributes} />  \n                    <PrivateRoute exact path={`${route.createVariant}`} component={CreateVariant} />            \n          </Switch>\n            </NetworkProvider>\n            {/* </ProductProvider> */}\n        </ApolloProvider>\n    )\n}\n\n\nexport default MainApp;","import { colors } from '@material-ui/core';\n\nconst white = '#FFFFFF';\nconst black = '#000000';\n\nexport default {\n  black,\n  white,\n  \n  primary: {\n    contrastText: white,\n    dark: colors.indigo[900],\n    main: colors.indigo[500],\n    light: colors.indigo[100]\n  },\n  secondary: {\n    contrastText: white,\n    dark: colors.blue[900],\n    main: colors.blue['A400'],\n    light: colors.blue['A400']\n  },\n  success: {\n    contrastText: white,\n    dark: colors.green[900],\n    main: colors.green[600],\n    light: colors.green[400]\n  },\n  info: {\n    contrastText: white,\n    dark: colors.blue[900],\n    main: colors.blue[600],\n    light: colors.blue[400]\n  },\n  warning: {\n    contrastText: white,\n    dark: colors.orange[900],\n    main: colors.orange[600],\n    light: colors.orange[400]\n  },\n  error: {\n    contrastText: white,\n    dark: colors.red[900],\n    main: colors.red[600],\n    light: colors.red[400]\n  },\n  text: {\n    primary: colors.blueGrey[900],\n    secondary: colors.blueGrey[600],\n    link: colors.blue[600]\n  },\n  background: {\n    default: '#F4F6F8',\n    paper: white\n  },\n  icon: colors.blueGrey[600],\n  divider: colors.grey[200]\n};\n","import palette from './palette';\n\nexport default {\n  h1: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '35px',\n    letterSpacing: '-0.24px',\n    lineHeight: '40px'\n  },\n  h2: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '29px',\n    letterSpacing: '-0.24px',\n    lineHeight: '32px'\n  },\n  h3: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '24px',\n    letterSpacing: '-0.06px',\n    lineHeight: '28px'\n  },\n  h4: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '20px',\n    letterSpacing: '-0.06px',\n    lineHeight: '24px'\n  },\n  h5: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '16px',\n    letterSpacing: '-0.05px',\n    lineHeight: '20px'\n  },\n  h6: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '14px',\n    letterSpacing: '-0.05px',\n    lineHeight: '20px'\n  },\n  subtitle1: {\n    color: palette.text.primary,\n    fontSize: '16px',\n    letterSpacing: '-0.05px',\n    lineHeight: '25px'\n  },\n  subtitle2: {\n    color: palette.text.secondary,\n    fontWeight: 400,\n    fontSize: '14px',\n    letterSpacing: '-0.05px',\n    lineHeight: '21px'\n  },\n  body1: {\n    color: palette.text.primary,\n    fontSize: '14px',\n    letterSpacing: '-0.05px',\n    lineHeight: '21px'\n  },\n  body2: {\n    color: palette.text.secondary,\n    fontSize: '12px',\n    letterSpacing: '-0.04px',\n    lineHeight: '18px'\n  },\n  button: {\n    color: palette.text.primary,\n    fontSize: '14px'\n  },\n  caption: {\n    color: palette.text.secondary,\n    fontSize: '11px',\n    letterSpacing: '0.33px',\n    lineHeight: '13px'\n  },\n  overline: {\n    color: palette.text.secondary,\n    fontSize: '11px',\n    fontWeight: 500,\n    letterSpacing: '0.33px',\n    lineHeight: '13px',\n    textTransform: 'uppercase'\n  }\n};\n","import MuiButton from './MuiButton';\nimport MuiIconButton from './MuiIconButton';\nimport MuiPaper from './MuiPaper';\nimport MuiTableCell from './MuiTableCell';\nimport MuiTableHead from './MuiTableHead';\nimport MuiTypography from './MuiTypography';\n\nexport default {\n  MuiButton,\n  MuiIconButton,\n  MuiPaper,\n  MuiTableCell,\n  MuiTableHead,\n  MuiTypography\n};\n","export default {\n  contained: {\n    boxShadow:\n      '0 1px 1px 0 rgba(0,0,0,0.14), 0 2px 1px -1px rgba(0,0,0,0.12), 0 1px 3px 0 rgba(0,0,0,0.20)',\n    backgroundColor: '#FFFFFF'\n  }\n};\n","import palette from '../palette';\n\nexport default {\n  root: {\n    color: palette.icon,\n    '&:hover': {\n      backgroundColor: 'rgba(0, 0, 0, 0.03)'\n    }\n  }\n};\n","export default {\n  elevation1: {\n    boxShadow: '0 0 0 1px rgba(63,63,68,0.05), 0 1px 3px 0 rgba(63,63,68,0.15)'\n  }\n};\n","import palette from '../palette';\nimport typography from '../typography';\n\nexport default {\n  root: {\n    ...typography.body1,\n    borderBottom: `1px solid ${palette.divider}`\n  }\n};\n","import { colors } from '@material-ui/core';\n\nexport default {\n  root: {\n    backgroundColor: colors.grey[50]\n  }\n};\n","export default {\n  gutterBottom: {\n    marginBottom: 8\n  }\n};\n","import { createMuiTheme } from '@material-ui/core';\n\nimport palette from './palette';\nimport typography from './typography';\nimport overrides from './overrides';\n\nconst theme = createMuiTheme({\n  palette,\n  typography,\n  overrides,\n  zIndex: {\n    appBar: 1200,\n    drawer: 1100\n  }\n});\n\nexport default theme;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\nimport MainApp from './routes';\nimport { GlobalProvider } from './context';\nimport { CssBaseline } from '@material-ui/core';\nimport theme from './theme';\n\nimport { MuiThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n// const theme = createMuiTheme({\n//   typography: {\n//     fontFamily: [\n   \n//       'Roboto'\n  \n//     ].join(','),\n//   },\n// });\nfunction App() {\n  \n  return (\n    <GlobalProvider>\n    <MuiThemeProvider theme={theme}>\n\n        <div className=\"App\">\n          <CssBaseline />\n            <Router>\n              <MainApp />\n            </Router>\n        </div>\n        </MuiThemeProvider  >\n    </GlobalProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}